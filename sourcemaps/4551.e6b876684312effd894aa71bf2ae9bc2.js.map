{"version":3,"file":"js/4551.1651476015152.47ec47f34ed16b99c4d0.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/helpers/user/user-helper.js","webpack:///./src/redux/actions/user-actions.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd ? '' : `${env === 'ci' ? 'qa' : env}.`;\n  const description = 'These are all of the users in your Red Hat organization. ';\n  const { orgAdmin } = useContext(PermissionsContext);\n\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {description}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {description}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { getLastPageOffset, isOffsetValid } from '../shared/pagination';\nimport { getPrincipalApi } from '../shared/user-login';\n\nconst principalApi = getPrincipalApi();\n\nconst principalStatusApiMap = {\n  Active: 'enabled',\n  Inactive: 'disabled',\n};\nexport async function fetchUsers({ limit, offset = 0, orderBy, filters = {}, inModal, matchCriteria = 'partial' }) {\n  const { username, email, status = [] } = filters;\n  const sortOrder = orderBy === '-username' ? 'desc' : 'asc';\n  const mappedStatus = status.length === 2 ? 'all' : principalStatusApiMap[status[0]] || 'all';\n  const response = await principalApi.listPrincipals(limit, offset, matchCriteria, username, sortOrder, email, mappedStatus);\n  const isPaginationValid = isOffsetValid(offset, response?.meta?.count);\n  offset = isPaginationValid ? offset : getLastPageOffset(response.meta.count, limit);\n  const { data, meta } = isPaginationValid\n    ? response\n    : await principalApi.listPrincipals(limit, offset, matchCriteria, username, sortOrder, email, mappedStatus);\n  return {\n    data,\n    meta: {\n      ...meta,\n      offset,\n      limit,\n    },\n    ...(inModal\n      ? {}\n      : {\n          filters,\n          pagination: {\n            ...meta,\n            offset,\n            limit,\n            redirected: !isPaginationValid,\n          },\n        }),\n  };\n}\n","import * as ActionTypes from '../action-types';\nimport * as UserHelper from '../../helpers/user/user-helper';\n\nexport const fetchUsers = (apiProps) => ({\n  type: ActionTypes.FETCH_USERS,\n  payload: UserHelper.fetchUsers(apiProps),\n});\n\nexport const updateUsersFilters = (filters) => ({\n  type: ActionTypes.UPDATE_USERS_FILTERS,\n  payload: filters,\n});\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst WizardError = ({ context, title, text }) => {\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        Return to Step 1\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Label } from '@patternfly/react-core';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultCompactSettings,\n  defaultSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\n\nconst columns = [\n  { title: 'Org. Administrator', key: 'org-admin', transforms: [nowrap] },\n  { title: 'Username', key: 'username', transforms: [sortable] },\n  { title: 'Email' },\n  { title: 'First name', transforms: [nowrap] },\n  { title: 'Last name', transforms: [nowrap] },\n  { title: 'Status', transforms: [nowrap] },\n];\n\nconst createRows =\n  (userLinks) =>\n  (data, _expanded, checkedRows = []) => {\n    return data\n      ? data.reduce(\n          (acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => [\n            ...acc,\n            {\n              uuid: username,\n              cells: [\n                isOrgAdmin ? (\n                  <Fragment>\n                    <span>\n                      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n                      <span key=\"yes\">Yes</span>\n                    </span>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n                    <span key=\"no\">No</span>\n                  </Fragment>\n                ),\n                { title: userLinks ? <Link to={`/users/detail/${username}`}>{username.toString()}</Link> : username.toString() },\n                email.toString(),\n                firstName.toString(),\n                lastName.toString(),\n                {\n                  title: (\n                    <Label key=\"status\" color={isActive && 'green'}>\n                      {isActive ? 'Active' : 'Inactive'}\n                    </Label>\n                  ),\n                  props: {\n                    'data-is-active': isActive,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === username)),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\nconst UsersList = ({ users, fetchUsers, updateUsersFilters, isLoading, pagination, selectedUsers, setSelectedUsers, userLinks, inModal, props }) => {\n  const defaultPagination = useSelector(({ userReducer: { users } }) => ({\n    limit: inModal ? users.meta.limit : users.pagination.limit || defaultSettings.limit,\n    offset: inModal ? users.meta.offset : users.pagination.offset || defaultSettings.offset,\n    count: inModal ? users.meta.count : users.pagination.count,\n    redirected: !inModal && users.pagination.redirected,\n  }));\n\n  const history = useHistory();\n\n  let stateFilters = useSelector(\n    ({\n      userReducer: {\n        users: { filters },\n      },\n    }) => (history.location.search.length > 0 ? filters : { status: ['Active'] })\n  );\n\n  const [filters, setFilters] = useState(\n    inModal\n      ? {\n          username: '',\n          email: '',\n          status: ['Active'],\n        }\n      : stateFilters\n  );\n\n  useEffect(() => {\n    inModal || (defaultPagination.redirected && applyPaginationToUrl(history, defaultPagination.limit, defaultPagination.offset));\n  }, [defaultPagination.redirected]);\n\n  useEffect(() => {\n    const pagination = inModal ? defaultSettings : syncDefaultPaginationWithUrl(history, defaultPagination);\n    const newFilters = inModal ? { status: filters.status } : syncDefaultFiltersWithUrl(history, ['username', 'email', 'status'], filters);\n    setFilters(newFilters);\n    fetchUsers({ ...mappedProps({ ...pagination, filters: newFilters }), inModal });\n  }, []);\n\n  useEffect(() => {\n    if (!inModal) {\n      isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(history, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(history, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    inModal || updateUsersFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n\n  return (\n    <TableToolbarView\n      columns={columns}\n      isSelectable\n      isCompact={true}\n      borders={false}\n      createRows={createRows(userLinks)}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n        fetchUsers({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), inModal });\n        inModal || applyPaginationToUrl(history, limit, offset);\n        inModal || applyFiltersToUrl(history, { username, email, status });\n      }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      sortBy={{\n        index: 1,\n        direction: 'asc',\n      }}\n      rowWrapper={UsersRow}\n      titlePlural=\"users\"\n      titleSingular=\"user\"\n      noDataDescription={[\n        'This filter criteria matches no users.',\n        'Make sure the beginning of your search input corresponds to the beginning of the value you are looking for, or try changing your filter settings.',\n      ]}\n      noData={users.length === 0 && !filters.username && !filters.email}\n      filters={[\n        { key: 'username', value: filters.username, placeholder: 'Filter by username' },\n        { key: 'email', value: filters.email, placeholder: 'Filter by email' },\n        {\n          key: 'status',\n          value: filters.status,\n          label: 'Status',\n          type: 'checkbox',\n          items: [\n            { label: 'Active', value: 'Active' },\n            { label: 'Inactive', value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nconst mapStateToProps = ({ userReducer: { users, isUserDataLoading } }) => {\n  return {\n    users: users.data && users.data.map((data) => ({ ...data, uuid: data.username })),\n    pagination: users.meta,\n    isLoading: isUserDataLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: (apiProps = defaultSettings) => {\n      dispatch(fetchUsers(apiProps));\n    },\n    updateUsersFilters: (filters) => {\n      dispatch(updateUsersFilters(filters));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    fetchUsers: (apiProps) => {\n      return propsFromDispatch.fetchUsers(apiProps ? apiProps : defaultCompactSettings);\n    },\n  };\n};\n\nUsersList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  users: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchUsers: PropTypes.func.isRequired,\n  updateUsersFilters: PropTypes.func.isRequired,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number,\n    count: PropTypes.number,\n  }),\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  inModal: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  inModal: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\nexport const CompactUsersList = connect(mapStateToProps, mapDispatchToProps, mergeProps)(UsersList);\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw 'Can have maximum of 150 characters.';\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw 'Name has already been taken.';\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title=\"Group name already taken\"\n        text=\"Please return to Step 1: Group information and choose a unique group name for your group.\"\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        Review details\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\n\nexport default {\n  fields: [\n    {\n      component: 'wizard',\n      name: 'wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Create group',\n      fields: [\n        {\n          name: 'name-and-description',\n          nextStep: 'add-roles',\n          title: 'Name and Description',\n          fields: [\n            {\n              component: 'set-name',\n              name: 'group-name',\n              validate: [\n                {\n                  type: validatorTypes.REQUIRED,\n                },\n              ],\n            },\n            {\n              component: componentTypes.TEXTAREA,\n              name: 'group-description',\n              hideField: true,\n              validate: [\n                {\n                  type: validatorTypes.MAX_LENGTH,\n                  threshold: 150,\n                },\n              ],\n            },\n          ],\n        },\n        {\n          name: 'add-roles',\n          nextStep: 'add-users',\n          title: 'Add roles',\n          fields: [\n            {\n              component: 'set-roles',\n              name: 'roles-list',\n            },\n          ],\n        },\n        {\n          name: 'add-users',\n          nextStep: 'review',\n          title: 'Add members',\n          fields: [\n            {\n              component: 'set-users',\n              name: 'users-list',\n            },\n          ],\n        },\n        {\n          name: 'review',\n          title: 'Review details',\n          // eslint-disable-next-line react/display-name\n          buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n          StepTemplate: ReviewTemplate,\n          fields: [\n            {\n              component: 'summary-content',\n              name: 'summary-content',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label=\"Group name\"\n          helperTextInvalid={groupName ? groupNameError : 'Required'}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label=\"Group description\"\n          helperTextInvalid=\"Can have maximum of 150 characters.\"\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\n\nconst createRows = (data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ roles, fetchRoles, isLoading, pagination, selectedRoles, canSort, setSelectedRoles }) => {\n  const [filterValue, setFilterValue] = useState('');\n  const { current: columns } = useRef([\n    { title: 'Name', key: 'display_name', ...(canSort ? { transforms: [sortable] } : { orderBy: 'name' }) },\n    { title: 'Description' },\n  ]);\n\n  useEffect(() => {\n    fetchRoles({ orderBy: 'display_name' });\n  }, []);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  return (\n    <TableToolbarView\n      columns={columns}\n      isSelectable\n      isCompact\n      borders={false}\n      createRows={createRows}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder=\"role name\"\n      fetchData={(config) => fetchRoles(mappedProps({ ...config, filters: { display_name: config.name } }))}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural=\"roles\"\n      titleSingular=\"role\"\n      tableId=\"roles-list\"\n    />\n  );\n};\n\nconst mapStateToProps = ({ roleReducer: { roles, isLoading } }) => ({\n  roles: roles.data,\n  pagination: roles.meta,\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchRoles: (apiProps) => {\n      dispatch(fetchRolesWithPolicies(mappedProps(apiProps)));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nRolesList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRoles: PropTypes.func.isRequired,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  canSort: PropTypes.bool,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nconst mapStateToPropsGroup = ({ groupReducer: { selectedGroup } }) => {\n  const roles = selectedGroup.addRoles.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.addRoles.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.addRoles.loaded,\n    groupId: selectedGroup.uuid,\n  };\n};\n\nconst mapDispatchToPropsGroup = (dispatch) => {\n  return {\n    fetchRoles: (groupId, apiProps) => {\n      dispatch(fetchAddRolesForGroup(groupId, apiProps));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    canSort: false,\n    fetchRoles: (apiProps) => propsFromDispatch.fetchRoles(propsFromState.groupId, apiProps),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RolesList);\nexport const ExcludedRolesList = connect(mapStateToPropsGroup, mapDispatchToPropsGroup, mergeProps)(RolesList);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>Select one or more roles to add to this group.</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { CompactUsersList } from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={'To manage users, go to your'} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SummaryContent = () => {\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Group name\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Group description\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Roles\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Members\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport schema from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: 'Adding group',\n        dismissDelay: 8000,\n        dismissable: false,\n        description: 'Adding group was canceled by the user.',\n      })\n    );\n    push({\n      pathname: paths.groups,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success adding group',\n            dismissDelay: 8000,\n            dismissable: false,\n            description: 'The group was added successfully.',\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default AddGroupWizard;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({\n  addNotification,\n  updateGroup,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n  group,\n  onClose,\n}) => {\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? updateGroup(user_data)\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : updateGroup(user_data).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      dismissDelay: 8000,\n      dismissable: false,\n      title: selectedGroup ? 'Editing group' : 'Adding group',\n      description: selectedGroup ? 'Edit group was canceled by the user.' : 'Adding group was canceled by the user.',\n    });\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: 'Name',\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: 'Description',\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate {...props} ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: `Edit group's information` }} />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      updateGroup,\n      fetchGroup,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditGroupModal);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({\n  removeGroups,\n  group,\n  isLoading,\n  fetchGroup,\n  groupsUuid,\n  isModalOpen,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n}) => {\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      fetchGroup(groupsUuid[0].uuid);\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    removeGroups(uuids)\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {multipleGroups ? 'Delete groups?' : 'Delete group?'}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {multipleGroups ? 'Delete groups' : 'Delete group'}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            Deleting these <b>{groupsUuid.length}</b> groups removes all roles from the members inside the group.\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            Deleting the <b>{group.name}</b> group removes all roles from the members inside the group.\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label=\"I understand that this action cannot be undone.\"\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => ({\n  group: selectedGroup,\n  isLoading: !selectedGroup.loaded,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveGroupModal);\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, _opened, selectedRows = []) =>\n  data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} to={`/groups/detail/${uuid}`}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  bodyContent={`This group contains the roles that all ${\n                    isAdminDefault ? 'org admin users' : 'users in your organization'\n                  } inherit by default.`}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{isActive ? 'Active' : 'Inactive'}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addGroup, addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { CompactUsersList } from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\n\nconst AddGroupMembers = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  addNotification,\n  closeUrl,\n  addMembersToGroup,\n  fetchMembersForGroup,\n  fetchGroups,\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      addNotification({\n        variant: 'info',\n        title: `Adding member${userList.length > 1 ? 's' : ''} to group`,\n        dismissDelay: 8000,\n        dismissable: false,\n        description: `Adding member${userList.length > 1 ? 's' : ''} to group initiated.`,\n      });\n      addMembersToGroup(uuid, userList).then(() => {\n        fetchMembersForGroup(uuid);\n        fetchGroups({ inModal: false });\n      });\n    }\n\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      title: `Adding member${selectedUsers.length > 1 ? 's' : ''} to group`,\n      dismissDelay: 8000,\n      dismissable: false,\n      description: `Adding member${selectedUsers.length > 1 ? 's' : ''} to group was canceled by the user.`,\n    });\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title=\"Add members\"\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          Add to group\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription=\"To manage users, go to your\" />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func,\n  }).isRequired,\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  match: PropTypes.object,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      addGroup,\n      addMembersToGroup,\n      fetchMembersForGroup,\n      fetchGroups,\n    },\n    dispatch\n  );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddGroupMembers));\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\n\nconst columns = [\n  { title: 'Status', transforms: [nowrap] },\n  { title: 'Username' },\n  { title: 'Email' },\n  { title: 'Last name' },\n  { title: 'First name' },\n];\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) =>\n  plural ? (\n    <p>\n      These <b> {`${name}`}</b> members will lose all the roles associated with the <b>{`${group}`}</b> group.\n    </p>\n  ) : (\n    <p>\n      <b>{`${name}`}</b> will lose all the roles associated with the <b> {`${group}`}</b> group.\n    </p>\n  );\n\nconst GroupPrincipals = () => {\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: 'Remove',\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: 'Remove member?',\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: 'Remove member',\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members']}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add_members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              Add member\n            </Button>\n          </Link>,\n          {\n            label: 'Add member',\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add_members`);\n            },\n          },\n          {\n            label: 'Remove',\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = multipleMembersSelected ? 'Remove members?' : 'Remove member?';\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>All users in this organization are members of this group.</Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarView\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={hasPermissions.current}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder=\"username\"\n            titlePlural=\"members\"\n            titleSingular=\"member\"\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: 'There are no members in this group', description: ['Add a user to configure user access.', ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            Once you edit the <b>Default access</b> group, the system will no longer update it with new default access roles. The group name will\n            change to <b>Custom default access</b>.\n          </Text>\n        </TextContent>\n      }\n      title={'Warning'}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={'Continue'}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Modal, ModalVariant, Stack, StackItem, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport { ExcludedRolesList } from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport '../../../App.scss';\n\nconst AddGroupRoles = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  name,\n  isDefault,\n  isChanged,\n  addNotification,\n  onDefaultGroupChanged,\n  fetchRolesForGroup,\n  fetchGroup,\n}) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    addNotification({\n      variant: 'warning',\n      title: 'Adding roles to group',\n      dismissDelay: 8000,\n      dismissable: false,\n      description: 'Adding roles to group was canceled by the user.',\n    });\n    push(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(uuid, rolesList, () => {\n      fetchRolesForGroup();\n      fetchGroup();\n    });\n    if (isDefault && !isChanged) {\n      onDefaultGroupChanged(true);\n    }\n\n    return push(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      title=\"Add roles to group\"\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          Add to group\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              This role list has been filtered to only show roles that are not currently in <b> {name}</b>.\n            </Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <Card>\n            <ExcludedRolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </Card>\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.any,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  addNotification: PropTypes.func,\n  onDefaultGroupChanged: PropTypes.func,\n  fetchRolesForGroup: PropTypes.func,\n  fetchGroup: PropTypes.func,\n};\n\nexport default AddGroupRoles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory } from 'react-router-dom';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { removeRolesFromGroup, addRolesToGroup, fetchRolesForGroup, fetchAddRolesForGroup, fetchGroup } from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport './group-roles.scss';\n\nconst columns = [{ title: 'Name', orderBy: 'name' }, { title: 'Description' }, { title: 'Last modified' }];\n\nconst createRows = (groupUuid, data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description, modified }) => [\n          ...acc,\n          {\n            uuid,\n            title: display_name || name,\n            cells: [\n              <Fragment key={`${uuid}-name`}>\n                <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n              </Fragment>,\n              description,\n              <Fragment key={`${uuid}-modified`}>\n                <DateFormat date={modified} type={getDateFormat(modified)} />\n              </Fragment>,\n            ],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      Add role\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || 'All available roles have already been added to the group'}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst GroupRoles = ({\n  roles,\n  removeRoles,\n  addRoles,\n  fetchRolesForGroup,\n  isLoading,\n  pagination,\n  match: {\n    params: { uuid },\n  },\n  name,\n  isAdminDefault,\n  isPlatformDefault,\n  isChanged,\n  onDefaultGroupChanged,\n  fetchAddRolesForGroup,\n  disableAddRoles,\n  addNotification,\n  reloadGroup,\n}) => {\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  useEffect(() => {\n    fetchRolesForGroup(pagination)(uuid);\n  }, []);\n\n  useEffect(() => {\n    fetchAddRolesForGroup(uuid);\n  }, [roles]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      Members in the <b>{name}</b> group will lose the permissions in {plural ? 'these' : 'the'}\n      <b> {role}</b> role{plural ? `s` : ''}.\n    </p>\n  );\n\n  const actionResolver = () => [\n    ...(hasPermissions.current\n      ? [\n          {\n            title: 'Remove',\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(uuid, [role.uuid], () => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)));\n              setDeleteInfo({\n                title: 'Remove role?',\n                confirmButtonLabel: 'Remove role',\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles']}\n        render={(args) => (\n          <AddGroupRoles\n            fetchGroup={() => reloadGroup(uuid)}\n            fetchRolesForGroup={() => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${uuid}/roles`}\n            addRolesToGroup={addRoles}\n            name={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            addNotification={addNotification}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add_roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(\n              disableAddRoles,\n              generateOuiaID(name || ''),\n              isAdminDefault && 'Default admin access group roles cannot be modified manually'\n            )}\n          </Link>,\n          {\n            label: 'Add role',\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/roles/add_roles`);\n            },\n          },\n          {\n            label: 'Remove',\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    uuid,\n                    selectedRoles.map((role) => role.uuid),\n                    () => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)\n                  )\n              );\n              setDeleteInfo({\n                title: multipleRolesSelected ? 'Remove roles?' : 'Remove role?',\n                confirmButtonLabel: selectedRoles.length > 1 ? 'Remove roles' : 'Remove role',\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id={'tab-roles'}>\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current}\n          createRows={(...props) => createRows(uuid, ...props)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchRolesForGroup(config)(uuid);\n          }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural=\"roles\"\n          titleSingular=\"role\"\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{ title: 'There are no roles in this group', description: ['Add a role to configure user access.', ''] }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nconst reloadWrapper = (event, callback) => {\n  event.payload.then(callback);\n  return event;\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => {\n  const roles = selectedGroup.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.loaded,\n    name: selectedGroup.name,\n    isPlatformDefault: selectedGroup.platform_default,\n    isAdminDefault: selectedGroup.admin_default,\n    isChanged: !selectedGroup.system,\n    disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || selectedGroup.admin_default,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addRoles: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n    removeRoles: (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback)),\n    fetchRolesForGroup: (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options)),\n    fetchAddRolesForGroup: (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {})),\n    addNotification: (...props) => dispatch(addNotification(...props)),\n    reloadGroup: (apiProps) => dispatch(fetchGroup(apiProps)),\n  };\n};\n\nGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRolesForGroup: PropTypes.func.isRequired,\n  fetchAddRolesForGroup: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  addRoles: PropTypes.func,\n  name: PropTypes.string,\n  removeRoles: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  isAdminDefault: PropTypes.bool,\n  isPlatformDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n  disableAddRoles: PropTypes.bool.isRequired,\n  addNotification: PropTypes.func,\n  reloadGroup: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupRoles);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { fetchGroup, fetchGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport { Alert, AlertActionCloseButton, Popover, Split, SplitItem, DropdownItem, Dropdown, KebabToggle, Button } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrubms';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  group,\n  fetchGroup,\n  isFetching,\n  onDelete,\n}) => {\n  const tabItems = [\n    { eventKey: 0, title: 'Roles', name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: 'Members', name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  const history = useHistory();\n\n  const { pagination, filters, groupExists } = useSelector(\n    ({ groupReducer: { groups, error } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n    }),\n    shallowEqual\n  );\n\n  const breadcrumbsList = () => [\n    {\n      title: 'Groups',\n      to: getBackRoute(pathnames.groups, pagination, filters),\n    },\n    groupExists ? { title: isFetching ? undefined : group.name, isActive: true } : { title: 'Invalid group', isActive: true },\n  ];\n\n  const fetchData = (apiProps) => {\n    fetchGroup(apiProps);\n  };\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchData(uuid);\n    insights.chrome.appObjectId(uuid);\n    return () => insights.chrome.appObjectId(undefined);\n  }, []);\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <div>\n              Now that you have edited the <b>Default access</b> group, the system will no longer update it with new default access roles. The group\n              name has changed to <b>Custom default access</b>.\n            </div>\n          }\n        >\n          <InfoCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).replace(\n            ':uuid',\n            uuid\n          )}\n        >\n          Edit\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          Delete\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  return (\n    <Fragment>\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title=\"Default access group has changed\"\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                Now that you have edited the <b>Default access</b> group, the system will no longer update it with new default access roles. The group\n                name has changed to <b>Custom default access</b>.\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'], pathnames['group-detail-members-remove']]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'], pathnames['group-detail-members-edit']]}\n            render={(props) => (\n              <EditGroup\n                {...props}\n                group={group}\n                cancelRoute={`group/detail/${uuid}`}\n                postMethod={() => {\n                  fetchData(uuid);\n                }}\n              />\n            )}\n          />\n          <Route\n            path={pathnames['group-detail-roles']}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members']} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title=\"Group not found\"\n            description={[`Group with ID ${uuid} does not exist.`]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                Back to previous page\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n  group: selectedGroup,\n  isFetching: isRecordLoading || isRecordRolesLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n    },\n    dispatch\n  );\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    admin_default: PropTypes.bool,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  onDelete: PropTypes.func,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { Fragment, useContext, useEffect, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport { applyPaginationToUrl, isPaginationPresentInUrl, syncDefaultPaginationWithUrl } from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst columns = [\n  { title: 'Name', key: 'name', transforms: [sortable] },\n  { title: 'Roles' },\n  { title: 'Members' },\n  { title: 'Last modified', key: 'modified', transforms: [sortable] },\n];\n\nconst Groups = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n\n  const { groups, meta, filters, isLoading } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState(meta);\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination(meta);\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group']}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group']}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: 'Edit',\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: 'Delete',\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group']);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group']} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              Create group\n            </Button>\n          </Link>,\n          {\n            label: 'Create group',\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group']);\n            },\n          },\n          {\n            label: 'Edit',\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: 'Delete',\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group']);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title=\"Groups\" />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id={'tab-groups'}>\n          <TableToolbarView\n            data={groups.map((group) => (group.platform_default || group.admin_default ? { ...group, principalCount: 'All' } : group))}\n            createRows={(...args) => createRows(isAdmin, ...args)}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural=\"groups\"\n            titleSingular=\"group\"\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder=\"name\"\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail']} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail']}\n        render={(props) => (\n          <Group\n            {...props}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","ActiveUser","linkDescription","linkTitle","env","insights","chrome","getEnvironment","prefix","isProd","description","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","principalApi","getPrincipalApi","principalStatusApiMap","Active","Inactive","fetchUsers","limit","offset","orderBy","filters","inModal","matchCriteria","username","email","sortOrder","mappedStatus","length","listPrincipals","response","isPaginationValid","isOffsetValid","meta","count","getLastPageOffset","pagination","redirected","apiProps","type","ActionTypes","payload","UserHelper","updateUsersFilters","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","success","error","submitting","Fragment","Button","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","columns","key","transforms","nowrap","sortable","createRows","userLinks","_expanded","checkedRows","reduce","acc","is_active","firstName","first_name","lastName","last_name","isOrgAdmin","is_org_admin","uuid","cells","Link","to","toString","Label","selected","Boolean","find","UsersList","users","isLoading","selectedUsers","setSelectedUsers","defaultPagination","useSelector","userReducer","defaultSettings","history","useHistory","stateFilters","location","search","useState","setFilters","useEffect","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","mappedProps","isPaginationPresentInUrl","Object","values","some","filter","areFiltersPresentInUrl","keys","isSelectable","isCompact","borders","ouiaId","fetchData","config","prototype","hasOwnProperty","call","applyFiltersToUrl","setFilterValue","setCheckedItems","newSelection","map","label","sortBy","index","direction","rowWrapper","titlePlural","titleSingular","noDataDescription","noData","value","placeholder","items","tableId","mapStateToProps","isUserDataLoading","mapDispatchToProps","dispatch","addNotification","goBack","push","searchFilter","connect","CompactUsersList","propsFromState","propsFromDispatch","ownProps","defaultCompactSettings","asyncValidator","groupName","idKey","id","fetchGroups","nameMatch","console","item","debouncedAsyncValidator","asyncDebounce","ReviewTemplate","formFields","AddGroupWizardContext","getState","then","Bullseye","Spinner","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","input","useFieldApi","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","expanded","display_name","RolesList","roles","fetchRoles","selectedRoles","canSort","setSelectedRoles","filterValue","useRef","current","filterPlaceholder","roleReducer","fetchRolesWithPolicies","ExcludedRolesList","selectedGroup","groupReducer","addRoles","loaded","groupId","fetchAddRolesForGroup","SetRoles","TextContent","fieldId","SetUsers","Form","Card","SummaryContent","Grid","GridItem","md","role","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","useDispatch","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","dismissDelay","dismissable","pathname","paths","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","schema","subscription","componentMapper","onSubmit","user_list","user","roles_list","addGroup","initialValues","EditGroupModal","updateGroup","cancelRoute","submitRoute","group","onClose","setSelectedGroup","match","useRouteMatch","fetchGroup","params","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","ModalFormTemplate","ModalProps","pathnames","inputValue","hash","bindActionCreators","RemoveGroupModal","removeGroups","groupsUuid","isModalOpen","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","isAdmin","_opened","selectedRows","roleCount","principalCount","modified","isPlatformDefault","platform_default","isAdminDefault","admin_default","DateFormat","date","getDateFormat","AppTabs","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","AddGroupMembers","closeUrl","addMembersToGroup","fetchMembersForGroup","userList","selector","principals","members","removeModalText","plural","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","useParams","shallowEqual","userAccessAdministrator","hasPermissions","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","routes","Route","path","render","args","actionResolver","_rowId","principal","toolbarButtons","multipleMembersSelected","removeText","emptyProps","DefaultGroupChange","withCheckbox","AddGroupRoles","addRolesToGroup","isDefault","isChanged","onDefaultGroupChanged","fetchRolesForGroup","showConfirmModal","setShowConfirmModal","rolesList","RemoveRoles","groupUuid","generateOuiaID","toLowerCase","GroupRoles","removeRoles","disableAddRoles","reloadGroup","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","multipleRolesSelected","reloadWrapper","event","callback","system","removeRolesFromGroup","Group","isFetching","onDelete","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","groupExists","BAD_UUID","breadcrumbsList","getBackRoute","useLocation","appObjectId","dropdownItems","DropdownItem","replace","breadcrumbs","Split","SplitItem","isFilled","style","display","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","isRecordLoading","isRecordRolesLoading","GroupRowWrapper","classnames","adminGroup","systemGroup","RegExp","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","appNavClick","secondaryNav","fetchAdminGroup","fetchSystemGroup","rows","exact","ids","Switch","pageAction","paddingBottom"],"sourceRoot":""}