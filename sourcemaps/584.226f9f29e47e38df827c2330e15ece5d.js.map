{"version":3,"file":"js/584.3afa951b13735e95f012.js","mappings":"scAIO,MAAMA,GAAY,IAAAC,aAAW,SAAmBC,EAAIC,GACvD,IAAI,OAAEC,GAAS,EAAI,OAAEC,GAAS,EAAK,iBAAEC,EAAmB,CAAC,EAAC,0BAAEC,GAA4B,GAAUL,EAAIM,GAAQ,IAAAC,QAAOP,EAAI,CAAC,SAAU,SAAU,mBAAoB,8BAElK,MAAMQ,GAAM,IAAAC,QAAO,OACnB,IAAAC,qBAAoBT,GAAc,IAAMO,EAAIG,UAE5C,MAAMC,GAAe,IAAAH,QAAO,OAC5B,IAAAI,YAAU,KACN,MAAMC,GAAY,IAAAC,iBAAgBP,EAAIG,QAASK,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGb,GAAmB,CAAEc,yBAAyB,KAG7H,OAFAN,EAAaD,QAAUG,EAEhB,KACHA,EAAUK,YAAY,CACzB,GACF,KAEH,IAAAN,YAAU,KACN,MAAMC,EAAYF,EAAaD,QAC/BT,EAASY,SAAsDA,EAAUM,WAAaN,SAAsDA,EAAUK,YAAY,GACnK,CAACjB,KAEJ,IAAAW,YAAU,KACN,MAAMC,EAAYF,EAAaD,QAC/BR,EAASW,SAAsDA,EAAUO,QAAUP,SAAsDA,EAAUQ,SAAS,GAC7J,CAACnB,IAEJ,MAAMoB,GAAqB,IAAAd,QAA2B,oBAAbe,SAA2BA,SAASC,cAAgB,MAS7F,OCnCG,SAA0BC,GAE7B,MAAMC,GAAY,IAAAlB,QAAOiB,GACzBC,EAAUhB,QAAUe,GAEpB,IAAAb,YAAU,IAAM,KACZc,EAAUhB,SAAS,GACpB,GACP,CDoBIiB,EAAiB,MACoC,IAA7CxB,EAAiBc,yBAAqCK,EAAmBZ,mBAAmBkB,aAC5FN,EAAmBZ,QAAQmB,MAAM,CAC7BC,cAAe1B,GAEvB,IAEG,kBAAoB,MAAOW,OAAOC,OAAO,CAAET,IAAKA,GAAOF,GAClE,IACAR,EAAUkC,YAAc,W,iDEvCjB,MAWP,GAFyB,E,SAAA,GATM,CAC7BC,KAAM,YACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,kaACTC,QAAS,EACTC,QAAS,G","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/helpers/FocusTrap/FocusTrap.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/helpers/useUnmountEffect.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/times-icon.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport { createFocusTrap } from 'focus-trap';\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\nimport { useUnmountEffect } from '../useUnmountEffect';\nexport const FocusTrap = forwardRef(function FocusTrap(_a, forwardedRef) {\n    var { active = true, paused = false, focusTrapOptions = {}, preventScrollOnDeactivate = false } = _a, props = __rest(_a, [\"active\", \"paused\", \"focusTrapOptions\", \"preventScrollOnDeactivate\"]);\n    // Fall back to internal ref if no forwarded ref is provided.\n    const ref = useRef(null);\n    useImperativeHandle(forwardedRef, () => ref.current);\n    // Create focus trap instance after rendering DOM.\n    const focusTrapRef = useRef(null);\n    useEffect(() => {\n        const focusTrap = createFocusTrap(ref.current, Object.assign(Object.assign({}, focusTrapOptions), { returnFocusOnDeactivate: false }));\n        focusTrapRef.current = focusTrap;\n        // Deactivate focus trap on cleanup.\n        return () => {\n            focusTrap.deactivate();\n        };\n    }, []);\n    // Handle activation status based on 'active' prop.\n    useEffect(() => {\n        const focusTrap = focusTrapRef.current;\n        active ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.activate() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.deactivate();\n    }, [active]);\n    // Handle pause status based on 'pause' prop.\n    useEffect(() => {\n        const focusTrap = focusTrapRef.current;\n        paused ? focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.pause() : focusTrap === null || focusTrap === void 0 ? void 0 : focusTrap.unpause();\n    }, [paused]);\n    // Store the currently active element to restore focus to later.\n    const previousElementRef = useRef(typeof document !== 'undefined' ? document.activeElement : null);\n    // Restore focus to the previously active element on unmount.\n    useUnmountEffect(() => {\n        if (focusTrapOptions.returnFocusOnDeactivate !== false && previousElementRef.current instanceof HTMLElement) {\n            previousElementRef.current.focus({\n                preventScroll: preventScrollOnDeactivate\n            });\n        }\n    });\n    return React.createElement(\"div\", Object.assign({ ref: ref }, props));\n});\nFocusTrap.displayName = 'FocusTrap';\n//# sourceMappingURL=FocusTrap.js.map","import { useEffect, useRef } from 'react';\n/**\n * A `useEffect`-like hook that only triggers when a component unmounts. Does not require a dependency list, as the effect callback will always be kept up to date.\n */\nexport function useUnmountEffect(effect) {\n    // Always use the latest effect callback so that it can reference the latest props and state.\n    const effectRef = useRef(effect);\n    effectRef.current = effect;\n    // Trigger the effect callback when the component unmounts.\n    useEffect(() => () => {\n        effectRef.current();\n    }, []);\n}\n//# sourceMappingURL=useUnmountEffect.js.map","import { createIcon } from '../createIcon';\n\nexport const TimesIconConfig = {\n  name: 'TimesIcon',\n  height: 512,\n  width: 352,\n  svgPath: 'M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TimesIcon = createIcon(TimesIconConfig);\n\nexport default TimesIcon;"],"names":["FocusTrap","forwardRef","_a","forwardedRef","active","paused","focusTrapOptions","preventScrollOnDeactivate","props","__rest","ref","useRef","useImperativeHandle","current","focusTrapRef","useEffect","focusTrap","createFocusTrap","Object","assign","returnFocusOnDeactivate","deactivate","activate","pause","unpause","previousElementRef","document","activeElement","effect","effectRef","useUnmountEffect","HTMLElement","focus","preventScroll","displayName","name","height","width","svgPath","yOffset","xOffset"],"sourceRoot":""}