{"version":3,"file":"js/4551.1661870637106.1eaa82ce209805851272.js","mappings":";yLAEO,MAAMA,EAAmC,CAC9CC,KAAM,6BACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,gvBACTC,QAAS,EACTC,QAAS,GAGEC,GAA6B,QAAWP,GAErD,yICLMQ,EAAa,SAAC,GAAmC,IAAjCC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,UAC/BC,GAAOC,EAAAA,EAAAA,KACPC,EAAMC,SAASC,OAAOC,iBACtBC,EAASH,SAASC,OAAOG,SAAW,GAA3B,UAAmCL,EAAnC,KAEf,OADqBM,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBC,SAEN,kBAAC,EAAAC,KAAD,CAAMC,UAAU,YAAYC,UAAWC,EAAAA,aAAAA,IAAvC,UACMd,EAAKe,cAAcC,EAAAA,EAAAA,kBADzB,KAEGlB,EACD,kBAAC,EAAAa,KAAD,CACEE,UAAWC,EAAAA,aAAAA,EACXG,KAAI,sBAAiBX,EAAjB,wDACJY,OAAO,SACPC,IAAI,uBAEHpB,EACD,kBAAC,KAAD,OAVJ,KAeA,kBAAC,EAAAY,KAAD,CAAMC,UAAU,YAAYC,UAAWC,EAAAA,aAAAA,IAAvC,UACMd,EAAKe,cAAcC,EAAAA,EAAAA,kBADzB,OAMJnB,EAAWuB,UAAY,CACrBtB,gBAAiBuB,IAAAA,KACjBtB,UAAWsB,IAAAA,MAGbxB,EAAWyB,aAAe,CACxBxB,gBAAiB,GACjBC,UAAW,0BAGb,sJCxCMwB,EAAW,SAAC,GAAsB,MAApBC,EAAoB,EAApBA,IAAQC,GAAY,YAC9BC,EAAWF,EAAXE,OACFC,EAAWD,MAAAA,GAAH,UAAGA,EAAQD,aAAX,aAAG,EAAgB,kBACjC,OAAO,kBAAC,EAAAG,YAAD,QAAYhB,UAAWiB,GAAAA,CAAW,iBAAkB,CAAE,kBAAmBF,IAAaH,IAAKA,GAASC,KAG7GF,EAASH,UAAY,CACnBI,IAAKH,IAAAA,MAAgB,CACnBK,OAAQL,IAAAA,MAAgB,CACtBI,MAAOJ,IAAAA,MAAgB,CACrB,iBAAkBA,IAAAA,KAClBS,KAAMT,IAAAA,MAAgB,CACpBM,SAAUN,IAAAA,cAOpB,kICAYA,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,KAAgBA,IAAAA,SACnDA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WACNA,IAAAA,KACKA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WAGZ,IAAMU,EAAoB,SAAC,GAA2F,IAAzFC,EAAyF,EAAzFA,iBAAkBC,EAAuE,EAAvEA,YAAaC,EAA0D,EAA1DA,WAA0D,IAA9CC,aAAgBC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,KAAQC,EAAc,EAAdA,QAChGC,GAAcC,EAAAA,EAAAA,WACpB,GAAuChC,EAAAA,EAAAA,YAAW8B,GAA1CG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,WACxB,OAAIF,QAA4B,IAAVC,GAAyBA,GAASC,EAC/C,KAIP,kBAAC,EAAAC,SAAD,KACGZ,IACD,kBAAC,EAAAa,OAAD,CAAQC,KAAK,SAASC,QAAQ,YAAYC,WAAYf,EAAagB,QAASf,GACzEG,GAEH,kBAAC,EAAAQ,OAAD,CAAQC,KAAK,SAASC,QAAQ,OAAOE,QAASV,EAAYW,UACvDd,KAMTL,EAAkBX,UAAY,CAC5Ba,YAAaZ,IAAAA,KACba,WAAYb,IAAAA,KAAAA,WACZ8B,WAAY9B,IAAAA,KAAAA,WACZ+B,SAAU/B,IAAAA,UAAoB,CAC5BA,IAAAA,OACAA,IAAAA,MAAgB,CACdgC,KAAMhC,IAAAA,OAAAA,WACNiC,WAAYjC,IAAAA,OAAAA,aAEdA,IAAAA,OAEFc,aAAcd,IAAAA,MAAgB,CAC5BkC,OAAQlC,IAAAA,KAAAA,WACRe,OAAQf,IAAAA,KAAAA,WACRgB,KAAMhB,IAAAA,KAAAA,WACNmC,KAAMnC,IAAAA,KAAAA,aACLoC,WACHnB,QAASjB,IAAAA,OAAAA,WACTW,iBAAkBX,IAAAA,MAGpB,+ICnEMqC,EAAc,SAAC,GAA6B,IAA3BpB,EAA2B,EAA3BA,QAASqB,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC/B5D,GAAOC,EAAAA,EAAAA,KACL4D,GAAerD,EAAAA,EAAAA,YAAWsD,EAAAA,SAA1BD,WACAE,GAAmBvD,EAAAA,EAAAA,YAAW8B,GAA9ByB,eACR,OACE,kBAAC,EAAAC,WAAD,CAAYjB,QAASkB,EAAAA,kBAAAA,OACnB,kBAAC,EAAAC,eAAD,CAAgBC,MAAM,MAAMC,KAAMC,EAAAA,KAClC,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3Bb,GAEH,kBAAC,EAAAc,eAAD,KAAiBb,GACjB,kBAAC,EAAAf,OAAD,CACEI,QAAS,WACPc,OAAeW,GACfb,EAAW,IAEbd,QAAQ,WAEP/C,EAAKe,cAAcC,EAAAA,EAAAA,mBAA6B,CAAE2D,OAAQ,OAMnEjB,EAAYtC,UAAY,CACtBkB,QAASjB,IAAAA,OAAAA,WACTsC,MAAOtC,IAAAA,OAAAA,WACPuC,KAAMvC,IAAAA,OAAAA,YAGR,k3BChBA,IAAMuD,EACJ,SAACC,GAAD,OACA,SAAC/C,EAAMgD,GAAgC,IAArBC,EAAqB,uDAAP,GACxB/E,GAAOC,EAAAA,EAAAA,KACb,OAAO6B,EACHA,EAAKkD,QACH,SAACC,EAAD,OAAQC,EAAR,EAAQA,SAAqBvD,EAA7B,EAAkBwD,UAAqBC,EAAvC,EAAuCA,MAAmBC,EAA1D,EAA8CC,WAAkCC,EAAhF,EAAqEC,UAAmCC,EAAxG,EAA0FC,aAA1F,wBACKT,GADL,CAEE,CACEU,KAAMT,EACNU,MAAO,CACLH,EACE,kBAAC,EAAA7C,SAAD,KACE,8BACE,kBAAC,KAAD,CAAWiD,IAAI,WAAWjF,UAAU,eACpC,0BAAMiF,IAAI,OAAO7F,EAAKe,cAAcC,EAAAA,EAAAA,QAIxC,kBAAC,EAAA4B,SAAD,KACE,kBAAC,KAAD,CAAWiD,IAAI,UAAUjF,UAAU,eACnC,0BAAMiF,IAAI,MAAM7F,EAAKe,cAAcC,EAAAA,EAAAA,MAGvC,CAAE2C,MAAOkB,EAAY,kBAAC,EAAAiB,KAAD,CAAMC,GAAE,wBAAmBb,IAAaA,EAASc,YAAqBd,EAASc,YACpGZ,EAAMY,WACNX,EAAUW,WACVT,EAASS,WACT,CACErC,MACE,kBAAC,EAAAsC,MAAD,CAAOJ,IAAI,SAAS1B,MAAOxC,GAAY,SACpC3B,EAAKe,cAAcY,EAAWX,EAAAA,EAAAA,OAAkBA,EAAAA,EAAAA,WAGrDS,MAAO,CACL,iBAAkBE,KAIxBuE,SAAUC,QAAQpB,GAAeA,EAAYqB,MAAK,SAAC5E,GAAD,OAASA,EAAImE,OAAST,WAG5E,IAEF,KAGFmB,EAAY,SAAC,GAAiI,IAA/HC,EAA+H,EAA/HA,MAAOC,EAAwH,EAAxHA,WAAYC,EAA4G,EAA5GA,mBAAoBC,EAAwF,EAAxFA,UAAWC,EAA6E,EAA7EA,WAAYC,EAAiE,EAAjEA,cAAeC,EAAkD,EAAlDA,iBAAkB/B,EAAgC,EAAhCA,UAAWgC,EAAqB,EAArBA,QAASpF,EAAY,EAAZA,MAChIqF,GAAoBC,EAAAA,EAAAA,cAAY,gBAAkBT,EAAlB,EAAGU,YAAeV,MAAlB,MAAiC,CACrEW,MAAOJ,EAAUP,EAAMY,KAAKD,MAAQX,EAAMI,WAAWO,OAASE,EAAAA,GAAAA,MAC9DC,OAAQP,EAAUP,EAAMY,KAAKE,OAASd,EAAMI,WAAWU,QAAUD,EAAAA,GAAAA,OACjEE,MAAOR,EAAUP,EAAMY,KAAKG,MAAQf,EAAMI,WAAWW,MACrDC,YAAaT,GAAWP,EAAMI,WAAWY,eAErCtH,GAAOC,EAAAA,EAAAA,KACPsH,GAAUC,EAAAA,EAAAA,cAEVC,EAAU,CACd,CAAE9D,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,kBAA4B6E,IAAK,YAAa6B,WAAY,CAACC,EAAAA,SACvF,CAAEhE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAAoB6E,IAAK,WAAY6B,WAAY,CAACE,EAAAA,WAC9E,CAAEjE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,WAAqB0G,WAAY,CAACC,EAAAA,SAC9D,CAAEhE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAAoB0G,WAAY,CAACC,EAAAA,SAC7D,CAAEhE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAAkB0G,WAAY,CAACC,EAAAA,UAGzDE,GAAed,EAAAA,EAAAA,cACjB,gBAEae,EAFb,EACEd,YACEV,MAASwB,QAFb,OAIOP,EAAQQ,SAASC,OAAOC,OAAS,GAAKC,OAAOC,KAAKL,GAASG,OAAS,EAAIH,EAAU,CAAEpG,OAAQ,CAAC,cAGtG,GAA8B0G,EAAAA,EAAAA,UAC5BvB,EACI,CACE3B,SAAU,GACVE,MAAO,GACP1D,OAAQ,CAAC1B,EAAKe,cAAcC,EAAAA,EAAAA,UAE9B6G,GAPN,eAAOC,EAAP,KAAgBO,EAAhB,KAyCA,OA/BAC,EAAAA,EAAAA,YAAU,WACRzB,GAAYC,EAAkBQ,aAAciB,EAAAA,EAAAA,IAAqBhB,EAAST,EAAkBG,MAAOH,EAAkBM,UACpH,CAACN,EAAkBQ,cAEtBgB,EAAAA,EAAAA,YAAU,WACR,IAAM5B,EAAaG,EAAUM,EAAAA,IAAkBqB,EAAAA,EAAAA,IAA6BjB,EAAST,GAC/E2B,EAAa5B,EAAU,CAAEnF,OAAQoG,EAAQpG,SAAWgH,EAAAA,EAAAA,IAA0BnB,EAAS,CAAC,WAAY,QAAS,UAAWO,GAC9HO,EAAWI,GACXlC,EAAW,EAAD,MAAMoC,EAAAA,EAAAA,IAAY,EAAD,KAAMjC,GAAN,IAAkBoB,QAASW,MAA5C,IAA2D5B,QAAAA,OACpE,KAEHyB,EAAAA,EAAAA,YAAU,WACHzB,KACH+B,EAAAA,EAAAA,IAAyBrB,KAAYgB,EAAAA,EAAAA,IAAqBhB,EAASb,EAAWO,MAAOP,EAAWU,QAChGc,OAAOW,OAAOf,GAASgB,MAAK,SAACC,GAAD,OAAYA,MAAAA,OAAA,EAAAA,EAAQd,QAAS,QACtDe,EAAAA,EAAAA,IAAuBzB,EAASW,OAAOC,KAAKL,MAC7CY,EAAAA,EAAAA,IAA0BnB,EAASW,OAAOC,KAAKL,GAAUA,OAgB7D,kBAAC,KAAD,QACEL,QAASA,EACTwB,cAAY,EACZC,WAAW,EACXC,SAAS,EACTvE,WAAYA,EAAWC,GACvB/C,KAAMwE,EACN8C,OAAO,cACPC,UAAW,SAACC,GACV,IAAM5H,EAASwG,OAAOqB,UAAUC,eAAeC,KAAKH,EAAQ,UAAYA,EAAO5H,OAASoG,EAAQpG,OACxFwD,EAAmDoE,EAAnDpE,SAAUE,EAAyCkE,EAAzClE,MAAOiC,EAAkCiC,EAAlCjC,MAAOJ,EAA2BqC,EAA3BrC,MAAOG,EAAoBkC,EAApBlC,OAAQsC,EAAYJ,EAAZI,QAC/CnD,EAAW,EAAD,MAAMoC,EAAAA,EAAAA,IAAY,CAAEtB,MAAAA,EAAOJ,MAAAA,EAAOG,OAAAA,EAAQsC,QAAAA,EAAS5B,QAAS,CAAE5C,SAAAA,EAAUE,MAAAA,EAAO1D,OAAAA,MAA/E,IAA4FmF,QAAAA,KACtGA,IAAW0B,EAAAA,EAAAA,IAAqBhB,EAASN,EAAOG,GAChDP,IAAW8C,EAAAA,EAAAA,IAAkBpC,EAAS,CAAErC,SAAAA,EAAUE,MAAAA,EAAO1D,OAAAA,KAE3DkI,aAAc,CAAE1E,SAAU,GAAIE,MAAO,GAAI1D,OAAQ,IACjDmI,eAAgB,YAAiC,IAtB9BC,EAsBA5E,EAA8B,EAA9BA,SAAUE,EAAoB,EAApBA,MAAO1D,EAAa,EAAbA,OAtBjBoI,EAuBH,CACZ5E,cAA8B,IAAbA,EAA2B4C,EAAQ5C,SAAWA,EAC/DE,WAAwB,IAAVA,EAAwB0C,EAAQ1C,MAAQA,EACtD1D,YAA0B,IAAXA,GAA0BA,IAAWoG,EAAQpG,OAASoG,EAAQpG,OAASA,GAzB5FmF,GAAWL,EAAmBsD,GAC9BzB,EAAW,EAAD,CAAGnD,SAAU,IAAO4E,KA2B5BrD,UAAWA,EACXC,WAAYA,EACZ3B,YAAa4B,EACboD,gBAtCoB,SAACC,GACvBpD,GAAiB,SAACN,GAChB,OAAO0D,EAAa1D,GAAO2D,KAAI,gBAAGtE,EAAH,EAAGA,KAAH,MAAyB,CAAEA,KAAAA,EAAMuE,MAAjC,EAAShF,UAA2CS,UAqCnFwE,OAAQ,CACNC,MAAO,EACPC,UAAW,OAEbC,WAAY/I,EAAAA,EACZgJ,YAAavK,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwJ,cAChDC,cAAezK,EAAKe,cAAcC,EAAAA,EAAAA,MAClC0J,kBAAmB,CACjB1K,EAAKe,cAAcC,EAAAA,EAAAA,qBAA+B,CAAE2J,MAAO3K,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwJ,gBAC9FxK,EAAKe,cAAcC,EAAAA,EAAAA,uBAErB4J,OAAyB,IAAjBtE,EAAM2B,SAAiBH,EAAQ5C,WAAa4C,EAAQ1C,MAC5D0C,QAAS,CACP,CACEjC,IAAK,WACLgF,MAAO/C,EAAQ5C,SACf4F,YAAa9K,EAAKe,cAAcC,EAAAA,EAAAA,YAAsB,CAAE6E,IAAK7F,EAAKe,cAAcC,EAAAA,EAAAA,UAAmBwJ,iBAErG,CACE3E,IAAK,QACLgF,MAAO/C,EAAQ1C,MACf0F,YAAa9K,EAAKe,cAAcC,EAAAA,EAAAA,YAAsB,CAAE6E,IAAK7F,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwJ,iBAElG,CACE3E,IAAK,SACLgF,MAAO/C,EAAQpG,OACfwI,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,QAC1B8B,KAAM,WACN6H,MAAO,CACL,CAAET,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,QAAkB6J,MAAO,UACrD,CAAEX,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,UAAoB6J,MAAO,eAI7DE,QAAQ,cACJtJ,KAKJuJ,EAAkB,SAAC,GAAkD,QAAhDhE,YAAeV,EAAiC,EAAjCA,MAAO2E,EAA0B,EAA1BA,kBAC/C,MAAO,CACL3E,MAAOA,EAAMxE,MAAQwE,EAAMxE,KAAKmI,KAAI,SAACnI,GAAD,cAAgBA,GAAhB,IAAsB6D,KAAM7D,EAAKoD,cACrEwB,WAAYJ,EAAMY,KAClBT,UAAWwE,IAITC,EAAqB,SAACC,GAC1B,MAAO,CACL5E,WAAY,WAAgC,IAA/B6E,EAA+B,uDAApBjE,EAAAA,GACtBgE,GAAS5E,EAAAA,EAAAA,GAAW6E,KAEtB5E,mBAAoB,SAACsB,GACnBqD,GAAS3E,EAAAA,EAAAA,GAAmBsB,KAE9BuD,gBAAiB,kBAAcF,EAASE,EAAAA,GAAAA,WAAA,iBAe5ChF,EAAUjF,UAAY,CACpBmG,QAASlG,IAAAA,MAAgB,CACvBiK,OAAQjK,IAAAA,KAAAA,WACRkK,KAAMlK,IAAAA,KAAAA,aAERiF,MAAOjF,IAAAA,MACPoF,UAAWpF,IAAAA,KACXmK,aAAcnK,IAAAA,OACdkF,WAAYlF,IAAAA,KAAAA,WACZmF,mBAAoBnF,IAAAA,KAAAA,WACpBuF,iBAAkBvF,IAAAA,KAAAA,WAClBsF,cAAetF,IAAAA,MACfqF,WAAYrF,IAAAA,MAAgB,CAC1B4F,MAAO5F,IAAAA,OACP+F,OAAQ/F,IAAAA,OACRgG,MAAOhG,IAAAA,SAETwD,UAAWxD,IAAAA,KACXI,MAAOJ,IAAAA,OACPwF,QAASxF,IAAAA,MAGXgF,EAAU/E,aAAe,CACvBgF,MAAO,GACPK,cAAe,GACfC,iBAAkB,aAClB/B,WAAW,EACXgC,SAAS,GAGX,SAAe4E,EAAAA,EAAAA,SAAQT,EAAiBE,EAAxC,CAA4D7E,GACrD,IAAMqF,GAAmBD,EAAAA,EAAAA,SAAQT,EAAiBE,GA1CtC,SAACS,EAAgBC,EAAmBC,GACrD,OAAO,EAAP,SACKA,GACAF,GACAC,GAHL,IAIErF,WAAY,SAAC6E,GACX,OAAOQ,EAAkBrF,WAAW6E,GAAsBU,EAAAA,SAoChCL,CAAyDpF,gZC1QzF,oiGAAA0F,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAMO,IAAMC,EAAc,mCAAG,WAAOC,EAAWC,EAAOC,GAAzB,kFACtBC,GAAQC,EAAAA,EAAAA,MACRrM,GAAOsM,EAAAA,EAAAA,GAAW,CAAEC,OAAAA,EAAAA,OAAQvL,SAAUwL,GAAoBJ,GAC3DH,EAHuB,8CAInBvH,GAJmB,YAOxBuH,EAAUhE,OAAS,KAPK,sBAQpBjI,EAAKe,cAAcC,EAAAA,EAAAA,qBAA+B,CAAE2D,OAAQ,MARxC,wBAWL8H,EAAAA,EAAAA,IAAY,CAAExF,MAAO,GAAIG,OAAQ,EAAGU,QAAS,CAAExI,KAAM2M,GAAaS,UAAW,UAA7E,OAA8F,SAAChK,GACpHiK,QAAQjK,MAAMA,MAZY,UAWtBkK,EAXsB,SAgBxBT,EAAKS,MAAAA,GAAH,UAAGA,EAAU9K,YAAb,aAAG,EAAgBgH,MAAK,SAAC+D,GAAD,OAAUA,EAAKX,KAAWC,MAAMS,MAAAA,GAAA,UAAAA,EAAU9K,YAAV,eAAgBmG,QAAS,GAhB3D,uBAiBpBjI,EAAKe,cAAcC,EAAAA,EAAAA,kBAjBC,sCAoBrB0D,GApBqB,4CAAH,0DAuBdoI,GAA0BC,EAAAA,EAAAA,IAAc,SAAClC,EAAOqB,EAAOC,GAAf,OAAsBH,EAAenB,EAAOqB,EAAOC,slBCpBxG,IAAMa,EAAiB,SAAC,GAAmB,MAAjBC,EAAiB,EAAjBA,WAClBjN,GAAOC,EAAAA,EAAAA,KACb,GAA8CO,EAAAA,EAAAA,YAAW0M,IAAjDvK,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,MAAOqB,EAA3B,EAA2BA,eACnBoJ,GAAa3K,EAAAA,EAAAA,WAAb2K,SAQR,OAPA7E,EAAAA,EAAAA,YAAU,WACRvE,OAAeW,GACfsH,EAAemB,IAAWtE,OAAO,eAC9BuE,MAAK,kBAAMrJ,GAAe,MAD7B,OAES,kBAAMA,GAAe,QAC7B,SAEkB,IAAVrB,GAAyBC,EAEhC,kBAAC,EAAA0K,SAAD,KACE,kBAAC,EAAAC,QAAD,CAAS9I,KAAK,SAKN,IAAV9B,EAEA,kBAAC,IAAD,CACEJ,QAAS4K,GACTvJ,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,qBAC1B4C,KAAM5D,EAAKe,cAAcC,EAAAA,EAAAA,sBAM7B,kBAAC,aAAD,KACE,kBAAC,EAAAsD,MAAD,CAAOC,aAAa,KAAKC,KAAK,KAAK5D,UAAU,cAC1CZ,EAAKe,cAAcC,EAAAA,EAAAA,gBAErB,CAAC,CAAC,EAAD,GAAMiM,MAAAA,GAAN,UAAMA,EAAa,UAAnB,aAAM,EAAkB,QAKhCD,EAAe5L,UAAY,CACzB6L,WAAY5L,IAAAA,OAGd,gFCzCMkM,EAAqB,SAACtB,EAAWuB,GAAZ,YAA8C9I,IAAduH,GAA2BuB,EAAiB,QAAU,WAC3GC,EAA4B,SAACC,GAAD,OAAuBA,MAAAA,OAAA,EAAAA,EAAkBzF,QAAS,IAAM,QAAU,WAE9F0F,EAAU,SAAClM,GACf,IAAMzB,GAAOC,EAAAA,EAAAA,KACL2N,GAAUC,EAAAA,EAAAA,GAAYpM,GAAtBmM,MACFrL,GAAcC,EAAAA,EAAAA,WACpB,EAAiED,EAAY4K,WAAWtE,OAAlEvJ,EAAtB,EAAQ,cAAyCwO,EAAjD,EAA4B,qBAC5B,GAAkC1F,EAAAA,EAAAA,UAAS9I,GAAQ,IAAnD,eAAO2M,EAAP,KAAkB8B,EAAlB,KACA,GAA4C3F,EAAAA,EAAAA,YAA5C,eAAOoF,EAAP,KAAuBQ,EAAvB,KACA,GAAgD5F,EAAAA,EAAAA,UAAS0F,GAAzD,eAAOJ,EAAP,KAAyBO,EAAzB,KAEMC,EAAmB,SAACrD,GACxB+C,EAAMO,cAASzJ,GACfoI,EAAwBjC,GACrBuC,MAAK,WACJQ,EAAMO,SAAStD,GACfmD,OAAkBtJ,MAHtB,OAKS,SAAChC,GACNsL,EAAkBtL,MAEtBqL,EAAalD,IAOf,OAJAvC,EAAAA,EAAAA,YAAU,YACR2D,MAAAA,OAAA,EAAAA,EAAWhE,QAAS,GAAKiG,EAAiBjC,KACzC,IAGD,kBAAC,EAAAmC,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAW1N,UAAU,8BACnB,kBAAC2N,EAAA,EAAD,CACErE,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,WAC1BwN,kBAAmBvC,EAAYuB,EAAiBxN,EAAKe,cAAcC,EAAAA,EAAAA,UACnEyC,YAAU,EACVgL,UAAWlB,EAAmBtB,EAAWuB,IAEzC,kBAACkB,EAAA,GAAD,CACE7D,MAAOoB,EACPnJ,KAAK,OACL2L,UAAWlB,EAAmBtB,EAAWuB,GACzCmB,OAAQ,iBAAoB,KAAd1C,GAAoB8B,OAAarJ,IAC/CyJ,SAAU,SAACtD,GAAD,OAAWqD,EAAiBrD,IACtC,aAAW,iBAIjB,kBAAC,EAAAyD,UAAD,KACE,kBAACC,EAAA,EAAD,CACErE,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,kBAC1BwN,kBAAmBxO,EAAKe,cAAcC,EAAAA,EAAAA,qBAA+B,CAAE2D,OAAQ,MAC/E8J,UAAWhB,EAA0BC,IAErC,kBAACkB,EAAA,GAAD,CACE/D,MAAO6C,EACPe,UAAWhB,EAA0BC,GACrCS,SAAU,SAACtD,GACToD,EAAoBpD,GACpBtI,EAAYsM,OAAO,oBAAqBhE,IAE1C,aAAW,oBACXiE,kBAAkB,iBAQ9BnB,EAAQvM,UAAY,CAClB9B,KAAM+B,IAAAA,OACNyM,YAAazM,IAAAA,OACb0N,OAAQ1N,IAAAA,OAGV,qoBC3EA,IAAMuD,GAAa,SAAC9C,EAAMkN,GAA+B,IAArBjK,EAAqB,uDAAP,GAChD,OAAOjD,EACHA,EAAKkD,QACH,SAACC,EAAD,OAAQU,EAAR,EAAQA,KAAMsJ,EAAd,EAAcA,aAAc3P,EAA5B,EAA4BA,KAAMwO,EAAlC,EAAkCA,YAAlC,wBACK7I,GADL,CAEE,CACEU,KAAAA,EACAC,MAAO,CAACqJ,GAAgB3P,EAAMwO,GAC9B5H,SAAUC,QAAQpB,GAAeA,EAAYqB,MAAK,SAAC5E,GAAD,OAASA,EAAImE,OAASA,WAG5E,IAEF,IAGAuJ,GAAY,SAAC,GAA2F,IAAzFC,EAAyF,EAAzFA,MAAOC,EAAkF,EAAlFA,WAAY3I,EAAsE,EAAtEA,UAAWC,EAA2D,EAA3DA,WAAY2I,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBAC/EvP,GAAOC,EAAAA,EAAAA,KACb,GAAsCmI,EAAAA,EAAAA,UAAS,IAA/C,eAAOoH,EAAP,KAAoB3F,EAApB,KACiBpC,GAAYgI,EAAAA,EAAAA,QAAO,CAAC,IACjC9L,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAAgB6E,IAAK,gBAAoByJ,EAAU,CAAE5H,WAAY,CAACE,EAAAA,WAAc,CAAE8B,QAAS,SACvH,CAAE/F,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,gBAFtB0O,QAeR,OAVApH,EAAAA,EAAAA,YAAU,WACR8G,EAAW,CAAE1F,QAAS,mBACrB,IASD,kBAAC,KAAD,CACEjC,QAASA,EACTwB,cAAY,EACZC,WAAS,EACTC,SAAS,EACTvE,WAAYA,GACZ9C,KAAMqN,EACNK,YAAaA,EACbG,kBAAmB3P,EAAKe,cAAcC,EAAAA,EAAAA,UAAmBwJ,cACzDnB,UAAW,SAACC,GAAD,OAAY8F,GAAWzG,EAAAA,EAAAA,IAAY,SAAKW,GAAN,IAAcxB,QAAS,CAAEmH,aAAc3F,EAAOhK,WAC3FuK,eAAgB,gBAAGvK,EAAH,EAAGA,KAAH,OAAcuK,EAAevK,IAC7CmH,UAAWA,EACX2C,OAAO,cACP1C,WAAYA,EACZ3B,YAAasK,EACbtF,gBAtBoB,SAACC,GACvBuF,GAAiB,SAACJ,GAChB,OAAOnF,EAAamF,GAAOlF,KAAI,gBAAGtE,EAAH,EAAGA,KAAMrG,EAAT,EAASA,KAAT,MAA4B,CAAEqG,KAAAA,EAAMuE,MAApC,EAAeA,OAAqC5K,UAqBnFiL,YAAavK,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwJ,cAChDC,cAAezK,EAAKe,cAAcC,EAAAA,EAAAA,MAClC+J,QAAQ,gBAoBdmE,GAAU9N,UAAY,CACpBmG,QAASlG,IAAAA,MAAgB,CACvBiK,OAAQjK,IAAAA,KAAAA,WACRkK,KAAMlK,IAAAA,KAAAA,aAER8N,MAAO9N,IAAAA,MACPoF,UAAWpF,IAAAA,KACXmK,aAAcnK,IAAAA,OACd+N,WAAY/N,IAAAA,KAAAA,WACZkO,iBAAkBlO,IAAAA,KAAAA,WAClBgO,cAAehO,IAAAA,MACfqF,WAAYrF,IAAAA,MAAgB,CAC1B4F,MAAO5F,IAAAA,OAAAA,WACP+F,OAAQ/F,IAAAA,OAAAA,WACRgG,MAAOhG,IAAAA,SAETiO,QAASjO,IAAAA,MAGX6N,GAAU5N,aAAe,CACvB6N,MAAO,GACPzI,WAAYoF,EAAAA,GACZwD,SAAS,GAiCX,UAAe7D,EAAAA,EAAAA,UAtES,SAAC,GAAD,QAAGmE,YAAeT,EAAlB,EAAkBA,MAAO1I,EAAzB,EAAyBA,UAAzB,MAA4C,CAClE0I,MAAOA,EAAMrN,KACb4E,WAAYyI,EAAMjI,KAClBT,UAAAA,MAGyB,SAAC0E,GAC1B,MAAO,CACLiE,WAAY,SAAChE,GACXD,GAAS0E,EAAAA,GAAAA,KAAuBlH,EAAAA,EAAAA,IAAYyC,MAE9CC,gBAAiB,kBAAcF,EAASE,EAAAA,GAAAA,WAAA,kBA2D5C,CAA4D6D,IACrD,IAAMY,IAAoBrE,EAAAA,EAAAA,UA/BJ,SAAC,GAAwC,IAAtBsE,EAAsB,EAAtCC,aAAgBD,cACxCZ,EAAQY,EAAcE,SAASd,MAErC,MAAO,CACLA,MAAAA,EACAzI,WAAYqJ,EAAcE,SAASvJ,YAAvB,SAA0CS,EAAAA,IAA1C,IAA2DE,MAAO8H,GAASA,EAAMlH,SAC7FxB,WAAYsJ,EAAcE,SAASC,OACnCC,QAASJ,EAAcpK,SAIK,SAACwF,GAC/B,MAAO,CACLiE,WAAY,SAACe,EAAS/E,GACpBD,GAASiF,EAAAA,EAAAA,IAAsBD,EAAS/E,KAE1CC,gBAAiB,kBAAcF,EAASE,EAAAA,GAAAA,WAAA,mBAIzB,SAACM,EAAgBC,EAAmBC,GACrD,OAAO,eACFA,GACAF,GACAC,GAHL,IAIE0D,SAAS,EACTF,WAAY,SAAChE,GAAD,OAAcQ,EAAkBwD,WAAWzD,EAAewE,QAAS/E,QAKlDK,CAAmEyD,ICpI9FmB,GAAW,SAAC5O,GAChB,IAAMzB,GAAOC,EAAAA,EAAAA,KACb,GAA0CmI,EAAAA,EAAAA,UAAS,IAAnD,eAAOiH,EAAP,KAAsBE,EAAtB,KACQ3B,GAAUC,EAAAA,EAAAA,GAAYpM,GAAtBmM,MACFrL,GAAcC,EAAAA,EAAAA,WAWpB,OATA8F,EAAAA,EAAAA,YAAU,WACRiH,EAAiBhN,EAAY4K,WAAWtE,OAAO,eAAiB,MAC/D,KAEHP,EAAAA,EAAAA,YAAU,WACRsF,EAAMO,SAASkB,GACf9M,EAAYsM,OAAO,aAAcQ,KAChC,CAACA,IAGF,kBAAC,EAAAzM,SAAD,KACE,kBAAC,EAAAwL,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAgC,YAAD,KACE,kBAAC,EAAA3P,KAAD,KAAOX,EAAKe,cAAcC,EAAAA,EAAAA,4BAG9B,kBAAC,EAAAsN,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWgC,QAAQ,eACjB,kBAAC,GAAD,CAAWlB,cAAeA,EAAeE,iBAAkBA,SAQvEc,GAASjP,UAAY,CACnBiO,cAAehO,IAAAA,MACfkO,iBAAkBlO,IAAAA,KAClBsC,MAAOtC,IAAAA,OACPyM,YAAazM,IAAAA,QAGf,wCCvCMmP,GAAW,SAAC/O,GAChB,OAA0C2G,EAAAA,EAAAA,UAAS,IAAnD,eAAOzB,EAAP,KAAsBC,EAAtB,KACQgH,GAAUC,EAAAA,EAAAA,GAAYpM,GAAtBmM,MACF5N,GAAOC,EAAAA,EAAAA,KACPsC,GAAcC,EAAAA,EAAAA,WAWpB,OATA8F,EAAAA,EAAAA,YAAU,WACR1B,EAAiBrE,EAAY4K,WAAWtE,OAAO,eAAiB,MAC/D,KAEHP,EAAAA,EAAAA,YAAU,WACRsF,EAAMO,SAASxH,GACfpE,EAAYsM,OAAO,aAAclI,KAChC,CAACA,IAGF,kBAAC,EAAA/D,SAAD,KACE,kBAAC,EAAA6N,KAAD,KACE,kBAAC,EAAArC,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAgC,YAAD,KACE,kBAAC,KAAD,CAAYxQ,gBAAiBE,EAAKe,cAAcC,EAAAA,EAAAA,uBAGpD,kBAAC,EAAAsN,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWgC,QAAQ,eACjB,kBAAC,EAAAG,KAAD,KACE,kBAAC,KAAD,CAAkB/J,cAAeA,EAAeC,iBAAkBA,EAAkBC,SAAO,WAU3G2J,GAASpP,UAAY,CACnBuF,cAAetF,IAAAA,MACfuF,iBAAkBvF,IAAAA,KAClBsC,MAAOtC,IAAAA,OACPyM,YAAazM,IAAAA,QAGf,YChDA,IAAMsP,GAAiB,WACrB,IAAM3Q,GAAOC,EAAAA,EAAAA,KAEb,GADoBuC,EAAAA,EAAAA,WAMJ2K,WAAWtE,OAJXvJ,EADhB,EACE,cACqBwO,EAFvB,EAEE,qBACcnH,EAHhB,EAGE,cACc0I,EAJhB,EAIE,cAGF,OACE,yBAAKzO,UAAU,QACb,kBAAC,EAAAwN,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAF,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAW1N,UAAU,8BACnB,kBAAC,EAAAgQ,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,aAGxB,kBAAC,EAAA6P,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBxB,KAGtC,kBAAC,EAAAsR,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,oBAGxB,kBAAC,EAAA6P,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBgN,KAGtC,kBAAC,EAAA8C,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,SAGxB,kBAAC,EAAA6P,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GACduO,EAAcpF,KAAI,SAAC8G,EAAM3G,GAAP,OACjB,kBAAC,EAAAzJ,KAAD,CAAMC,UAAU,YAAYiF,IAAKuE,GAC9B2G,EAAK7G,aAMhB,kBAAC,EAAA0G,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,WAGxB,kBAAC,EAAA6P,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAnQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GACd6F,EAAcsD,KAAI,SAAC8G,EAAM3G,GAAP,OACjB,kBAAC,EAAAzJ,KAAD,CAAMC,UAAU,YAAYiF,IAAKuE,GAC9B2G,EAAK7G,mBAc9ByG,GAAevP,UAAY,CACzB9B,KAAM+B,IAAAA,OACNyM,YAAazM,IAAAA,OACb0N,OAAQ1N,IAAAA,OAGV,mnBCrEO,IAAM6L,IAAwB8D,EAAAA,EAAAA,eAAc,CACjDvO,SAAS,EACTE,YAAY,EACZD,WAAOgC,IAGHuM,GAAe,SAACxP,GAAD,OAAW,kBAAC,MAAD,UAAqBA,EAArB,CAA4ByP,kBAAkB,MAExEC,GAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAYC,GAAf,oBAA0B,kBAACD,EAAYC,IAC3DF,GAAY/P,UAAY,CACtBgQ,QAAS/P,IAAAA,YAAAA,YAGJ,IAAMiQ,GAAkB,CAC7BxD,YAAaqD,GACb,WAAYxD,EACZ,YAAa0C,GACb,YAAaG,GACb,kBAAmBG,IAGRzN,GAAW,SAACqO,EAAeC,EAAkBC,GAAlC,OAAmD,SAACC,GAC1ED,EAAaC,GACTxJ,OAAOC,KAAKuJ,GAAUzJ,OAAS,EACjCuJ,GAAiB,GAEjBD,MAIEI,GAAiB,SAAC,GAAwC,IAAtCC,EAAsC,EAAtCA,WAAYlL,EAA0B,EAA1BA,WAAYoB,EAAc,EAAdA,QAC1CqD,GAAW0G,EAAAA,EAAAA,eACX7R,GAAOC,EAAAA,EAAAA,KACP6R,GAASrC,EAAAA,EAAAA,QC1CY,WAC3B,IAAMrD,GAAQC,EAAAA,EAAAA,MACRrM,GAAOsM,EAAAA,EAAAA,GAAW,CAAEC,OAAAA,EAAAA,OAAQvL,SAAUwL,GAAoBJ,GAChE,MAAO,CACL2F,OAAQ,CACN,CACElR,UAAW,SACXvB,KAAM,SACN0S,WAAW,EACXnL,SAAS,EACToL,YAAY,EACZtO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,aAC1B+Q,OAAQ,CACN,CACEzS,KAAM,uBACN8D,SAAU,YACVO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,oBAC1B+Q,OAAQ,CACN,CACElR,UAAW,WACXvB,KAAM,aACN4S,SAAU,CACR,CACEpP,KAAMqP,EAAAA,EAAAA,YAIZ,CACEtR,UAAWuR,EAAAA,EAAAA,SACX9S,KAAM,oBACN+S,WAAW,EACXH,SAAU,CACR,CACEpP,KAAMqP,EAAAA,EAAAA,WACNG,UAAW,SAMrB,CACEhT,KAAM,YACN8D,SAAU,YACVO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAC1B+Q,OAAQ,CACN,CACElR,UAAW,YACXvB,KAAM,gBAIZ,CACEA,KAAM,YACN8D,SAAU,SACVO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,YAC1B+Q,OAAQ,CACN,CACElR,UAAW,YACXvB,KAAM,gBAIZ,CACEA,KAAM,SACNqE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,eAE1BuR,QAAS,SAAC9Q,GAAD,OAAW,kBAAC,KAAD,UAAuBA,EAAvB,CAA8Ba,QAAS4K,OAC3DsF,aAAcxF,EACd+E,OAAQ,CACN,CACElR,UAAW,kBACXvB,KAAM,yBD7BEmT,IACdlH,GAAS/D,EAAAA,EAAAA,cAAT+D,KACR,GAAwDnD,EAAAA,EAAAA,WAAS,GAAjE,eAAOsK,EAAP,KAA6BC,EAA7B,KACA,GAAkCvK,EAAAA,EAAAA,UAAS,IAA3C,eAAOwK,EAAP,KAAkBnB,EAAlB,KACA,GAAoDrJ,EAAAA,EAAAA,UAAS,CAC3D3F,SAAS,EACTE,YAAY,EACZD,WAAOgC,EACPmO,UAAU,IAJZ,eAAOC,EAAP,KAA2BC,EAA3B,KAOMC,EAAmB,WACvB7H,GACEE,EAAAA,EAAAA,IAAgB,CACdtI,QAAS,UACTY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,kBAC1BiS,aAAc,IACdnF,YAAa9N,EAAKe,cAAcC,EAAAA,EAAAA,mCAGpCuK,EAAK,CACH2H,SAAUC,GAAAA,EAAAA,OAAAA,KACVnL,QAAQoL,EAAAA,EAAAA,IAAkB,IAAEC,KAAM,EAAGC,SAAU5M,EAAWO,OAAUa,OAiCxE,OAAO4K,EACL,kBAAC,IAAD,CACE5P,KAAK,QACLyQ,OAAQb,EACRc,cAAe,kBAAMb,GAAwB,IAC7Cc,gBAAiBT,IAGnB,kBAAC9F,GAAsBwG,SAAvB,CAAgC7I,MAAK,SAAOiI,GAAP,IAA2B/O,eArC3C,SAACrB,GAAD,OAAWqQ,GAAsB,SAACY,GAAD,UAAC,MAAeA,GAAhB,IAAsBjR,MAAAA,QAqCIkR,iBApCzD,SAACnR,GAAD,OAAasQ,GAAsB,SAACY,GAAD,UAAC,MAAeA,GAAhB,IAAsBlR,QAAAA,QAoCkBoR,YAnChF,SAAChB,GAAD,OAAcE,GAAsB,SAACY,GAAD,UAAC,MAAeA,GAAhB,IAAsBd,SAAAA,WAoC1E,kBAAC,IAAD,CACEf,OAAQA,EAAOpC,QACfoE,aAAc,CAAEjL,QAAQ,GACxBoI,aAAcA,GACd8C,gBAAe,SAAOA,EAAAA,IAAoBzC,IAC1C0C,SAvCW,SAACtC,GAChB,IAAMkB,EAAY,CAChBtT,KAAMoS,EAAS,cACf5D,YAAa4D,EAAS,qBACtBuC,UAAWvC,EAAS,cAAczH,KAAI,SAACiK,GAAD,MAAW,CAAEhP,SAAUgP,EAAKhK,UAClEiK,WAAYzC,EAAS,cAAczH,KAAI,SAAC8G,GAAD,OAAUA,EAAKpL,SAExD4F,EAAK,CACH2H,SAAUC,GAAAA,EAAAA,OAAAA,KACVnL,QAAQoL,EAAAA,EAAAA,IAAkB,CAAEC,KAAM,EAAGC,SAAU5M,EAAWO,UAE5DkE,GAASiJ,EAAAA,EAAAA,IAASxB,IACfxF,MAAK,kBAAMwE,EAAW,CAAE3K,MAAOP,EAAWO,MAAOG,OAAQ,EAAGU,QAAS,QACrEsF,MAAK,WACJjC,GACEE,EAAAA,EAAAA,IAAgB,CACdtI,QAAS,UACTY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,sBAC1BiS,aAAc,IACdnF,YAAa9N,EAAKe,cAAcC,EAAAA,EAAAA,mCAqBpCqT,cAAezB,EACf1P,SAAUA,GAAS8P,EAAkBL,EAAyBlB,OAMtEE,GAAevQ,UAAY,CACzBwQ,WAAYvQ,IAAAA,KACZqF,WAAYrF,IAAAA,MAAgB,CAC1B4F,MAAO5F,IAAAA,OAAAA,aACNoC,WACHqE,QAASzG,IAAAA,OAAAA,YAGX,6nBExHA,IAAMiT,GAAiB,SAAC,GAUlB,IATJjJ,EASI,EATJA,gBACAkJ,EAQI,EARJA,YACA3C,EAOI,EAPJA,WACAlL,EAMI,EANJA,WACAoB,EAKI,EALJA,QACA0M,EAII,EAJJA,YAII,IAHJC,YAAAA,OAGI,MAHUD,EAGV,EAFJE,EAEI,EAFJA,MACAC,EACI,EADJA,QAEM3U,GAAOC,EAAAA,EAAAA,KACb,GAA0CmI,EAAAA,EAAAA,eAAS1D,GAAnD,eAAOqL,EAAP,KAAsB6E,EAAtB,KAEQrJ,GAAS/D,EAAAA,EAAAA,cAAT+D,KACFsJ,GAAQC,EAAAA,EAAAA,eAAc,oBAEtBrD,EAAe,SAACmB,GACpBgC,EAAiBhC,KAUnBtK,EAAAA,EAAAA,YAAU,WANRuM,IACEE,EAAAA,EAAAA,IAAWF,EAAMG,OAAO7I,IACrBrC,QAAQsD,MAAK,SAACtL,GAAD,OAAU2P,EAAa3P,MADvC,OAES,kBAAM2P,OAAa/M,QAK7B,KAEH4D,EAAAA,EAAAA,YAAU,WACRsM,EAAiBF,KAChB,CAACA,IAEJ,IAaMxR,EAAW,WACfmI,EAAgB,CACdtI,QAAS,UACTkQ,aAAc,IACdtP,MAAO3D,EAAKe,cAAcgP,EAAgB/O,EAAAA,EAAAA,aAAwBA,EAAAA,EAAAA,kBAClE8M,YAAa9N,EAAKe,cAAcgP,EAAgB/O,EAAAA,EAAAA,6BAAwCA,EAAAA,EAAAA,kCAE1F2T,IACApJ,EAAKiJ,IAGD1C,EAAS,CACbC,OAAQ,CAAC,OAELzS,KAAM,OACN4K,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,MAC1BH,UAAWkP,EAAgBqC,EAAAA,EAAAA,WAA4B,YACnDrC,EAAgB,CAAEkF,iBAAiB,GAAS,IAL5C,IAMJ/C,SAAU,CACR,CAAEpP,KAAM,sBAAuBqJ,GAAI0I,EAAQA,EAAMG,OAAO7I,GAAKuI,EAAM/O,KAAMuG,MAAO,QAChF,CACEpJ,KAAMqP,EAAAA,EAAAA,aAIZ,CACE7S,KAAM,cACN4K,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,aAC1BH,UAAWkP,EAAgBqC,EAAAA,EAAAA,SAA0B,WACrDF,SAAU,CACR,CACEpP,KAAMqP,EAAAA,EAAAA,WACNG,UAAW,SAOf4C,EAAkB,CACtB,sBACE,gBAAGhJ,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACA,SAACtB,GAAD,OACEiC,EAAwBjC,EAAOqB,EAAOC,MAG5C,OACE,kBAAC,KAAD,CACE2F,OAAQA,EACRiC,gBAAe,SACVA,EAAAA,IADU,IAEboB,SAAUC,EAAAA,WAEZlS,SAAUA,EACV8Q,SAnEa,SAAClS,GAChB,IAAMuT,EAAY,CAChB1P,KAAM7D,EAAK6D,KACXmI,YAAahM,EAAKgM,aAAe,KACjCxO,KAAMwC,EAAKxC,MAEbsS,EACI2C,EAAYc,GACTjI,MAAK,kBAAMwE,EAAW,CAAE3K,MAAOP,MAAAA,OAAF,EAAEA,EAAYO,MAAOa,QAAAA,OAClDsF,KAAK7B,EAAKkJ,IACbF,EAAYc,GAAWjI,MAAK,kBAAM7B,EAAKkJ,OA0DzCS,gBAAiBA,EACjBb,cAAa,MAAOtE,GACpBkB,aAAc,SAACxP,GAAD,OACZ,kBAAC6T,GAAA,GAAD,UACM7T,EADN,CAEE8T,WAAY,CAAEZ,QAASzR,EAAUqQ,QAAQ,EAAMxQ,QAAS,SAAUY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,uBAOtGsT,GAAehT,aAAe,CAC5BkT,YAAagB,GAAAA,EAAAA,OAAAA,KACbb,QAAS,kBAAM,MACfX,SAAU,kBAAM,OAGlBM,GAAelT,UAAY,CACzBiK,gBAAiBhK,IAAAA,KAAAA,WACjB0T,WAAY1T,IAAAA,KAAAA,WACZoU,WAAYpU,IAAAA,OACZkT,YAAalT,IAAAA,KAAAA,WACbuQ,WAAYvQ,IAAAA,KACZqF,WAAYrF,IAAAA,MAAgB,CAC1B4F,MAAO5F,IAAAA,OAAAA,aACNoC,WACHqE,QAASzG,IAAAA,OAAAA,WACTmT,YAAanT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd6R,SAAU7R,IAAAA,OAAAA,WACV2G,OAAQ3G,IAAAA,OACRqU,KAAMrU,IAAAA,WAGVoT,YAAapT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd6R,SAAU7R,IAAAA,OAAAA,WACV2G,OAAQ3G,IAAAA,OACRqU,KAAMrU,IAAAA,WAGVqT,MAAOrT,IAAAA,OACPsT,QAAStT,IAAAA,MAiBX,UAAeoK,EAAAA,EAAAA,UAdS,SAAC,GAAD,MAAsC,CAC5DhF,UADsB,EAAGuJ,aAAgBvJ,cAIhB,SAAC0E,GAAD,OACzBwK,EAAAA,GAAAA,IACE,CACEtK,gBAAAA,EAAAA,GACAkJ,YAAAA,EAAAA,GACAQ,WAAAA,EAAAA,IAEF5J,KAGJ,CAA4DmJ,4CC1KtDsB,GAAmB,SAAC,GAYpB,IAXJC,EAWI,EAXJA,aACAnB,EAUI,EAVJA,MACAjO,EASI,EATJA,UACAsO,EAQI,EARJA,WACAe,EAOI,EAPJA,WACAC,EAMI,EANJA,YACAnE,EAKI,EALJA,WACAlL,EAII,EAJJA,WACAoB,EAGI,EAHJA,QACA0M,EAEI,EAFJA,YAEI,IADJC,YAAAA,OACI,MADUD,EACV,EACExU,GAAOC,EAAAA,EAAAA,MACbqI,EAAAA,EAAAA,YAAU,WACkB,IAAtBwN,EAAW7N,QACb8M,EAAWe,EAAW,GAAGnQ,QAE1B,IAEH,IAAQ4F,GAAS/D,EAAAA,EAAAA,cAAT+D,KAER,GAA8BnD,EAAAA,EAAAA,WAAS,GAAvC,eAAO4N,EAAP,KAAgBC,EAAhB,KAEMC,EAAiBJ,EAAW7N,OAAS,EASrC/E,EAAW,kBAAMqI,EAAKiJ,IAE5B,OACE,kBAAC,EAAA2B,MAAD,CACEvV,UAAU,OACV2S,OAAQwC,EACRhT,QAASqT,EAAAA,aAAAA,MACTzS,MACE,kBAAC,EAAAhD,KAAD,KACE,kBAAC,MAAD,CAAyBC,UAAU,8BADrC,KAEUZ,EAAKe,cAAcmV,EAAiBlV,EAAAA,EAAAA,qBAAgCA,EAAAA,EAAAA,sBAGhF2T,QAASzR,EACTmT,QAAS,CACP,kBAAC,EAAAxT,OAAD,CAAQgD,IAAI,SAAS7C,YAAagT,EAASjT,QAAQ,SAASD,KAAK,SAASG,QAtB/D,WACf,IAAMqT,EAAQR,EAAW7L,KAAI,SAACyK,GAAD,OAAWA,EAAM/O,QAC9CkQ,EAAaS,GACVlJ,MAAK,kBAAMwE,EAAW0E,EAAO,CAAErP,MAAOP,MAAAA,OAAF,EAAEA,EAAYO,MAAOa,QAAAA,OACzDsF,KAAK7B,EAAKkJ,MAmBNzU,EAAKe,cAAcmV,EAAiBlV,EAAAA,EAAAA,aAAwBA,EAAAA,EAAAA,cAE/D,kBAAC,EAAA6B,OAAD,CAAQgD,IAAI,SAAS9C,QAAQ,OAAOD,KAAK,SAASG,QAASC,GACxDlD,EAAKe,cAAcC,EAAAA,EAAAA,WAIxB,kBAAC,EAAAsP,YAAD,KACG4F,EACC,kBAAC,EAAAvV,KAAD,KACE,kBAAC,MAAD,UACMK,EAAAA,EAAAA,2BADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,IACjByD,MAAOyO,EAAW7N,YAItBxB,EACF,kBAAC,MAAD,MAEA,kBAAC,EAAA9F,KAAD,KACE,kBAAC,MAAD,UACMK,EAAAA,EAAAA,0BADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,IACjBtE,KAAMoV,EAAMpV,WAvCxB,IA8CE,kBAAC,EAAAkX,SAAD,CACEC,UAAWT,EACX7H,SAAU,kBAAM8H,GAAYD,IAC5B9L,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,8BAC1BmL,GAAG,yBAMXyJ,GAAiBtU,aAAe,CAC9ByU,aAAa,EACbrB,MAAO,GACPoB,WAAY,GACZrP,WAAW,EACXiQ,UAAWlB,GAAAA,EAAAA,OAAAA,MAGbI,GAAiBxU,UAAY,CAC3B2U,YAAa1U,IAAAA,KACbwU,aAAcxU,IAAAA,KAAAA,WACd0T,WAAY1T,IAAAA,KAAAA,WACZuQ,WAAYvQ,IAAAA,KACZqF,WAAYrF,IAAAA,MAAgB,CAC1B4F,MAAO5F,IAAAA,OAAAA,aACNoC,WACHqE,QAASzG,IAAAA,OAAAA,WACToF,UAAWpF,IAAAA,KACXqT,MAAOrT,IAAAA,OACPyU,WAAYzU,IAAAA,MACZoT,YAAapT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd6R,SAAU7R,IAAAA,OAAAA,WACV2G,OAAQ3G,IAAAA,OACRqU,KAAMrU,IAAAA,WAGVmT,YAAanT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd6R,SAAU7R,IAAAA,OAAAA,WACV2G,OAAQ3G,IAAAA,OACRqU,KAAMrU,IAAAA,YAmBZ,UAAeoK,EAAAA,EAAAA,UAdS,SAAC,GAAD,IAAmBsE,EAAnB,EAAGC,aAAgBD,cAAnB,MAA0C,CAChE2E,MAAO3E,EACPtJ,WAAYsJ,EAAcG,WAGD,SAAC/E,GAAD,OACzBwK,EAAAA,GAAAA,IACE,CACEZ,WAAAA,EAAAA,GACAc,aAAAA,EAAAA,IAEF1K,KAGJ,CAA4DyK,uDCnJtDe,GAAyB,SAAC,GAA8B,IAA5BxK,EAA4B,EAA5BA,GAAIxG,EAAwB,EAAxBA,KAAMiR,EAAkB,EAAlBA,YAC1C,GAA8CxO,EAAAA,EAAAA,WAAS,GAAvD,eAAOyO,EAAP,KAAyBC,EAAzB,KACMC,GAAiBtH,EAAAA,EAAAA,QAAO,MAE9B,OACE,0BAAMuH,IAAKD,EAAgBlR,IAAG,UAAKF,EAAL,YAAqBwG,GAAIA,GACrD,kBAAC,EAAA8K,QAAD,CACEC,OAAO,MACPC,SAAS,QACTC,UAAWP,EACXQ,YAAa,kBAAMP,GAAkB,IACrCQ,oBAAkB,EAClBV,YAAaA,EACbW,SAAUR,EAAerH,SAEzB,kBAAC,MAAD,CACEzM,QAAS,kBAAM6T,GAAmBD,IAClCjW,UAAWiB,IAAAA,CAAW,4BAA6B,CAAE,cAAegV,SAO9EF,GAAuBvV,UAAY,CACjC+K,GAAI9K,IAAAA,OAAAA,WACJsE,KAAMtE,IAAAA,OAAAA,WACNuV,YAAavV,IAAAA,OAAAA,YAGR,IAAMuD,GAAa,SAAC4S,EAAS1V,EAAM2V,GAA+B,IAAtBC,EAAsB,uDAAP,GAC1D1X,GAAOC,EAAAA,EAAAA,KACb,OAAO6B,EAAKkD,QACV,SAACC,EAAD,OAAQU,EAAR,EAAQA,KAAMrG,EAAd,EAAcA,KAAMqY,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,eAAgBC,EAA/C,EAA+CA,SAA4BC,EAA3E,EAAyDC,iBAAoDC,EAA7G,EAA8FC,cAA9F,wBACKhT,GADL,CAEE,CACEU,KAAAA,EACAqS,eAAAA,EACAF,kBAAAA,EACAlS,MAAO,CACL,kBAAC,EAAAhD,SAAD,CAAUiD,IAAKF,GACb,yBAAK/E,UAAU,oBACZ4W,EACC,kBAAC,EAAA1R,KAAD,CAAMD,IAAG,UAAKF,EAAL,SAAkBuS,MAAO,CAAEvS,KAAAA,GAAQI,GAAI,CAAEmN,SAAU,kBAAF,OAAoB4E,EAAoB,iBAAmBnS,KAClHrG,GAGHA,GAEAwY,GAAqBE,IACrB,kBAACrB,GAAD,CACExK,GAAE,iBAAY6L,EAAiB,SAAW,GAAxC,kBACFrS,KAAMA,EACNE,IAAG,UAAKF,EAAL,YACHiR,YAAa5W,EAAKe,cAAciX,EAAiBhX,EAAAA,EAAAA,uBAAkCA,EAAAA,EAAAA,yBAK3F2W,EACAC,EACA,kBAAC,EAAAhV,SAAD,CAAUiD,IAAG,UAAKF,EAAL,cACX,kBAACwS,GAAA,EAAD,CAAYC,KAAMP,EAAU/U,MAAMuV,EAAAA,EAAAA,IAAcR,OAGpD3R,SAAUC,QAAQuR,GAAgBA,EAAatR,MAAK,SAAC5E,GAAD,OAASA,EAAImE,OAASA,WAG9E,KCzEE2S,GAAU,SAAC,GAAsE,IAAzD/M,EAAyD,EAApEhE,QAAWgE,KAAoB2H,EAAqC,EAAjDnL,SAAYmL,SAAYqF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAChEC,EAAYF,EAASnS,MAAK,gBAAG9G,EAAH,EAAGA,KAAH,OAAc4T,EAASwF,SAASpZ,MAGhE,OACE,kBAAC,EAAAqZ,KAAD,CAAM/X,UAAW4X,EAAW,yBAA2B,GAAII,UAAWH,EAAYA,EAAUI,SAAW,EAAGC,SAHrF,SAACC,EAAQC,GAAT,OAAsBzN,EAAKgN,EAASS,GAAU1Z,QAIhEiZ,EAAStO,KAAI,SAAC4C,GAAD,OACZ,kBAAC,EAAAoM,IAAD,CAAKtV,MAAOkJ,EAAKlJ,MAAOkC,IAAKgH,EAAKgM,SAAUA,SAAUhM,EAAKgM,SAAUvZ,KAAMuN,EAAKvN,YAMxFgZ,GAAQlX,UAAY,CAClB2G,SAAU1G,IAAAA,MAAgB,CACxB6R,SAAU7R,IAAAA,OAAAA,aAEZkG,QAASlG,IAAAA,MAAgB,CACvBkK,KAAMlK,IAAAA,KAAAA,aAERkX,SAAUlX,IAAAA,MAAAA,WACVmX,SAAUnX,IAAAA,MAGZ,UAAe6X,EAAAA,EAAAA,YAAWZ,oBCzBb1T,GAAa,SAAC9C,EAAM2V,GAA8B,IAArB1S,EAAqB,uDAAP,GAChD/E,GAAOC,EAAAA,EAAAA,KACb,OAAO6B,EAAKkD,QACV,SAACC,EAAD,OAAmBtD,EAAnB,EAAQwD,UAAqBD,EAA7B,EAA6BA,SAAUE,EAAvC,EAAuCA,MAAmBC,EAA1D,EAA8CC,WAAkCC,EAAhF,EAAqEC,UAArE,wBACKP,GADL,CAEE,CACEU,KAAMT,EACNA,SAAAA,EACAU,MAAO,CACL,CACEjC,MAAO,kBAAC,EAAAsC,MAAD,CAAO9B,MAAOxC,GAAY,SAAU3B,EAAKe,cAAcY,EAAWX,EAAAA,EAAAA,OAAkBA,EAAAA,EAAAA,WAC3FS,MAAO,CACLK,KAAM,CAAEH,SAAAA,KAGZuD,EACAE,EACAG,EACAF,GAEFa,SAAUnB,EAAYqB,MAAK,SAAC5E,GAAD,OAASA,EAAImE,OAAST,UAGrD,KCfEiU,GAAkB,SAAC,GAUnB,IATO5N,EASP,EATJhE,QAAWgE,KAEC5F,EAOR,EARJkP,MACEG,OAAUrP,KAEZ0F,EAKI,EALJA,gBACA+N,EAII,EAJJA,SACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,qBACA7M,EACI,EADJA,YAEA,GAA0CrE,EAAAA,EAAAA,UAAS,IAAnD,eAAOzB,EAAP,KAAsBC,EAAtB,KACM5G,GAAOC,EAAAA,EAAAA,KAmBPiD,EAAW,WACfmI,EAAgB,CACdtI,QAAS,UACTY,MAAO3D,EAAKe,cAAc4F,EAAcsB,OAAS,EAAIjH,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACxFiS,aAAc,IACdnF,YAAa9N,EAAKe,cAAc4F,EAAcsB,OAAS,EAAIjH,EAAAA,EAAAA,4BAAuCA,EAAAA,EAAAA,8BAEpGuK,EAAK6N,IAGP,OACE,kBAAC,EAAAjD,MAAD,CACExS,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,YAC1B+B,QAASqT,EAAAA,aAAAA,OACT7C,QAAM,EACN8C,QAAS,CACP,kBAAC,EAAAxT,OAAD,CAAQgD,IAAI,UAAUuD,OAAO,yBAAyBpG,WAAqC,IAAzB2D,EAAcsB,OAAclF,QAAQ,UAAUE,QAlCrG,WACf,IAAMsW,EAAW5S,EAAcsD,KAAI,SAACiK,GAAD,MAAW,CAAEhP,SAAUgP,EAAKhK,UAC3DqP,EAAStR,OAAS,IACpBoD,EAAgB,CACdtI,QAAS,OACTY,MAAO3D,EAAKe,cAAcwY,EAAStR,OAAS,EAAIjH,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACnFiS,aAAc,IACdnF,YAAa9N,EAAKe,cAAcwY,EAAStR,OAAS,EAAIjH,EAAAA,EAAAA,8BAAyCA,EAAAA,EAAAA,gCAEjGqY,EAAkB1T,EAAM4T,GAAUnM,MAAK,WACrCkM,EAAqB3T,GACrB8G,EAAY,CAAE5F,SAAS,QAI3B0E,EAAK6N,KAoBEpZ,EAAKe,cAAcC,EAAAA,EAAAA,aAEtB,kBAAC,EAAA6B,OAAD,CAAQsJ,GAAG,oBAAoB/C,OAAO,0BAA0BvD,IAAI,SAAS9C,QAAQ,OAAOE,QAASC,GAClGlD,EAAKe,cAAcC,EAAAA,EAAAA,UAGxB2T,QAASzR,GAET,kBAAC,EAAAkL,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAgC,YAAD,KACE,kBAAC,KAAD,CAAYxQ,gBAAiBE,EAAKe,cAAcC,EAAAA,EAAAA,uBAGpD,kBAAC,EAAAsN,UAAD,KACE,kBAAC,KAAD,CAAkB3H,cAAeA,EAAeC,iBAAkBA,EAAkBC,SAAO,QAOrGsS,GAAgB7X,aAAe,CAC7BgF,MAAO,GACPmP,WAAY,GACZ2D,SAAU,UACVzS,cAAe,IAGjBwS,GAAgB/X,UAAY,CAC1BmG,QAASlG,IAAAA,MAAgB,CACvBiK,OAAQjK,IAAAA,KAAAA,WACRkK,KAAMlK,IAAAA,OACLoC,WACH2Q,SAAU/S,IAAAA,KAAAA,WACVgK,gBAAiBhK,IAAAA,KAAAA,WACjBgI,UAAWhI,IAAAA,KAAAA,WACXiY,qBAAsBjY,IAAAA,KAAAA,WACtBoU,WAAYpU,IAAAA,OACZiF,MAAOjF,IAAAA,MACPsF,cAAetF,IAAAA,MACfwT,MAAOxT,IAAAA,OACP+X,SAAU/X,IAAAA,OACVgY,kBAAmBhY,IAAAA,KAAAA,WACnBoL,YAAapL,IAAAA,KAAAA,YAmBf,UAAe6X,EAAAA,EAAAA,aAAWzN,EAAAA,EAAAA,UAhBF,SAAC,GAAD,MAAsC,CAC5DhF,UADsB,EAAGuJ,aAAgBvJ,cAIhB,SAAC0E,GAAD,OACzBwK,EAAAA,GAAAA,IACE,CACEtK,gBAAAA,EAAAA,GACA+I,SAAAA,EAAAA,GACAiF,kBAAAA,EAAAA,GACAC,qBAAAA,EAAAA,GACA7M,YAAAA,EAAAA,IAEFtB,KAGsBM,CAA6C0N,ioBC1GvE,IAAMK,GAAW,SAAC,GAAD,IAAmBzJ,EAAnB,EAAGC,aAAgBD,cAAnB,MAA0C,CACzD0J,WAAY1J,EAAc2J,QAAQ5X,KAClC4E,WAAYqJ,EAAc2J,QAAQxS,KAClC+E,UAAW8D,EAAczQ,KACzB2Y,cAAelI,EAAckI,cAC7BF,iBAAkBhI,EAAcgI,iBAChCtR,UAAWsJ,EAAc2J,QAAQjT,YAG7BkT,GAAkB,SAACra,EAAMoV,EAAOkF,GAAd,OACtB,kBAAC,MAAD,UACOA,EAAS5Y,EAAAA,EAAAA,kBAA6BA,EAAAA,EAAAA,iBAD7C,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,IACjBtE,KAAAA,EACAoV,MAAAA,OAmLN,SA/KwB,WACtB,IAAM1U,GAAOC,EAAAA,EAAAA,KACb,GAAsCmI,EAAAA,EAAAA,UAAS,IAA/C,eAAOoH,EAAP,KAAoB3F,EAApB,KACA,GAAoDzB,EAAAA,EAAAA,UAAS,IAA7D,eAAOyR,EAAP,KAA2BC,EAA3B,KACA,GAA8C1R,EAAAA,EAAAA,WAAS,GAAvD,eAAO2R,EAAP,KAAwBC,EAAxB,KACA,GAA0C5R,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAO6R,EAAP,KAAsBC,EAAtB,KACA,GAAoC9R,EAAAA,EAAAA,UAAS,IAA7C,eAAO+R,EAAP,KAAmBC,EAAnB,KAEQzU,GAAS0U,EAAAA,EAAAA,aAAT1U,KACR,GAA0FoB,EAAAA,EAAAA,aAAYyS,GAAUc,EAAAA,cAAxGb,EAAR,EAAQA,WAAY/S,EAApB,EAAoBA,WAAYuF,EAAhC,EAAgCA,UAAWxF,EAA3C,EAA2CA,UAAWwR,EAAtD,EAAsDA,cAAeF,EAArE,EAAqEA,iBACrE,GAA8CvX,EAAAA,EAAAA,YAAWC,GAAAA,GAAjD8Z,EAAR,EAAQA,wBAAyB7Z,EAAjC,EAAiCA,SAC3B8Z,GAAiB/K,EAAAA,EAAAA,QAAO/O,GAAY6Z,GAEpC9S,EAAU,CACd,CAAE9D,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAAkB0G,WAAY,CAACC,EAAAA,SAC3D,CAAEhE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,WAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,WAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,aAGxBmK,GAAW0G,EAAAA,EAAAA,eAEXxI,EAAY,SAACoR,GAAoC,IAAzBC,EAAyB,uDAAfhU,EACtCyE,GAASmO,EAAAA,EAAAA,IAAqB3T,EAAM8U,EAAWC,MAGjDpS,EAAAA,EAAAA,YAAU,WACRe,MACC,KAEHf,EAAAA,EAAAA,YAAU,WACRkS,EAAe9K,QAAUhP,GAAY6Z,IACpC,CAAC7Z,EAAU6Z,IAEd,IAIMI,EAAgB,SAACC,GACrB,OAAOzP,GAAS0P,EAAAA,EAAAA,IAAuBlV,EAAMiV,IAAYxN,MAAK,WAC5D0M,EAAsB,IACtBzQ,OAAU3E,EAAD,GAAC,MAAgBgC,GAAjB,IAA6BU,OAAQ,KAC9C+D,GAASsB,EAAAA,EAAAA,IAAY,CAAE5F,SAAS,SA+B9BU,GAAUC,EAAAA,EAAAA,cA6ChB,OACE,kBAAC,EAAA5E,SAAD,KACE,kBAACkY,GAAA,EAAD,CACElX,KAAMuW,EAAWvW,KACjBD,MAAOwW,EAAWxW,MAClBoX,mBAAoBZ,EAAWY,mBAC/BxH,OAAQwG,EACRpF,QAAS,kBAAMqF,GAAmB,IAClChG,SAAU,WACRgG,GAAmB,GACnBC,OAGJ,kBAACe,GAAA,EAAD,CAASlY,KAAK,UAAUqJ,GAAI,kBACzB4L,GAAoBE,EACnB,kBAAC,EAAAvH,KAAD,KACE,kBAAC,EAAAuK,SAAD,KACE,kBAAC,EAAA5N,SAAD,KACE,kBAAC,EAAAiD,YAAD,KACE,kBAAC,EAAA3P,KAAD,CAAME,UAAWC,EAAAA,aAAAA,IACdd,EAAKe,cAAckX,EAAgBjX,EAAAA,EAAAA,uBAAkCA,EAAAA,EAAAA,yBAOhF,kBAAC,KAAD,CACEc,MAAO2X,GAAc,IAAIxP,KAAI,SAACiK,GAAD,UAAC,MAAeA,GAAhB,IAAsBvO,KAAMuO,EAAKhP,cAC9D+D,aAAcuR,EAAe9K,QAC7B9K,WAAYA,GACZ6C,QAASA,EACTyT,OAtFK,kBACb,kBAAC,EAAAtY,SAAD,KACE,kBAAC,EAAAuY,MAAD,CACEC,KAAMjI,GAAAA,EAAAA,qBAAAA,KACNkI,OAAQ,SAACC,GAAD,OAAU,kBAAC,IAAD,QAAiBjS,UAAWA,EAAW+P,SAAQ,yBAAoBzT,EAApB,aAAwC2V,SAmFrGC,eAzGa,kBACpBf,EAAe9K,QAEZ,CACE,CACE/L,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BiC,QAAS,SAAC8V,EAAQyC,EAAQC,GACxBvB,GAAiB,kBAAM,kBAAMS,EAAc,CAACc,EAAUvW,SAASvB,YAC/DyW,EAAc,CACZzW,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,sBAC1B4C,KAAM+V,GAAgB8B,EAAUvW,SAASvB,MAAOsI,GAAW,GAC3D8O,mBAAoB/a,EAAKe,cAAcC,EAAAA,EAAAA,gBAEzCgZ,GAAmB,MAXzB,MAwGIrK,kBAAmB3P,EAAKe,cAAcC,EAAAA,EAAAA,UAAmBwJ,cACzDD,YAAavK,EAAKe,cAAcC,EAAAA,EAAAA,SAAkBwJ,cAClDC,cAAezK,EAAKe,cAAcC,EAAAA,EAAAA,QAClCoI,OAAO,gBACP1C,WAAYA,EACZ8I,YAAaA,EACbnG,UAAW,gBAAGpC,EAAH,EAAGA,MAAOG,EAAV,EAAUA,OAAQ9H,EAAlB,EAAkBA,KAAlB,OAA6B+J,EAAU/J,EAAM,CAAE2H,MAAAA,EAAOG,OAAAA,KACjEyC,eAAgB,gBAAGvK,EAAH,EAAGA,KAAH,OAAcuK,EAAevK,IAC7CyF,YAAa8U,EACbpT,UAAWA,EACX6D,WAAY/I,GAAAA,EACZwI,gBAjImB,SAACC,GAC5B8P,GAAsB,SAACL,GAAD,OAAgBzP,EAAayP,OAiI3CiC,eAzFa,yBACjBlB,EAAe9K,QACf,CACE,kBAAC,EAAA5J,KAAD,CAAMC,GAAE,yBAAoBJ,EAApB,wBAAgDE,IAAI,oBAAoBjF,UAAU,qBACxF,kBAAC,EAAAiC,OAAD,CAAQE,QAAQ,UAAU,aAAW,cAClC/C,EAAKe,cAAcC,EAAAA,EAAAA,aAGxB,CACEkJ,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,WAC1BS,MAAO,CACLb,UAAW,qBAEbqC,QAAS,WACPsE,EAAQgE,KAAR,yBAA+B5F,EAA/B,2BAGJ,CACEuE,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BS,MAAO,CACLuB,YAAa6W,IAAuBA,EAAmB5R,OAAS,EAChElF,QAAS,UAEXE,QAAS,WACP,IAAM0Y,EAA0B9B,EAAmB5R,OAAS,EACtD2T,EAAa5b,EAAKe,cAAc4a,EAA0B3a,EAAAA,EAAAA,sBAAiCA,EAAAA,EAAAA,sBACjGkZ,GAAiB,kBAAM,kBAAMS,EAAcd,EAAmB5P,KAAI,SAACiK,GAAD,OAAUA,EAAKvO,aACjFyU,EAAc,CACZzW,MAAOiY,EACPb,mBAAoBa,EACpBhY,KAAM+V,GACJgC,EAA0B9B,EAAmB5R,OAAS4R,EAAmB,GAAGlU,KAC5EsG,EACA0P,KAGJ3B,GAAmB,MAIzB,KAkDI6B,WAAY,CAAElY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,gBAA0B8M,YAAa,CAAC9N,EAAKe,cAAcC,EAAAA,EAAAA,oBAA8B,KACjI+J,QAAQ,qBCrMpB,IAAM+Q,GAAqB,SAAC,GAAkC,IAAhCvI,EAAgC,EAAhCA,OAAQoB,EAAwB,EAAxBA,QAASX,EAAe,EAAfA,SACvChU,GAAOC,EAAAA,EAAAA,KACb,OACE,kBAAC6a,GAAA,EAAD,CACElX,KACE,kBAAC,EAAA0M,YAAD,KACE,kBAAC,EAAA3P,KAAD,KACE,kBAAC,MAAD,UACMK,EAAAA,EAAAA,8BADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,UAM3BD,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,SAC1B+a,cAAY,EACZxI,OAAQA,EACRwH,mBAAoB/a,EAAKe,cAAcC,EAAAA,EAAAA,UACvC2T,QAASA,EACTX,SAAUA,KAKhB8H,GAAmB1a,UAAY,CAC7B4S,SAAU3S,IAAAA,KACVsT,QAAStT,IAAAA,KACTkS,OAAQlS,IAAAA,MAGV,YC9BA,IAAM2a,GAAgB,SAAC,GAgBjB,IAfOzQ,EAeP,EAfJhE,QAAWgE,KACX8D,EAcI,EAdJA,cACAE,EAaI,EAbJA,iBACA5L,EAYI,EAZJA,MACAyV,EAWI,EAXJA,SACA6C,EAUI,EAVJA,gBACA3c,EASI,EATJA,KACA4c,EAQI,EARJA,UACAC,EAOI,EAPJA,UACA9Q,EAMI,EANJA,gBACA+Q,EAKI,EALJA,sBACAC,EAII,EAJJA,mBACAC,EAGI,EAHJA,iBACAvH,EAEI,EAFJA,WACAwH,EACI,EADJA,UAEMvc,GAAOC,EAAAA,EAAAA,KACb,GAAgDmI,EAAAA,EAAAA,WAAS,GAAzD,eAAOoU,EAAP,KAAyBC,EAAzB,KAEMvZ,EAAW,WACfqM,GAAoBA,EAAiB,IACrClE,EAAgB,CACdtI,QAAS,UACTY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,uBAC1BiS,aAAc,IACdnF,YAAa9N,EAAKe,cAAcC,EAAAA,EAAAA,6BAElCuK,EAAK6N,IAGDpF,EAAW,WACf,IAAM0I,EAAYrN,EAAcpF,KAAI,SAAC8G,GAAD,OAAUA,EAAKpL,QAiBnD,OAhBAsW,EAAgBM,EAAWG,GAAW,WAChCR,EACFI,IAAmBlP,MAAK,YAAyB,IAAbtL,EAAa,EAAtB+I,MAAS/I,KAClCua,EAAmBva,EAAK,GAAG6D,MAC3BoP,EAAWjT,EAAK,GAAG6D,UAGrB0W,IACAtH,KAEFxF,EAAiB,OAEf2M,IAAcC,GAChBC,GAAsB,GAGjB7Q,EAAK6N,IAGd,OAAO8C,IAAcC,GAAaK,EAChC,kBAAC,GAAD,CAAoBjJ,OAAQiJ,EAAkB7H,QAASzR,EAAU8Q,SAAUA,IAE3E,kBAAC,EAAAmC,MAAD,CACExS,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,iBAC1B+B,QAASqT,EAAAA,aAAAA,OACT7C,QAAM,EACNoB,QAAS,WACPzR,IACAuZ,GAAoB,IAEtBpG,QAAS,CACP,kBAAC,EAAAxT,OAAD,CACE,aAAW,OACXuG,OAAO,sBACPrG,QAAQ,UACR8C,IAAI,UACJ7C,WAAqC,IAAzBqM,EAAcpH,OAC1BhF,QAAS,WACPwZ,GAAoB,KAClBP,GAAaC,IAAcnI,MAG9BhU,EAAKe,cAAcC,EAAAA,EAAAA,aAEtB,kBAAC,EAAA6B,OAAD,CAAQ,aAAW,SAASuG,OAAO,0BAA0BrG,QAAQ,OAAO8C,IAAI,SAAS5C,QAASC,GAC/FlD,EAAKe,cAAcC,EAAAA,EAAAA,WAIxB,kBAAC,EAAAoN,MAAD,CAAOC,WAAS,GACb1K,GACC,kBAAC,EAAA2K,UAAD,KACE,kBAAC,EAAAhK,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3Bb,IAIP,kBAAC,EAAA2K,UAAD,KACE,kBAAC,EAAAgC,YAAD,KACE,kBAAC,EAAA3P,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GACf,kBAAC,MAAD,UACME,EAAAA,EAAAA,sBADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,IACjBtE,KAAMA,SAMhB,kBAAC,EAAAgP,UAAD,KACE,kBAAC,EAAAoC,KAAD,KACE,kBAACZ,GAAD,CAAmBT,cAAeA,EAAeE,iBAAkBA,SAQ/EyM,GAAc5a,UAAY,CACxBmG,QAASlG,IAAAA,MAAgB,CACvBkK,KAAMlK,IAAAA,IACNiK,OAAQjK,IAAAA,KAAAA,aACPoC,WACHoR,MAAOxT,IAAAA,MAAgB,CACrB2T,OAAQ3T,IAAAA,OAAAA,aACPoC,WACH4L,cAAehO,IAAAA,MACfkO,iBAAkBlO,IAAAA,KAClB4a,gBAAiB5a,IAAAA,KACjB+X,SAAU/X,IAAAA,OACVsC,MAAOtC,IAAAA,OACP/B,KAAM+B,IAAAA,OACN6a,UAAW7a,IAAAA,KACX8a,UAAW9a,IAAAA,KACXgK,gBAAiBhK,IAAAA,KACjB+a,sBAAuB/a,IAAAA,KACvBgb,mBAAoBhb,IAAAA,KACpB0T,WAAY1T,IAAAA,KACZib,iBAAkBjb,IAAAA,KAClBkb,UAAWlb,IAAAA,QAGb,YC7IA,IAAMsb,GAAc,SAAC,GAAyF,IAAvFhZ,EAAuF,EAAvFA,MAAOC,EAAgF,EAAhFA,KAAM+Q,EAA0E,EAA1EA,QAASX,EAAiE,EAAjEA,SAAUT,EAAuD,EAAvDA,OAAQwH,EAA+C,EAA/CA,mBAAoBmB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAC5F,GAAgD/T,EAAAA,EAAAA,WAAS,GAAzD,eAAOoU,EAAP,KAAyBC,EAAzB,KAEA,OAAOP,IAAcC,GAAaK,EAChC,kBAAC,GAAD,CACEjJ,OAAQiJ,GAAoBjJ,EAC5BoB,QAAS,WACPA,IACA8H,GAAoB,IAEtBzI,SAAU,WACRA,OAIJ,kBAAC8G,GAAA,EAAD,CACElX,KAAMA,EACND,MAAOA,EACP4P,OAAQA,EACRwH,mBAAoBA,EACpBpG,QAAS,WACPA,KAEFX,SAAU,WACRyI,GAAoB,KAClBP,GAAaC,IAAcnI,QAMrC2I,GAAYvb,UAAY,CACtBwC,KAAMvC,IAAAA,KACNsC,MAAOtC,IAAAA,KACP0Z,mBAAoB1Z,IAAAA,OACpB2S,SAAU3S,IAAAA,KACVsT,QAAStT,IAAAA,KACTkS,OAAQlS,IAAAA,KACR6a,UAAW7a,IAAAA,KACX8a,UAAW9a,IAAAA,MAGbsb,GAAYrb,aAAe,CACzB4a,WAAW,EACXC,WAAW,GAGb,qlBCzBA,IAAMvX,GAAa,SAACgY,EAAW9a,EAAMkN,GAA+B,IAArBjK,EAAqB,uDAAP,GAC3D,OAAOjD,EACHA,EAAKkD,QACH,SAACC,EAAD,OAAQU,EAAR,EAAQA,KAAMsJ,EAAd,EAAcA,aAAc3P,EAA5B,EAA4BA,KAAMwO,EAAlC,EAAkCA,YAAa+J,EAA/C,EAA+CA,SAA/C,wBACK5S,GADL,CAEE,CACEU,KAAAA,EACAhC,MAAOsL,GAAgB3P,EACvBsG,MAAO,CACL,kBAAC,EAAAhD,SAAD,CAAUiD,IAAG,UAAKF,EAAL,UACX,kBAAC,EAAAG,KAAD,CAAMC,GAAE,yBAAoB6W,EAApB,yBAA8CjX,IAASsJ,GAAgB3P,IAEjFwO,EACA,kBAAC,EAAAlL,SAAD,CAAUiD,IAAG,UAAKF,EAAL,cACX,kBAACwS,GAAA,EAAD,CAAYC,KAAMP,EAAU/U,MAAMuV,EAAAA,EAAAA,IAAcR,OAGpD3R,SAAUC,QAAQpB,GAAeA,EAAYqB,MAAK,SAAC5E,GAAD,OAASA,EAAImE,OAASA,WAG5E,IAEF,IAGAkX,GAAiB,SAACvd,GAEtB,OAAOA,EAAKkL,cAAckO,SAAS,kBAAoB,sBAAwB,mBAG3EoE,GAAgB,SAAC9Z,EAAYoG,EAAQ2T,GACzC,IAAM/c,GAAOC,EAAAA,EAAAA,KACP+c,EACJ,kBAAC,EAAAna,OAAD,CAAQuG,OAAQA,EAAQrG,QAAQ,UAAUnC,UAAU,oBAAoB,aAAW,WAAWqc,eAAgBja,GAC3GhD,EAAKe,cAAcC,EAAAA,EAAAA,UAIxB,OAAOgC,EACL,kBAAC,EAAAka,QAAD,CAASC,QAASJ,GAAqB/c,EAAKe,cAAcC,EAAAA,EAAAA,gBAA0Bgc,GAEpFA,GAIEI,GAAa,SAAC,GAqBd,IApBJjO,EAoBI,EApBJA,MACAkO,EAmBI,EAnBJA,YACApN,EAkBI,EAlBJA,SACAoM,EAiBI,EAjBJA,mBACA5V,EAgBI,EAhBJA,UACAC,EAeI,EAfJA,WAEYf,EAaR,EAdJkP,MACEG,OAAUrP,KAEZrG,EAWI,EAXJA,KACA0Y,EAUI,EAVJA,eACAF,EASI,EATJA,kBACAwF,EAQI,EARJA,gBACAnB,EAOI,EAPJA,UACAC,EAMI,EANJA,sBACAhM,EAKI,EALJA,sBACAmN,EAII,EAJJA,gBACAlS,EAGI,EAHJA,gBACAmS,EAEI,EAFJA,YACAlB,EACI,EADJA,iBAEMtc,GAAOC,EAAAA,EAAAA,KACb,GAAgDmI,EAAAA,EAAAA,UAAS,IAAzD,eAAOqV,EAAP,KAAyBC,EAAzB,KACA,GAAsCtV,EAAAA,EAAAA,UAAS,IAA/C,eAAOoH,EAAP,KAAoB3F,EAApB,KACA,GAA0CzB,EAAAA,EAAAA,UAAS,IAAnD,eAAOiH,EAAP,KAAsBE,EAAtB,KACA,GAAgDnH,EAAAA,EAAAA,UAAS,IAAzD,eAAOuV,EAAP,KAAyBC,EAAzB,KACA,GAA8CxV,EAAAA,EAAAA,WAAS,GAAvD,eAAO2R,EAAP,KAAwBC,EAAxB,KACA,GAA0C5R,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAO6R,EAAP,KAAsBC,EAAtB,KACA,GAAoC9R,EAAAA,EAAAA,UAAS,IAA7C,eAAO+R,GAAP,KAAmBC,GAAnB,KACA,IAA8C5Z,EAAAA,EAAAA,YAAWC,GAAAA,GAAjD8Z,GAAR,GAAQA,wBAAyB7Z,GAAjC,GAAiCA,SAC3B8Z,IAAiB/K,EAAAA,EAAAA,QAAO/O,IAAY6Z,IAEpC9S,GAAU,CACd,CAAE9D,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAAgB0I,QAAS,QACrD,CAAE/F,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,iBAG9BsH,EAAAA,EAAAA,YAAU,WACRgU,IACa,mBAAT3W,EACF0W,EAAmB3V,EAAnB2V,CAA+B1W,GAE3B2X,EACFjB,EAAmB3V,EAAnB2V,CAA+BiB,GAE/BhB,MAGH,CAACgB,KAEJhV,EAAAA,EAAAA,YAAU,WACRgU,IACa,mBAAT3W,EACFyK,EAAsBzK,GAElB2X,EACFlN,EAAsBkN,GAEtBhB,MAGH,CAACnN,EAAOmO,KAEXhV,EAAAA,EAAAA,YAAU,WACRkS,GAAe9K,QAAUhP,IAAY6Z,KACpC,CAAC7Z,GAAU6Z,KAEd,IAMMZ,GAAkB,SAACra,EAAMyR,EAAM6I,GAAb,OACtB,2BACE,kBAAC,MAAD,UACOA,EAAS5Y,EAAAA,EAAAA,qBAAgCA,EAAAA,EAAAA,oBADhD,CAEE6H,OAAM,IACJ0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,IACjBtE,KAAAA,GACIsa,EAAS,CAAEzK,MAAO4B,GAAS,CAAEA,KAAAA,SAMnCwL,GAAqB,mBAAT5W,EAA4BA,EAAO2X,EAsD/C/V,IAAUC,EAAAA,EAAAA,cA2DhB,OACE,kBAAC,aAAD,KACE,kBAAC,GAAD,CACE5D,KAAMuW,GAAWvW,KACjBD,MAAOwW,GAAWxW,MAClB4P,OAAQwG,EACRoC,UAAWA,EACXD,UAAWpE,GAAqBE,EAChC+C,mBAAoBZ,GAAWY,mBAC/BpG,QAAS,kBAAMqF,GAAmB,IAClChG,SAAU,WACRgG,GAAmB,GACnBC,IACA1K,EAAiB,IACjB6M,EAAsBtE,IAAsBqE,MAIhD,kBAACnB,GAAA,EAAD,CAASlY,KAAK,UAAUqJ,GAAI,aAC1B,kBAAC,KAAD,CACE1E,QAASA,GACTwB,aAAcuR,GAAe9K,UAAYsI,EACzCpT,WAAY,sCAAInD,EAAJ,yBAAIA,EAAJ,uBAAcmD,GAAU,WAAV,GAAWe,GAAX,OAAoBlE,KAC9CK,KAAMqN,EACNK,YAAaA,EACbnG,UAAW,SAACC,GACV+S,EAAmB/S,EAAnB+S,CAA2BE,KAE7B3S,aAAc,CAAEtK,KAAM,GAAIwO,YAAa,IACvCjE,eAAgB,YAA2B,IAAxBvK,EAAwB,EAAxBA,KAAMwO,EAAkB,EAAlBA,iBACP,IAATxO,GAAwBuK,EAAevK,QACvB,IAAhBwO,GAA+B4P,EAAoB5P,IAE5DrH,UAAWA,EACXC,WAAYA,EACZ3B,YAAasK,EACbtF,gBAxKgB,SAACC,GACvBuF,GAAiB,SAACJ,GAChB,OAAOnF,EAAamF,GAAOlF,KAAI,gBAAGtE,EAAH,EAAGA,KAAMrG,EAAT,EAASA,KAAT,MAA4B,CAAEqG,KAAAA,EAAMuE,MAApC,EAAeA,OAAqC5K,UAuK/EiL,YAAavK,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwJ,cAChDC,cAAezK,EAAKe,cAAcC,EAAAA,EAAAA,MAClC0a,eAhGe,yBACjBlB,GAAe9K,UAAYsI,EAC3B,CACE,kBAAC,EAAAlS,KAAD,CACElF,UAAS,mDAA8C2c,GAAmB,aAC1ExX,GAAE,yBAAoBwW,GAApB,oBACF1W,IAAI,gBAEHiX,GAAcS,EAAiBV,GAAevd,GAAQ,IAAK0Y,GAAkBhY,EAAKe,cAAcC,EAAAA,EAAAA,2BAEnG,CACEkJ,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,SAC1BS,MAAO,CACLuB,WAAYua,EACZ3c,UAAW,qBAEbqC,QAAS,WACPsE,GAAQgE,KAAR,yBAA+B5F,EAA/B,uBAGJ,CACEuE,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BS,MAAO,CACLuB,YAAaqM,IAAkBA,EAAcpH,OAAS,EACtDlF,QAAS,UAEXE,QAAS,WACP,IAAM4a,EAAwBxO,EAAcpH,OAAS,EACrDiS,GACE,kBAAM,kBACJmD,EACEd,GACAlN,EAAcpF,KAAI,SAAC8G,GAAD,OAAUA,EAAKpL,SACjC,WACE2W,IAAmBlP,MAAK,YAAyB,IAAbtL,EAAa,EAAtB+I,MAAS/I,KAClCua,EAAmB,SAAK3V,GAAN,IAAkBU,OAAQ,IAA5CiV,CAAiDva,EAAK,GAAG6D,gBAKnEyU,GAAc,CACZzW,MAAO3D,EAAKe,cAAc8c,EAAwB7c,EAAAA,EAAAA,oBAA+BA,EAAAA,EAAAA,oBACjF+Z,mBAAoB/a,EAAKe,cAAc8c,EAAwB7c,EAAAA,EAAAA,YAAuBA,EAAAA,EAAAA,YACtF4C,KAAM+V,GACJra,EACAue,EAAwBxO,EAAcpH,OAASkH,EAAM/I,MAAK,SAAC2K,GAAD,OAAUA,EAAKpL,OAAS0J,EAAc,GAAG1J,QAAMrG,KACzGue,KAIJ7D,GAAmB,MAIzB,KA2CEuB,eAvJe,yBACjBf,GAAe9K,UAAYsI,EAC3B,CACE,CACErU,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BiC,QAAS,SAAC8V,EAAQyC,EAAQzK,GACxBmJ,GACE,kBAAM,kBACJmD,EAAYd,GAAW,CAACxL,EAAKpL,OAAO,WAClC2W,IAAmBlP,MAAK,YAAyB,IAAbtL,EAAa,EAAtB+I,MAAS/I,KAClCua,EAAmB,SAAK3V,GAAN,IAAkBU,OAAQ,IAA5CiV,CAAiDva,EAAK,GAAG6D,gBAIjEyU,GAAc,CACZzW,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,oBAC1B+Z,mBAAoB/a,EAAKe,cAAcC,EAAAA,EAAAA,YACvC4C,KAAM+V,GAAgBra,EAAMyR,EAAKpN,OAAO,KAE1CqW,GAAmB,MAIzB,KAiIEkB,OA9HO,kBACb,kBAAC,EAAAtY,SAAD,KACE,kBAAC,EAAAuY,MAAD,CACEC,KAAMjI,GAAAA,EAAAA,mBAAAA,KACNkI,OAAQ,SAACC,GAAD,OACN,kBAAC,IAAD,QACEiB,UAAWA,GACXxH,WAAY,SAAC+I,GAAD,OAAcN,EAAYM,MAAAA,EAAAA,EAAYvB,KAClDF,mBAAoB,SAACyB,GAAD,OAAczB,EAAmB,SAAK3V,GAAN,IAAkBU,OAAQ,IAA5CiV,CAAiDyB,MAAAA,EAAAA,EAAYvB,KAC/FD,iBAAkBA,EAClBjN,cAAesO,EACfpO,iBAAkBqO,EAClBxE,SAAQ,yBAAoBtB,EAAoB,iBAAmBnS,EAA3D,UACRsW,gBAAiBhM,EACjB3Q,KAAMA,EACN4c,UAAWpE,GAAqBE,EAChCmE,UAAWA,EACX9Q,gBAAiBA,EACjB+Q,sBAAuBA,GACnBd,SA4GNlS,OAAO,cACPyS,WAAY,CACVlY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAC1B8M,YAAa,CAAC9N,EAAKe,cAAciX,EAAiBhX,EAAAA,EAAAA,2BAAsCA,EAAAA,EAAAA,0BAAoC,KAE9H8G,QAAS,CACP,CAAEjC,IAAK,OAAQgF,MAAO2E,GACtB,CAAE3J,IAAK,cAAegF,MAAO4S,IAE/B1S,QAAQ,mBAOZgT,GAAgB,SAACC,EAAOC,GAE5B,OADAD,EAAMlU,QAAQsD,KAAK6Q,GACZD,GA+BTZ,GAAWhc,UAAY,CACrBmG,QAASlG,IAAAA,MAAgB,CACvBiK,OAAQjK,IAAAA,KAAAA,WACRkK,KAAMlK,IAAAA,KAAAA,aAER8N,MAAO9N,IAAAA,MACPoF,UAAWpF,IAAAA,KACXmK,aAAcnK,IAAAA,OACdgb,mBAAoBhb,IAAAA,KAAAA,WACpB+O,sBAAuB/O,IAAAA,KAAAA,WACvBgO,cAAehO,IAAAA,MACf4O,SAAU5O,IAAAA,KACV/B,KAAM+B,IAAAA,OACNgc,YAAahc,IAAAA,KACbqF,WAAYrF,IAAAA,MAAgB,CAC1B4F,MAAO5F,IAAAA,OAAAA,WACP+F,OAAQ/F,IAAAA,OAAAA,WACRgG,MAAOhG,IAAAA,SAETwT,MAAOxT,IAAAA,MAAgB,CACrB2T,OAAQ3T,IAAAA,OAAAA,aACPoC,WACHuU,eAAgB3W,IAAAA,KAChByW,kBAAmBzW,IAAAA,KACnB8a,UAAW9a,IAAAA,KACX+a,sBAAuB/a,IAAAA,KACvBkc,gBAAiBlc,IAAAA,KAAAA,WACjBgK,gBAAiBhK,IAAAA,KACjBmc,YAAanc,IAAAA,KACbic,gBAAiBjc,IAAAA,OACjBib,iBAAkBjb,IAAAA,MAGpB+b,GAAW9b,aAAe,CACxB6N,MAAO,GACPzI,WAAYoF,EAAAA,GACZuD,cAAe,IAGjB,UAAe5D,EAAAA,EAAAA,UAnES,SAAC,GAAqD,QAAnDuE,aAAgBD,EAAmC,EAAnCA,cAAemO,EAAoB,EAApBA,YAClD/O,EAAQY,EAAcZ,MAE5B,MAAO,CACLA,MAAAA,EACAzI,WAAYqJ,EAAcrJ,YAAd,SAAiCS,EAAAA,IAAjC,IAAkDE,MAAO8H,GAASA,EAAMlH,SACpFxB,WAAYsJ,EAAcG,OAC1B5Q,KAAMyQ,EAAczQ,KACpBwY,kBAAmB/H,EAAcgI,iBACjCC,eAAgBjI,EAAckI,cAC9BkE,WAAYpM,EAAcoO,OAC1BZ,kBAAmBxN,EAAcE,SAASvJ,YAAcqJ,EAAcE,SAASvJ,WAAWW,MAAQ,IAAQ0I,EAAckI,eACxHqF,gBAAiBY,MAAAA,OAAF,EAAEA,EAAavY,SAIP,SAACwF,GAC1B,MAAO,CACL8E,SAAU,SAACE,EAAShB,EAAO8O,GAAjB,OAA8B9S,EAAS4S,IAAc9B,EAAAA,EAAAA,IAAgB9L,EAAShB,GAAQ8O,KAChGZ,YAAa,SAAClN,EAAShB,EAAO8O,GAAjB,OAA8B9S,EAAS4S,IAAcK,EAAAA,EAAAA,IAAqBjO,EAAShB,GAAQ8O,KACxG5B,mBAAoB,SAAC/S,GAAD,OAAY,SAAC6G,EAASuK,GAAV,OAAsBvP,GAASkR,EAAAA,EAAAA,IAAmBlM,EAAS7G,EAAQoR,MACnGtK,sBAAuB,SAACD,GAAD,OAAahF,GAASiF,EAAAA,EAAAA,IAAsBD,EAAS,GAAI,MAChF9E,gBAAiB,kBAAcF,EAASE,EAAAA,GAAAA,WAAA,eACxCmS,YAAa,SAACpS,GAAD,OAAcD,GAAS4J,EAAAA,EAAAA,IAAW3J,KAC/CkR,iBAAkB,kBAAMnR,GAASmR,EAAAA,EAAAA,WA2CrC,CAA4Dc,ymBChX5D,IAAMiB,GAAQ,SAAC,GAUT,IARQ1Y,EAQR,EATJkP,MACEG,OAAUrP,KAEZ+O,EAMI,EANJA,MACAK,EAKI,EALJA,WACAuH,EAII,EAJJA,iBACAzG,EAGI,EAHJA,aACAyI,EAEI,EAFJA,WACAC,EACI,EADJA,SAEMve,GAAOC,EAAAA,EAAAA,KACP6X,EAA6B,mBAATnS,EACpB4S,EAAW,CACf,CAAEM,SAAU,EAAGlV,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,OAAiB1B,KAAM,kBAAF,OAAoBqG,EAApB,WAC9D,CAAEkT,SAAU,EAAGlV,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,SAAmB1B,KAAM,kBAAF,OAAoBqG,EAApB,cAGlE,GAAwDyC,EAAAA,EAAAA,WAAS,GAAjE,eAAOoW,EAAP,KAA8BC,EAA9B,KACA,GAA0CrW,EAAAA,EAAAA,WAAS,GAAnD,eAAOsW,EAAP,KAAuBC,EAAvB,KACA,GAAsEvW,EAAAA,EAAAA,WAAS,GAA/E,eAAOwW,EAAP,KAAoCC,EAApC,KAEMtX,GAAUC,EAAAA,EAAAA,cAEhB,GAA8DT,EAAAA,EAAAA,cAC5D,oBAAGiJ,aAAgBjB,EAAnB,EAAmBA,OAAQrM,EAA3B,EAA2BA,MAAOwb,EAAlC,EAAkCA,YAAlC,MAAuD,CACrDxX,WAAYqI,EAAOrI,YAAcqI,EAAO7H,KACxCY,QAASiH,EAAOjH,QAChBgX,YAAapc,IAAUqc,EAAAA,GACvBzB,gBAAiBY,MAAAA,OAAF,EAAEA,EAAavY,QAEhC2U,EAAAA,cAPM5T,EAAR,EAAQA,WAAYoB,EAApB,EAAoBA,QAASgX,EAA7B,EAA6BA,YAAaxB,EAA1C,EAA0CA,gBAUpC0B,EAAkB,iBAAM,CAC5B,CACErb,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1B+E,IAAIkZ,EAAAA,EAAAA,IAAazJ,GAAAA,EAAAA,OAAAA,KAAuB9O,EAAYoB,IAEtDgX,EACI,CAAEnb,MAAO2a,OAAa5Z,EAAYgQ,EAAMpV,KAAMqC,UAAU,GACxD,CAAEgC,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAAwBW,UAAU,KAG9D0H,EAAY,SAAC+B,GACjB2J,EAAW3J,IAGPD,GAAW0G,EAAAA,EAAAA,eACX9J,GAAWmX,EAAAA,EAAAA,gBAEjB5W,EAAAA,EAAAA,YAAU,WACRgU,IACA,IAAM6C,EAAYrH,EAA2BwF,EAAP3X,EACtC,GAAIwZ,EAGF,OAFA9V,EAAUiU,GACVnd,SAASC,OAAOgf,YAAYD,GACrB,kBAAMhf,SAASC,OAAOgf,iBAAY1a,MAE1C,CAAC4Y,IAEJ,IAAiChe,EA2C3B+f,EAAgB,CACpB,kBAAC,EAAAC,aAAD,CACEze,UACE,kBAAC,EAAAiF,KAAD,CACE7C,QAAS,kBAAM0b,GAAgB,IAC/B5Y,IAAKgC,EAASmL,SAASwF,SAAS,WAAalD,GAAAA,EAAAA,6BAAyCA,GAAAA,EAAAA,4BAAsC4F,KAAKmE,QAC/H,QACAzH,EAAoB,iBAAmBnS,IAGxC3F,EAAKe,cAAcC,EAAAA,EAAAA,OAGxB6E,IAAI,eAEN,kBAAC,EAAAyZ,aAAD,CACEze,UACE,kBAAC,EAAAiF,KAAD,CACE7C,QAAS,kBAAMsb,EAAS5Y,IACxBI,GAAI,kBACDgC,EAASmL,SAASwF,SAAS,WAAalD,GAAAA,EAAAA,+BAA2CA,GAAAA,EAAAA,8BAAwC4F,KAAKmE,QAC/H,QACA5Z,KAIH3F,EAAKe,cAAcC,EAAAA,EAAAA,SAGxBJ,UAAU,uBACViF,IAAI,kBAIF0W,EAAYzE,EAAoBwF,EAAkB3X,EAExD,OACE,kBAAC,EAAA/C,SAAD,KACG4b,GACC,kBAAC,IAAD,CACE1b,KAAK,QACLyQ,OAAQiL,EACRgB,YAAa,6BAAMxf,EAAKe,cAAcC,EAAAA,EAAAA,+BACtCye,kBACE,kBAAC,MAAD,UACMze,EAAAA,EAAAA,gCADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,QAIvB8b,yBAA0B1f,EAAKe,cAAcC,EAAAA,EAAAA,UAC7C2e,2BAA4B3f,EAAKe,cAAcC,EAAAA,EAAAA,QAC/CwS,cAAe,kBAAMiL,GAAuB,IAC5ChL,gBAAiB,WACfoC,EAAa,CAACyH,IAAkBlQ,MAAK,kBACnCkP,IAAmBlP,MAAK,WACtByR,GAA+B,SAGnCJ,GAAuB,GACvBlX,EAAQgE,KAAK,0CAIlBuT,EACC,kBAAC,EAAAlc,SAAD,KACE,kBAAC,KAAD,CAAYgd,YAAaZ,KACvB,kBAAC,EAAAa,MAAD,CAAOxR,WAAS,GACd,kBAAC,EAAAyR,UAAD,CAAWC,UAAQ,GACjB,kBAAC,KAAD,CACEpc,OACG2a,GAAc5J,EACb,kBAAC,EAAA9R,SAAD,KAAW8R,EAAMqD,mBAAqBrD,EAAMyJ,QApH/B7e,EAoHgEoV,EAAMpV,KAnHrG,yBAAK0gB,MAAO,CAAEC,QAAS,gBACpB3gB,EACD,yBAAKsB,UAAU,cACb,kBAAC,EAAAqW,QAAD,CACE,aAAW,qBACXL,YACE,kBAAC,MAAD,UACM5V,EAAAA,EAAAA,8BADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,SAKvB,kBAAC,MAAD,CAA4BhD,UAAU,qCAqGiE8T,EAAMpV,WAC/FoF,EAENoJ,aAAcwQ,GAAc5J,EAAQA,EAAM5G,iBAAcpJ,KAG3DgQ,EAAMqD,mBAAqBrD,EAAMyJ,OAAS,kBAAC,EAAA2B,UAAD,KApGrD,yBAAKlf,UAAU,gCACb,kBAAC,EAAAiC,OAAD,CAAQE,QAAQ,OAAOE,QAAS,kBAAMwb,GAAuB,KAC1Dze,EAAKe,cAAcC,EAAAA,EAAAA,mBAEtB,kBAAC,EAAAiW,QAAD,CACE,aAAW,qBACXE,SAAU+I,EAAAA,gBAAAA,UACVtJ,YACE,kBAAC,MAAD,UACM5V,EAAAA,EAAAA,yBADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,SAKvB,kBAAC,MAAD,CAA4BhD,UAAU,+CAoF4D,KAC5F,kBAAC,EAAAkf,UAAD,KACGpL,EAAMqD,kBAAoBrD,EAAMuD,cAAgB,KAC/C,kBAAC,EAAAkI,SAAD,CACE/W,OAAO,+BACPgX,OAAQ,kBAAC,EAAAC,YAAD,CAAaC,SAAU,SAAC/M,GAAD,OAAYoL,EAAgBpL,IAASpH,GAAG,2BACvEoH,OAAQmL,EACR6B,SAAO,EACPpJ,SAAS,QACTkI,cAAeA,MAKtBT,EACC,kBAAC,EAAA4B,MAAD,CACEzd,QAAQ,OACR0d,UAAQ,EACR9c,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,2BAC1B0f,OAAQ,kBAAC,EAAAC,uBAAD,CAAwBhM,QAAS,kBAAMkK,GAA+B,MAC9Eje,UAAU,yBAEV,kBAAC,MAAD,UACMI,EAAAA,EAAAA,8BADN,CAEE6H,OAAQ,CACN0N,EAAG,SAAC3S,GAAD,OAAU,2BAAIA,SAIrB,MAEN,kBAAC,GAAD,CAAS4U,UAAQ,EAACD,SAAUA,IAC5B,kBAAC,EAAA4C,MAAD,CACEC,KAAM,CAAC5F,GAAAA,EAAAA,6BAAAA,KAA6CA,GAAAA,EAAAA,+BAAAA,MACpD6F,OAAQ,SAAC5Z,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEEmQ,WAAY,WACVzG,GAASsB,EAAAA,EAAAA,IAAY,SAAK/F,GAAN,IAAkBU,OAAQ,EAAGU,QAAAA,EAASjB,SAAS,OAErE2N,YAAW,uBAAkB7O,GAC7B8O,aAAawK,EAAAA,EAAAA,IAAazJ,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4B9O,GAA7B,IAAyCU,OAAQ,IAAKU,GAC/EiO,aAAW,EACXD,WAAY,CAACpB,SAInB,kBAAC,EAAAyG,MAAD,CACEC,KAAM,CAAC5F,GAAAA,EAAAA,2BAAAA,KAA2CA,GAAAA,EAAAA,6BAAAA,MAClD6F,OAAQ,SAAC5Z,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEEiT,MAAOA,EACPF,YAAW,uBAAkB7O,GAC7BiM,WAAY,WACVvI,EAAUkT,UAKlB,kBAAC,EAAApB,MAAD,CACEC,KAAM5F,GAAAA,EAAAA,sBAAAA,KACN6F,OAAQ,SAAC5Z,GAAD,OAAW,kBAAC,IAAD,UAAgBA,EAAhB,CAAuB2a,sBAAuByC,QAEnE,kBAAC,EAAA1D,MAAD,CAAOC,KAAM5F,GAAAA,EAAAA,wBAAAA,KAAwC3U,UAAW+f,KAChE,kBAAC,EAAAzF,MAAD,CAAOE,OAAQ,kBAAM,kBAAC,EAAAwF,SAAD,CAAU9a,GAAE,yBAAoBJ,EAApB,gBAC/B+O,GAAS,kBAAC,MAAD,OAGb,kBAAC,EAAA9R,SAAD,KACE,6BAAShC,UAAU,yCACjB,kBAAC,KAAoBoe,MAEvB,kBAAC,KAAD,CACErb,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,eAC1B8M,YAAa,CAAC9N,EAAKe,cAAcC,EAAAA,EAAAA,kBAA4B,CAAEmL,GAAIxG,KACnE0Q,QAAS,CACP,kBAAC,EAAAxT,OAAD,CACEgD,IAAI,cACJjF,UAAU,aACVwI,OAAO,cACPrG,QAAQ,UACR,aAAW,wBACXE,QAAS,kBAAMsE,EAAQ+D,WAEtBtL,EAAKe,cAAcC,EAAAA,EAAAA,2BAyBpCqd,GAAMjd,UAAY,CAChB2G,SAAU1G,IAAAA,MAAgB,CACxB6R,SAAU7R,IAAAA,OAAAA,aAEZkG,QAASlG,IAAAA,MAAgB,CACvBkK,KAAMlK,IAAAA,KAAAA,aAERwT,MAAOxT,IAAAA,OACPqT,MAAOrT,IAAAA,MAAgB,CACrBsE,KAAMtE,IAAAA,OACN/B,KAAM+B,IAAAA,OACNyM,YAAazM,IAAAA,OACb4W,cAAe5W,IAAAA,KACf0W,iBAAkB1W,IAAAA,KAClB8c,OAAQ9c,IAAAA,OAEVid,WAAYjd,IAAAA,KACZ0T,WAAY1T,IAAAA,KACZib,iBAAkBjb,IAAAA,KAClBwU,aAAcxU,IAAAA,KACdkd,SAAUld,IAAAA,KACVyf,YAAazf,IAAAA,QAGfgd,GAAM/c,aAAe,CACnBgd,YAAY,GAGd,UAAe7S,EAAAA,EAAAA,UA3CS,SAAC,GAAD,QAAGuE,aAAgBD,EAAnB,EAAmBA,cAAegR,EAAlC,EAAkCA,gBAAiBC,EAAnD,EAAmDA,qBAAnD,MAAiF,CACvGtM,MAAO3E,EACPuO,WAAYyC,GAAmBC,MAGN,SAAC7V,GAAD,OACzBwK,EAAAA,GAAAA,IACE,CACEZ,WAAAA,EAAAA,GACAuH,iBAAAA,EAAAA,GACAzG,aAAAA,EAAAA,IAEF1K,KA+BJ,CAA4DkT,2CC/VtD4C,GAAkB,SAAC,GAAiC,IAA/BrgB,EAA+B,EAA/BA,UAAWY,EAAoB,EAApBA,IAAQC,GAAY,aACxD,OACE,kBAAC,EAAAG,YAAD,QACEhB,UAAWsgB,IAAAA,CAAWtgB,EAAW,CAC/B,uBAAwBY,EAAIsW,mBAAqBtW,EAAIwW,iBAEvDxW,IAAKA,GACDC,KAKVwf,GAAgB7f,UAAY,CAC1BI,IAAKH,IAAAA,MAAgB,CACnB2W,eAAgB3W,IAAAA,KAChByW,kBAAmBzW,IAAAA,OAErBT,UAAWS,IAAAA,QAGb,inBCuOA,SAtOe,WACb,IAAMrB,GAAOC,EAAAA,EAAAA,KACPkL,GAAW0G,EAAAA,EAAAA,eACXtK,GAAUC,EAAAA,EAAAA,cACV6B,EAAY,SAACqR,GAAD,OAAavP,GAASsB,EAAAA,EAAAA,IAAY,SAAKiO,GAAN,IAAe7T,SAAS,OAC3E,GAA8CrG,EAAAA,EAAAA,YAAWC,GAAAA,GAAjDC,EAAR,EAAQA,SAAU6Z,EAAlB,EAAkBA,wBACZ/C,EAAU9W,GAAY6Z,EAEtB9S,EAAU,CACd,CAAE9D,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAAgB6E,IAAK,OAAQ6B,WAAY,CAACE,EAAAA,WACtE,CAAEjE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAAwB6E,IAAK,WAAY6B,WAAY,CAACE,EAAAA,YAGpF,GAA0Db,EAAAA,EAAAA,cACxD,0BAAGiJ,aAAgBjB,EAAnB,EAAmBA,OAAQtI,EAA3B,EAA2BA,UAAW0a,EAAtC,EAAsCA,WAAYjD,EAAlD,EAAkDA,YAAlD,MAAuE,CACrEnP,OAAQ,GAAF,eACAoS,MAAAA,GAAA,UAAAA,EAAY7hB,YAAZ,SAAkBuV,MAAM,IAAIuM,OAAOrS,EAAOjH,QAAQxI,KAAM,MAAQ,CAAC6hB,GAAc,KAD/E,OAEAjD,MAAAA,GAAA,UAAAA,EAAa5e,YAAb,SAAmBuV,MAAM,IAAIuM,OAAOrS,EAAOjH,QAAQxI,KAAM,MAAQ,CAAC4e,GAAe,KAFjF,QAGAnP,MAAAA,GAAA,UAAAA,EAAQjN,YAAR,eAAciH,QAAO,wEAAuC,GAApCgP,EAAH,EAAGA,iBAAkBE,EAArB,EAAqBA,cAArB,QAAgDF,GAAoBE,QAAmB,KAElH/Q,MAAM6H,MAAAA,OAAA,EAAAA,EAAQrI,cAAcqI,MAAAA,OAAtB,EAAsBA,EAAQ7H,MACpCY,QAASiH,MAAAA,OAAF,EAAEA,EAAQjH,QACjBrB,UAAAA,EACAyX,YAAAA,KAEF5D,EAAAA,cAZMvL,EAAR,EAAQA,OAAQ7H,EAAhB,EAAgBA,KAAMY,EAAtB,EAAsBA,QAASrB,EAA/B,EAA+BA,UAAWyX,EAA1C,EAA0CA,YAe1C,GAAoC9V,EAAAA,EAAAA,UAASlB,GAA7C,eAAOR,EAAP,KAAmB2a,EAAnB,KACA,GAAsCjZ,EAAAA,EAAAA,UAASN,EAAQxI,MAAQ,IAA/D,eAAOkQ,EAAP,KAAoB3F,EAApB,KACA,GAAwCzB,EAAAA,EAAAA,UAAS,IAAjD,eAAOsP,EAAP,KAAqB4J,EAArB,KACA,GAAgDlZ,EAAAA,EAAAA,UAAS,IAAzD,eAAOmZ,EAAP,KAAyBC,EAAzB,MAEAlZ,EAAAA,EAAAA,YAAU,WACR,IAAMmZ,GAAmBjZ,EAAAA,EAAAA,IAA6BjB,EAASb,GAC/D2a,EAAcI,GACd,IAAQniB,GAASoJ,EAAAA,GAAAA,IAA0BnB,EAAS,CAAC,QAAS,CAAEjI,KAAMkQ,IAA9DlQ,KACRuK,EAAevK,GACfa,SAASC,OAAOshB,YAAY,CAAEvV,GAAI,SAAUwV,cAAc,IAC1DtY,EAAU,SAAKoY,GAAN,IAAwB3Z,QAAS,CAAExI,KAAAA,MAC5C6L,GAASyW,EAAAA,EAAAA,IAAgBtiB,IACzB6L,GAASmR,EAAAA,EAAAA,IAAiBhd,MACzB,KAEHgJ,EAAAA,EAAAA,YAAU,YACRM,EAAAA,EAAAA,IAAyBrB,KAAYgB,EAAAA,EAAAA,IAAqBhB,EAASb,EAAWO,MAAOP,EAAWU,SAChGoI,MAAAA,OAAA,EAAAA,EAAavH,QAAS,KAAMe,EAAAA,GAAAA,IAAuBzB,EAAS,CAAC,WAAYmB,EAAAA,GAAAA,IAA0BnB,EAAS,CAAC,QAAS,CAAEjI,KAAMkQ,OAGhI,IAAMzF,EAAkB,SAACC,GACvBsX,GAAgB,SAACO,GAAD,OACd7X,EAAa6X,GACV9Y,QAAO,gBAAqB+O,EAArB,EAAGC,iBAAoDC,EAAvD,EAAwCC,cAAxC,QAA8EH,GAAqBE,MAC1G/N,KAAI,kBAAqB,CAAEtE,KAAvB,EAAGA,KAA0BuE,MAA7B,EAAS5K,cAIpBgJ,EAAAA,EAAAA,YAAU,WACR5B,EAAWY,aAAciB,EAAAA,EAAAA,IAAqBhB,EAASb,EAAWO,MAAOP,EAAWU,UACnF,CAACV,EAAWY,cAEfgB,EAAAA,EAAAA,YAAU,WACRuB,EAAe/B,EAAQxI,MACvB+hB,EAAcna,KACb,CAACY,EAASZ,IAEb,IAAMgU,EAAS,kBACb,kBAAC,EAAAtY,SAAD,KACE,kBAAC,EAAAuY,MAAD,CAAO2G,OAAK,EAAC1G,KAAM5F,GAAAA,EAAAA,aAAAA,MACjB,kBAAC,GAAD,CACE9O,WAAYA,EACZoB,QAASA,EACT8J,WAAY,SAACtI,GACXD,EAAUC,GACVO,EAAe,QAIrB,kBAAC,EAAAsR,MAAD,CAAO2G,OAAK,EAAC1G,KAAM5F,GAAAA,EAAAA,cAAAA,MACjB,kBAAC,GAAD,CACE9O,WAAYA,EACZoB,QAASA,EACT8J,WAAY,SAACtI,GACXD,EAAUC,IAEZkL,aAAayK,EAAAA,EAAAA,IAAazJ,GAAAA,EAAAA,OAAAA,KAAuB9O,EAAYoB,GAC7D2M,aAAawK,EAAAA,EAAAA,IAAazJ,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4B9O,GAA7B,IAAyCU,OAAQ,IAAKU,MAGnF,kBAAC,EAAAqT,MAAD,CAAO2G,OAAK,EAAC1G,KAAM5F,GAAAA,EAAAA,gBAAAA,MACjB,kBAAC,GAAD,CACE9O,WAAYA,EACZoB,QAASA,EACT8J,WAAY,SAACmQ,EAAKzY,GAChBD,EAAUC,GACVgY,EAAgB5J,EAAa3O,QAAO,SAACvH,GAAD,OAAUugB,EAAIrJ,SAASlX,EAAImE,WAEjE6O,aAAayK,EAAAA,EAAAA,IAAazJ,GAAAA,EAAAA,OAAAA,KAAuB9O,EAAYoB,GAC7D2M,aAAawK,EAAAA,EAAAA,IAAazJ,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4B9O,GAA7B,IAAyCU,OAAQ,IAAKU,GAC/EiO,aAAW,EACXD,WAAYyL,OAMdhG,EAAiB,SAAC,GAAD,IAAGzD,EAAH,EAAGA,kBAAmBE,EAAtB,EAAsBA,eAAtB,OACrBF,GAAqBE,IAAmBR,EACpC,KACA,CACE,CACE7T,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAC1BiC,QAAS,SAAC8V,EAAQyC,EAAQ9G,GACxBnN,EAAQgE,KAAR,uBAA6BmJ,EAAM/O,SAGvC,CACEhC,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BiC,QAAS,SAAC8V,EAAQyC,EAAQ9G,GACxB8M,EAAoB,CAAC9M,IACrBnN,EAAQgE,KAAKiK,GAAAA,EAAAA,gBAAAA,UAMnBkG,EAAiB,yBACjBlE,EACA,CACE,kBAAC,EAAA1R,KAAD,CAAMC,GAAIyP,GAAAA,EAAAA,aAAAA,KAA6B3P,IAAI,YAAYjF,UAAU,qBAC/D,kBAAC,EAAAiC,OAAD,CAAQuG,OAAO,sBAAsBrG,QAAQ,UAAU,aAAW,gBAC/D/C,EAAKe,cAAcC,EAAAA,EAAAA,eAGxB,CACEkJ,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,aAC1BS,MAAO,CACLb,UAAW,qBAEbqC,QAAS,WACPsE,EAAQgE,KAAKiK,GAAAA,EAAAA,aAAAA,QAGjB,CACEtL,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,MAC1BS,MAAO,CACLuB,aAAsC,IAAxB0U,EAAazP,SAE7BhF,QAAS,kBAAMsE,EAAQgE,KAAR,uBAA6BmM,EAAa,GAAG/R,SAE9D,CACEuE,MAAOlK,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BS,MAAO,CACLuB,YAAa0U,EAAazP,OAAS,GAErChF,QAAS,WACPue,EAAoB9J,GACpBnQ,EAAQgE,KAAKiK,GAAAA,EAAAA,gBAAAA,SAInB,KA6CN,OACE,kBAAC,EAAAwM,OAAD,KACE,kBAAC,KAAD,CAAiBC,WAAW,cAAc7G,KAAM5F,GAAAA,EAAAA,4BAAAA,KAA4C6F,OAAQ,SAAC5Z,GAAD,OAAW,kBAAC,KAASA,MACzH,kBAAC,KAAD,CACEwgB,WAAW,eACX7G,KAAM5F,GAAAA,EAAAA,gBAAAA,KACN6F,OAAQ,SAAC5Z,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEEqf,YAAa5C,MAAAA,OAAF,EAAEA,EAAavY,KAC1B4Y,SAAU,SAAC5Y,GACTkE,EAAe,IACfyX,EAAgB5J,EAAa3O,QAAO,SAACvH,GAAD,OAASA,EAAImE,MAAQA,aAKjE,kBAAC,KAAD,CAAiBsc,WAAW,aAAa7G,KAAM5F,GAAAA,EAAAA,OAAAA,KAAuB6F,OAAQ,kBA1DhF,kBAAC,EAAAjN,MAAD,CAAOxN,UAAU,iBACf,kBAAC,EAAA0N,UAAD,KACE,kBAAC,KAAD,CAAY4T,eAAa,GACvB,kBAAC,KAAD,CAAiBve,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,YAG/C,kBAAC,EAAAsN,UAAD,KACE,kBAAC0M,GAAA,EAAD,CAASlY,KAAK,UAAUqJ,GAAI,cAC1B,kBAAC,KAAD,CACErK,KAAMiN,EAAO9E,KAAI,SAACyK,GAAD,OACfA,EAAMqD,kBAAoBrD,EAAMuD,cAAhC,SAAqDvD,GAArD,IAA4DkD,eAAgB,MAAF,OAAQlD,EAAMuD,cAAgB,cAAgB,MAASvD,KAEnI9P,WAAY,sCAAI0W,EAAJ,yBAAIA,EAAJ,uBAAa1W,GAAAA,WAAA,GAAW4S,GAAX,OAAuB8D,KAChD7T,QAASA,EACTwB,aAAcuO,EACdzS,YAAa2S,EACb3N,gBAAiBA,EACjBmR,OAAQA,EACRK,eAAgBA,EAChBhR,YAAavK,EAAKe,cAAcC,EAAAA,EAAAA,QAAiBwJ,cACjDC,cAAezK,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwJ,cAClDpB,OAAO,eACP1C,WAAYA,EACZ8I,YAAaA,EACbnG,UAAW,SAACC,GACV,IAAQhK,EAAwCgK,EAAxChK,KAAM+H,EAAkCiC,EAAlCjC,MAAOJ,EAA2BqC,EAA3BrC,MAAOG,EAAoBkC,EAApBlC,OAAQsC,EAAYJ,EAAZI,QAGpC,OAFAnB,EAAAA,EAAAA,IAAqBhB,EAASN,EAAOG,IACrCuC,EAAAA,GAAAA,IAAkBpC,EAAS,CAAEjI,KAAAA,IACtB+J,EAAU,CAAEhC,MAAAA,EAAOJ,MAAAA,EAAOG,OAAAA,EAAQsC,QAAAA,EAAS5B,QAAS,CAAExI,KAAAA,MAE/DuK,eAAgB,oBAAGvK,KAAH,OAAmBuK,OAAnB,MAAU,GAAV,IAChB6R,eAAgBA,EAChBjV,WAAYA,GAAgC,KAAnBsI,MAAAA,OAAA,EAAAA,EAAQ9G,SAAwC,KAAxBuH,MAAAA,OAAA,EAAAA,EAAavH,SAAsBxB,EACpFkJ,kBAAmB3P,EAAKe,cAAcC,EAAAA,EAAAA,MAAewJ,cACrDF,WAAY2W,GACZlW,QAAQ","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Label } from '@patternfly/react-core';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultCompactSettings,\n  defaultSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nconst createRows =\n  (userLinks) =>\n  (data, _expanded, checkedRows = []) => {\n    const intl = useIntl();\n    return data\n      ? data.reduce(\n          (acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => [\n            ...acc,\n            {\n              uuid: username,\n              cells: [\n                isOrgAdmin ? (\n                  <Fragment>\n                    <span>\n                      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n                      <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n                    </span>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n                    <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n                  </Fragment>\n                ),\n                { title: userLinks ? <Link to={`/users/detail/${username}`}>{username.toString()}</Link> : username.toString() },\n                email.toString(),\n                firstName.toString(),\n                lastName.toString(),\n                {\n                  title: (\n                    <Label key=\"status\" color={isActive && 'green'}>\n                      {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n                    </Label>\n                  ),\n                  props: {\n                    'data-is-active': isActive,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === username)),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\nconst UsersList = ({ users, fetchUsers, updateUsersFilters, isLoading, pagination, selectedUsers, setSelectedUsers, userLinks, inModal, props }) => {\n  const defaultPagination = useSelector(({ userReducer: { users } }) => ({\n    limit: inModal ? users.meta.limit : users.pagination.limit || defaultSettings.limit,\n    offset: inModal ? users.meta.offset : users.pagination.offset || defaultSettings.offset,\n    count: inModal ? users.meta.count : users.pagination.count,\n    redirected: !inModal && users.pagination.redirected,\n  }));\n  const intl = useIntl();\n  const history = useHistory();\n\n  const columns = [\n    { title: intl.formatMessage(messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n\n  let stateFilters = useSelector(\n    ({\n      userReducer: {\n        users: { filters },\n      },\n    }) => (history.location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] })\n  );\n\n  const [filters, setFilters] = useState(\n    inModal\n      ? {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n      : stateFilters\n  );\n\n  useEffect(() => {\n    inModal || (defaultPagination.redirected && applyPaginationToUrl(history, defaultPagination.limit, defaultPagination.offset));\n  }, [defaultPagination.redirected]);\n\n  useEffect(() => {\n    const pagination = inModal ? defaultSettings : syncDefaultPaginationWithUrl(history, defaultPagination);\n    const newFilters = inModal ? { status: filters.status } : syncDefaultFiltersWithUrl(history, ['username', 'email', 'status'], filters);\n    setFilters(newFilters);\n    fetchUsers({ ...mappedProps({ ...pagination, filters: newFilters }), inModal });\n  }, []);\n\n  useEffect(() => {\n    if (!inModal) {\n      isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(history, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(history, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    inModal || updateUsersFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n\n  return (\n    <TableToolbarView\n      columns={columns}\n      isSelectable\n      isCompact={true}\n      borders={false}\n      createRows={createRows(userLinks)}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n        fetchUsers({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), inModal });\n        inModal || applyPaginationToUrl(history, limit, offset);\n        inModal || applyFiltersToUrl(history, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      sortBy={{\n        index: 1,\n        direction: 'asc',\n      }}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      noDataDescription={[\n        intl.formatMessage(messages.filterMatchesNoItems, { items: intl.formatMessage(messages.users).toLowerCase() }),\n        intl.formatMessage(messages.checkFilterBeginning),\n      ]}\n      noData={users.length === 0 && !filters.username && !filters.email}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nconst mapStateToProps = ({ userReducer: { users, isUserDataLoading } }) => {\n  return {\n    users: users.data && users.data.map((data) => ({ ...data, uuid: data.username })),\n    pagination: users.meta,\n    isLoading: isUserDataLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: (apiProps = defaultSettings) => {\n      dispatch(fetchUsers(apiProps));\n    },\n    updateUsersFilters: (filters) => {\n      dispatch(updateUsersFilters(filters));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    fetchUsers: (apiProps) => {\n      return propsFromDispatch.fetchUsers(apiProps ? apiProps : defaultCompactSettings);\n    },\n  };\n};\n\nUsersList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  users: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchUsers: PropTypes.func.isRequired,\n  updateUsersFilters: PropTypes.func.isRequired,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number,\n    offset: PropTypes.number,\n    count: PropTypes.number,\n  }),\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  inModal: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  inModal: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\nexport const CompactUsersList = connect(mapStateToProps, mapDispatchToProps, mergeProps)(UsersList);\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst createRows = (data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ roles, fetchRoles, isLoading, pagination, selectedRoles, canSort, setSelectedRoles }) => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(canSort ? { transforms: [sortable] } : { orderBy: 'name' }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  useEffect(() => {\n    fetchRoles({ orderBy: 'display_name' });\n  }, []);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  return (\n    <TableToolbarView\n      columns={columns}\n      isSelectable\n      isCompact\n      borders={false}\n      createRows={createRows}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(mappedProps({ ...config, filters: { display_name: config.name } }))}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n    />\n  );\n};\n\nconst mapStateToProps = ({ roleReducer: { roles, isLoading } }) => ({\n  roles: roles.data,\n  pagination: roles.meta,\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchRoles: (apiProps) => {\n      dispatch(fetchRolesWithPolicies(mappedProps(apiProps)));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nRolesList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRoles: PropTypes.func.isRequired,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  canSort: PropTypes.bool,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nconst mapStateToPropsGroup = ({ groupReducer: { selectedGroup } }) => {\n  const roles = selectedGroup.addRoles.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.addRoles.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.addRoles.loaded,\n    groupId: selectedGroup.uuid,\n  };\n};\n\nconst mapDispatchToPropsGroup = (dispatch) => {\n  return {\n    fetchRoles: (groupId, apiProps) => {\n      dispatch(fetchAddRolesForGroup(groupId, apiProps));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    canSort: false,\n    fetchRoles: (apiProps) => propsFromDispatch.fetchRoles(propsFromState.groupId, apiProps),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RolesList);\nexport const ExcludedRolesList = connect(mapStateToPropsGroup, mapDispatchToPropsGroup, mergeProps)(RolesList);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { CompactUsersList } from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({\n  addNotification,\n  updateGroup,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n  group,\n  onClose,\n}) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? updateGroup(user_data)\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : updateGroup(user_data).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      dismissDelay: 8000,\n      title: intl.formatMessage(selectedGroup ? messages.editingGroup : messages.addingGroupTitle),\n      description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n    });\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      updateGroup,\n      fetchGroup,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditGroupModal);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({\n  removeGroups,\n  group,\n  isLoading,\n  fetchGroup,\n  groupsUuid,\n  isModalOpen,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n}) => {\n  const intl = useIntl();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      fetchGroup(groupsUuid[0].uuid);\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    removeGroups(uuids)\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => ({\n  group: selectedGroup,\n  isLoading: !selectedGroup.loaded,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveGroupModal);\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, _opened, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} state={{ uuid }} to={{ pathname: `/groups/detail/${isPlatformDefault ? 'default-access' : uuid}` }}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addGroup, addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { CompactUsersList } from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst AddGroupMembers = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  addNotification,\n  closeUrl,\n  addMembersToGroup,\n  fetchMembersForGroup,\n  fetchGroups,\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const intl = useIntl();\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      addNotification({\n        variant: 'info',\n        title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n      });\n      addMembersToGroup(uuid, userList).then(() => {\n        fetchMembersForGroup(uuid);\n        fetchGroups({ inModal: false });\n      });\n    }\n\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n    });\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func,\n  }).isRequired,\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  match: PropTypes.object,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      addGroup,\n      addMembersToGroup,\n      fetchMembersForGroup,\n      fetchGroups,\n    },\n    dispatch\n  );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddGroupMembers));\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupPrincipals = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members'].path}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add_members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add_members`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarView\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={hasPermissions.current}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  const intl = useIntl();\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            <FormattedMessage\n              {...messages.defaultAccessGroupEditWarning}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          </Text>\n        </TextContent>\n      }\n      title={intl.formatMessage(messages.warning)}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={intl.formatMessage(messages.continue)}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Modal, ModalVariant, Stack, StackItem, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport { ExcludedRolesList } from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst AddGroupRoles = ({\n  history: { push },\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  name,\n  isDefault,\n  isChanged,\n  addNotification,\n  onDefaultGroupChanged,\n  fetchRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n  fetchUuid,\n}) => {\n  const intl = useIntl();\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(messages.addingGroupRolesTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(messages.addingGroupRolesCancelled),\n    });\n    push(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(fetchUuid, rolesList, () => {\n      if (isDefault) {\n        fetchSystemGroup().then(({ value: { data } }) => {\n          fetchRolesForGroup(data[0].uuid);\n          fetchGroup(data[0].uuid);\n        });\n      } else {\n        fetchRolesForGroup();\n        fetchGroup();\n      }\n      setSelectedRoles([]);\n    });\n    if (isDefault && !isChanged) {\n      onDefaultGroupChanged(true);\n    }\n\n    return push(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      title={intl.formatMessage(messages.addRolesToGroup)}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              <FormattedMessage\n                {...messages.onlyGroupRolesVisible}\n                values={{\n                  b: (text) => <b>{text}</b>,\n                  name: name,\n                }}\n              />\n            </Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <Card>\n            <ExcludedRolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </Card>\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.any,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  addNotification: PropTypes.func,\n  onDefaultGroupChanged: PropTypes.func,\n  fetchRolesForGroup: PropTypes.func,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  fetchUuid: PropTypes.string,\n};\n\nexport default AddGroupRoles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory } from 'react-router-dom';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchGroup,\n  fetchSystemGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './group-roles.scss';\n\nconst createRows = (groupUuid, data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description, modified }) => [\n          ...acc,\n          {\n            uuid,\n            title: display_name || name,\n            cells: [\n              <Fragment key={`${uuid}-name`}>\n                <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n              </Fragment>,\n              description,\n              <Fragment key={`${uuid}-modified`}>\n                <DateFormat date={modified} type={getDateFormat(modified)} />\n              </Fragment>,\n            ],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst GroupRoles = ({\n  roles,\n  removeRoles,\n  addRoles,\n  fetchRolesForGroup,\n  isLoading,\n  pagination,\n  match: {\n    params: { uuid },\n  },\n  name,\n  isAdminDefault,\n  isPlatformDefault,\n  systemGroupUuid,\n  isChanged,\n  onDefaultGroupChanged,\n  fetchAddRolesForGroup,\n  disableAddRoles,\n  addNotification,\n  reloadGroup,\n  fetchSystemGroup,\n}) => {\n  const intl = useIntl();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchRolesForGroup(pagination)(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchRolesForGroup(pagination)(systemGroupUuid);\n      } else {\n        fetchSystemGroup();\n      }\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchAddRolesForGroup(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchAddRolesForGroup(systemGroupUuid);\n      } else {\n        fetchSystemGroup();\n      }\n    }\n  }, [roles, systemGroupUuid]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(fetchUuid, [role.uuid], () => {\n                    fetchSystemGroup().then(({ value: { data } }) => {\n                      fetchRolesForGroup({ ...pagination, offset: 0 })(data[0].uuid);\n                    });\n                  })\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles'].path}\n        render={(args) => (\n          <AddGroupRoles\n            fetchUuid={fetchUuid}\n            fetchGroup={(customId) => reloadGroup(customId ?? fetchUuid)}\n            fetchRolesForGroup={(customId) => fetchRolesForGroup({ ...pagination, offset: 0 })(customId ?? fetchUuid)}\n            fetchSystemGroup={fetchSystemGroup}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${isPlatformDefault ? 'default-access' : uuid}/roles`}\n            addRolesToGroup={addRoles}\n            name={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            addNotification={addNotification}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${fetchUuid}/roles/add_roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/roles/add_roles`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    () => {\n                      fetchSystemGroup().then(({ value: { data } }) => {\n                        fetchRolesForGroup({ ...pagination, offset: 0 })(data[0].uuid);\n                      });\n                    }\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id={'tab-roles'}>\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          createRows={(...props) => createRows(uuid, ...props)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchRolesForGroup(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nconst reloadWrapper = (event, callback) => {\n  event.payload.then(callback);\n  return event;\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, systemGroup } }) => {\n  const roles = selectedGroup.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.loaded,\n    name: selectedGroup.name,\n    isPlatformDefault: selectedGroup.platform_default,\n    isAdminDefault: selectedGroup.admin_default,\n    isChanged: !selectedGroup.system,\n    disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default,\n    systemGroupUuid: systemGroup?.uuid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addRoles: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n    removeRoles: (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback)),\n    fetchRolesForGroup: (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options)),\n    fetchAddRolesForGroup: (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {})),\n    addNotification: (...props) => dispatch(addNotification(...props)),\n    reloadGroup: (apiProps) => dispatch(fetchGroup(apiProps)),\n    fetchSystemGroup: () => dispatch(fetchSystemGroup()),\n  };\n};\n\nGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRolesForGroup: PropTypes.func.isRequired,\n  fetchAddRolesForGroup: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  addRoles: PropTypes.func,\n  name: PropTypes.string,\n  removeRoles: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  isAdminDefault: PropTypes.bool,\n  isPlatformDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n  disableAddRoles: PropTypes.bool.isRequired,\n  addNotification: PropTypes.func,\n  reloadGroup: PropTypes.func,\n  systemGroupUuid: PropTypes.string,\n  fetchSystemGroup: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupRoles);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  group,\n  fetchGroup,\n  fetchSystemGroup,\n  removeGroups,\n  isFetching,\n  onDelete,\n}) => {\n  const intl = useIntl();\n  const isPlatformDefault = uuid === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: intl.formatMessage(messages.roles), name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: intl.formatMessage(messages.members), name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  const history = useHistory();\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(pathnames.groups.path, pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const fetchData = (apiProps) => {\n    fetchGroup(apiProps);\n  };\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchSystemGroup();\n    const currUuid = !isPlatformDefault ? uuid : systemGroupUuid;\n    if (currUuid) {\n      fetchData(systemGroupUuid);\n      insights.chrome.appObjectId(currUuid);\n      return () => insights.chrome.appObjectId(undefined);\n    }\n  }, [systemGroupUuid]);\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).path.replace(\n            ':uuid',\n            isPlatformDefault ? 'default-access' : uuid\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).path.replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          {intl.formatMessage(messages.delete)}\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchUuid = isPlatformDefault ? systemGroupUuid : uuid;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            removeGroups([systemGroupUuid]).then(() =>\n              fetchSystemGroup().then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            history.push('/groups/detail/default-access/roles');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'].path, pathnames['group-detail-members-remove'].path]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'].path, pathnames['group-detail-members-edit'].path]}\n            render={(props) => (\n              <EditGroup\n                {...props}\n                group={group}\n                cancelRoute={`group/detail/${uuid}`}\n                postMethod={() => {\n                  fetchData(fetchUuid);\n                }}\n              />\n            )}\n          />\n          <Route\n            path={pathnames['group-detail-roles'].path}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members'].path} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: uuid })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n  group: selectedGroup,\n  isFetching: isRecordLoading || isRecordRolesLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      fetchSystemGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    admin_default: PropTypes.bool,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  removeGroups: PropTypes.func,\n  onDelete: PropTypes.func,\n  defaultUuid: PropTypes.string,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { Fragment, useContext, useEffect, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport { applyPaginationToUrl, isPaginationPresentInUrl, syncDefaultPaginationWithUrl } from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  const { groups, meta, filters, isLoading, systemGroup } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState(meta);\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination(meta);\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group'].path}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group'].path}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group'].path} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group'].path);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id={'tab-groups'}>\n          <TableToolbarView\n            data={groups.map((group) =>\n              group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n            )}\n            createRows={(...args) => createRows(isAdmin, ...args)}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail'].path} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail'].path}\n        render={(props) => (\n          <Group\n            {...props}\n            defaultUuid={systemGroup?.uuid}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups.path} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","ActiveUser","linkDescription","linkTitle","intl","useIntl","env","insights","chrome","getEnvironment","prefix","isProd","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","formatMessage","messages","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","number","createRows","userLinks","_expanded","checkedRows","reduce","acc","username","is_active","email","firstName","first_name","lastName","last_name","isOrgAdmin","is_org_admin","uuid","cells","key","Link","to","toString","Label","selected","Boolean","find","UsersList","users","fetchUsers","updateUsersFilters","isLoading","pagination","selectedUsers","setSelectedUsers","inModal","defaultPagination","useSelector","userReducer","limit","meta","defaultSettings","offset","count","redirected","history","useHistory","columns","transforms","nowrap","sortable","stateFilters","filters","location","search","length","Object","keys","useState","setFilters","useEffect","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","mappedProps","isPaginationPresentInUrl","values","some","filter","areFiltersPresentInUrl","isSelectable","isCompact","borders","ouiaId","fetchData","config","prototype","hasOwnProperty","call","orderBy","applyFiltersToUrl","emptyFilters","setFilterValue","payload","setCheckedItems","newSelection","map","label","sortBy","index","direction","rowWrapper","titlePlural","toLowerCase","titleSingular","noDataDescription","items","noData","value","placeholder","tableId","mapStateToProps","isUserDataLoading","mapDispatchToProps","dispatch","apiProps","addNotification","goBack","push","searchFilter","connect","CompactUsersList","propsFromState","propsFromDispatch","ownProps","defaultCompactSettings","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","fetchGroups","nameMatch","console","response","item","debouncedAsyncValidator","asyncDebounce","ReviewTemplate","formFields","AddGroupWizardContext","getState","then","Bullseye","Spinner","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","input","useFieldApi","description","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","expanded","display_name","RolesList","roles","fetchRoles","selectedRoles","canSort","setSelectedRoles","filterValue","useRef","current","filterPlaceholder","roleReducer","fetchRolesWithPolicies","ExcludedRolesList","selectedGroup","groupReducer","addRoles","loaded","groupId","fetchAddRolesForGroup","SetRoles","TextContent","fieldId","SetUsers","Form","Card","SummaryContent","Grid","GridItem","md","role","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","useDispatch","schema","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","dismissDelay","pathname","paths","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","subscription","componentMapper","onSubmit","user_list","user","roles_list","addGroup","initialValues","EditGroupModal","updateGroup","cancelRoute","submitRoute","group","onClose","setSelectedGroup","match","useRouteMatch","fetchGroup","params","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","ModalFormTemplate","ModalProps","pathnames","inputValue","hash","bindActionCreators","RemoveGroupModal","removeGroups","groupsUuid","isModalOpen","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","b","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","isAdmin","_opened","selectedRows","roleCount","principalCount","modified","isPlatformDefault","platform_default","isAdminDefault","admin_default","state","DateFormat","date","getDateFormat","AppTabs","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","AddGroupMembers","closeUrl","addMembersToGroup","fetchMembersForGroup","userList","selector","principals","members","removeModalText","plural","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","useParams","shallowEqual","userAccessAdministrator","hasPermissions","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","routes","Route","path","render","args","actionResolver","_rowId","principal","toolbarButtons","multipleMembersSelected","removeText","emptyProps","DefaultGroupChange","withCheckbox","AddGroupRoles","addRolesToGroup","isDefault","isChanged","onDefaultGroupChanged","fetchRolesForGroup","fetchSystemGroup","fetchUuid","showConfirmModal","setShowConfirmModal","rolesList","RemoveRoles","groupUuid","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","GroupRoles","removeRoles","systemGroupUuid","disableAddRoles","reloadGroup","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","multipleRolesSelected","customId","reloadWrapper","event","callback","systemGroup","system","removeRolesFromGroup","Group","isFetching","onDelete","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","groupExists","BAD_UUID","breadcrumbsList","getBackRoute","useLocation","currUuid","appObjectId","dropdownItems","DropdownItem","replace","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","defaultUuid","isRecordLoading","isRecordRolesLoading","GroupRowWrapper","classnames","adminGroup","RegExp","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","appNavClick","secondaryNav","fetchAdminGroup","rows","exact","ids","Switch","pageAction","paddingBottom"],"sourceRoot":""}