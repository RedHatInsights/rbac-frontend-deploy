{"version":3,"file":"js/5714.1674205773617.90da316a2b42d8756b17.js","mappings":"mRASaA,EAAS,KAqBtB,QAhBsB,kBACpB,kBAAC,IAAD,CAAcA,OAAQA,EAAQC,SAAUA,EAASD,IAC/C,kBAAC,aAAD,CACEE,MAAO,CACLC,YAAa,kBAAMC,EAAAA,KAGrB,kBAAC,EAAAC,SAAD,CAAUC,MAAOF,EAAAA,EAAAA,YACf,kBAAC,gBAAD,CAAQG,SAVa,WAAGC,EAAAA,EAAAA,IAAYC,SAASC,SAAU,GAAlC,gBAAmDC,QAAQ,KAAM,MAWpF,kBAAC,IAAD","sources":["webpack:///./src/entries/IamUserAccess.js"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport registry, { RegistryContext } from '../utilities/store';\nimport App from '../App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { IntlProvider } from 'react-intl';\nimport messages from '../locales/data.json';\n\nexport const locale = 'en';\n\n// make sure basename is always /iam/user-access\nconst createBasename = () => `${getBaseName(location.pathname, 1)}/user-access`.replace('//', '/');\n\nconst IamUserAccess = () => (\n  <IntlProvider locale={locale} messages={messages[locale]}>\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <Router basename={createBasename()}>\n          <App />\n        </Router>\n      </Provider>\n    </RegistryContext.Provider>\n  </IntlProvider>\n);\n\nexport default IamUserAccess;\n"],"names":["locale","messages","value","getRegistry","registry","Provider","store","basename","getBaseName","location","pathname","replace"],"sourceRoot":""}