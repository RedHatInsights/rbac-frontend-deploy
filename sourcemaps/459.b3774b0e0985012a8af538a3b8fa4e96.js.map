{"version":3,"file":"js/459.d8ed4c5b08f9574fa8c5.js","mappings":"ubAGaA,EAAc,mCAAG,WAAOC,EAAWC,EAAOC,GAAzB,8EACvBF,EADuB,8CAEnBG,GAFmB,YAKxBH,EAAUI,OAAS,KALK,qBAMpB,sCANoB,wBASLC,EAAAA,EAAAA,IAAY,CAAEC,MAAO,GAAIC,OAAQ,EAAGC,QAAS,CAAEC,KAAMT,GAAaU,UAAW,UAA7E,OAA8F,SAACC,GACpHC,QAAQD,MAAMA,MAVY,UAStBE,EATsB,SAcxBX,EAAKW,MAAAA,GAAH,UAAGA,EAAUC,YAAb,aAAG,EAAgBC,MAAK,SAACC,GAAD,OAAUA,EAAKf,KAAWC,MAAMW,MAAAA,GAAA,UAAAA,EAAUC,YAAV,eAAgBV,QAAS,GAd3D,qBAepB,+BAfoB,qCAkBrBD,GAlBqB,4CAAH,0DAqBdc,GAA0BC,EAAAA,EAAAA,IAAc,SAACC,EAAOlB,EAAOC,GAAf,OAAsBH,EAAeoB,EAAOlB,EAAOC,M,glBChBxG,IAAMkB,EAAiB,SAAC,GAAmB,MAAjBC,EAAiB,EAAjBA,WACxB,GAA8CC,EAAAA,EAAAA,YAAWC,IAAjDC,EAAR,EAAQA,WAAYb,EAApB,EAAoBA,MAAOc,EAA3B,EAA2BA,eACnBC,GAAaC,EAAAA,EAAAA,WAAbD,SAQR,OAPAE,EAAAA,EAAAA,YAAU,WACRH,OAAetB,GACfJ,EAAe2B,IAAWG,OAAO,eAC9BC,MAAK,kBAAML,GAAe,MAD7B,OAES,kBAAMA,GAAe,QAC7B,SAEkB,IAAVd,GAAyBa,EAEhC,kBAAC,EAAAO,SAAD,KACE,kBAAC,EAAAC,QAAD,CAASC,KAAK,SAKN,IAAVtB,EAEA,kBAAC,IAAD,CACEuB,QAASX,GACTY,MAAM,2BACNC,KAAK,8FAMT,kBAAC,aAAD,KACE,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKL,KAAK,KAAKM,UAAU,cAA7C,kBAGC,CAAC,CAAC,EAAD,GAAMlB,MAAAA,GAAN,UAAMA,EAAa,UAAnB,aAAM,EAAkB,QAKhCD,EAAeoB,UAAY,CACzBnB,WAAYoB,IAAAA,OAGd,U,eC3CA,SACEC,OAAQ,CACN,CACEC,UAAW,SACXlC,KAAM,SACNmC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZX,MAAO,eACPO,OAAQ,CACN,CACEjC,KAAM,uBACNsC,SAAU,YACVZ,MAAO,uBACPO,OAAQ,CACN,CACEC,UAAW,WACXlC,KAAM,aACNuC,SAAU,CACR,CACEC,KAAMC,EAAAA,EAAAA,YAIZ,CACEP,UAAWQ,EAAAA,EAAAA,SACX1C,KAAM,oBACN2C,WAAW,EACXJ,SAAU,CACR,CACEC,KAAMC,EAAAA,EAAAA,WACNG,UAAW,SAMrB,CACE5C,KAAM,YACNsC,SAAU,YACVZ,MAAO,YACPO,OAAQ,CACN,CACEC,UAAW,YACXlC,KAAM,gBAIZ,CACEA,KAAM,YACNsC,SAAU,SACVZ,MAAO,cACPO,OAAQ,CACN,CACEC,UAAW,YACXlC,KAAM,gBAIZ,CACEA,KAAM,SACN0B,MAAO,iBAEPmB,QAAS,SAACC,GAAD,OAAW,kBAAC,KAAD,UAAuBA,EAAvB,CAA8BrB,QAASX,OAC3DiC,aAAcpC,EACdsB,OAAQ,CACN,CACEC,UAAW,kBACXlC,KAAM,yB,2DCjEdgD,EAAqB,SAACzD,EAAW0D,GAAZ,YAA8CvD,IAAdH,GAA2B0D,EAAiB,QAAU,WAC3GC,EAA4B,SAACC,GAAD,OAAuBA,MAAAA,OAAA,EAAAA,EAAkBxD,QAAS,IAAM,QAAU,WAE9FyD,EAAU,SAACN,GACf,IAAQO,GAAUC,EAAAA,EAAAA,GAAYR,GAAtBO,MACFE,GAAcrC,EAAAA,EAAAA,WACpB,EAAiEqC,EAAYtC,WAAWG,OAAlEpB,EAAtB,EAAQ,cAAyCwD,EAAjD,EAA4B,qBAC5B,GAAkCC,EAAAA,EAAAA,UAASzD,GAAQ,IAAnD,eAAOT,EAAP,KAAkBmE,EAAlB,KACA,GAA4CD,EAAAA,EAAAA,YAA5C,eAAOR,EAAP,KAAuBU,EAAvB,KACA,GAAgDF,EAAAA,EAAAA,UAASD,GAAzD,eAAOL,EAAP,KAAyBS,EAAzB,KAEMC,EAAmB,SAACnD,GACxB2C,EAAMS,cAASpE,GACfc,EAAwBE,GACrBW,MAAK,WACJgC,EAAMS,SAASpD,GACfiD,OAAkBjE,MAHtB,OAKS,SAACQ,GACNyD,EAAkBzD,MAEtBwD,EAAahD,IAOf,OAJAS,EAAAA,EAAAA,YAAU,YACR5B,MAAAA,OAAA,EAAAA,EAAWI,QAAS,GAAKkE,EAAiBtE,KACzC,IAGD,kBAAC,EAAAwE,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAWnC,UAAU,8BACnB,kBAACoC,EAAA,EAAD,CACEC,MAAM,aACNC,kBAAmB7E,EAAY0D,EAAiB,WAChDoB,YAAU,EACVC,UAAWtB,EAAmBzD,EAAW0D,IAEzC,kBAACsB,EAAA,GAAD,CACE7D,MAAOnB,EACPiD,KAAK,OACL8B,UAAWtB,EAAmBzD,EAAW0D,GACzCuB,OAAQ,iBAAoB,KAAdjF,GAAoBmE,OAAahE,IAC/CoE,SAAU,SAACpD,GAAD,OAAWmD,EAAiBnD,IACtC,aAAW,iBAIjB,kBAAC,EAAAuD,UAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAM,oBACNC,kBAAkB,sCAClBE,UAAWpB,EAA0BC,IAErC,kBAACsB,EAAA,GAAD,CACE/D,MAAOyC,EACPmB,UAAWpB,EAA0BC,GACrCW,SAAU,SAACpD,GACTkD,EAAoBlD,GACpB6C,EAAYmB,OAAO,oBAAqBhE,IAE1C,aAAW,oBACXiE,kBAAkB,iBAQ9BvB,EAAQrB,UAAY,CAClB/B,KAAMgC,IAAAA,OACNwB,YAAaxB,IAAAA,OACb4C,OAAQ5C,IAAAA,OAGV,U,qnBC1EA,IAAM6C,EAAa,SAACxE,EAAMyE,GAA+B,IAArBC,EAAqB,uDAAP,GAChD,OAAO1E,EACHA,EAAK2E,QACH,SAACC,EAAD,OAAQC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aAAcnF,EAA5B,EAA4BA,KAAMwD,EAAlC,EAAkCA,YAAlC,wBACKyB,GADL,CAEE,CACEC,KAAAA,EACAE,MAAO,CAACD,GAAgBnF,EAAMwD,GAC9B6B,SAAUC,QAAQP,GAAeA,EAAYQ,MAAK,SAACC,GAAD,OAASA,EAAIN,OAASA,WAG5E,IAEF,IAGAO,GAAY,SAAC,GAA2F,IAAzFC,EAAyF,EAAzFA,MAAOC,EAAkF,EAAlFA,WAAYC,EAAsE,EAAtEA,UAAWC,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBACrF,GAAsCvC,EAAAA,EAAAA,UAAS,IAA/C,eAAOwC,EAAP,KAAoBC,EAApB,KACiBC,GAAYC,EAAAA,EAAAA,QAAO,CAAC,GACjC1E,MAAO,OAAQ2E,IAAK,gBAAoBN,EAAU,CAAEO,WAAY,CAACC,EAAAA,WAAc,CAAEC,QAAS,SAC5F,CAAE9E,MAAO,iBAFH+E,QAeR,OAVAtF,EAAAA,EAAAA,YAAU,WACRwE,EAAW,CAAEa,QAAS,mBACrB,IASD,kBAAC,IAAD,CACEL,QAASA,EACTO,cAAY,EACZC,WAAS,EACTC,SAAS,EACT/B,WAAYA,EACZxE,KAAMqF,EACNO,YAAaA,EACbY,kBAAkB,YAClBC,UAAW,SAACC,GAAD,OAAYpB,GAAWqB,EAAAA,EAAAA,IAAY,OAAKD,GAAN,IAAchH,QAAS,CAAEoF,aAAc4B,EAAO/G,WAC3FkG,eAAgB,gBAAGlG,EAAH,EAAGA,KAAH,OAAckG,EAAelG,IAC7C4F,UAAWA,EACXqB,OAAO,cACPpB,WAAYA,EACZd,YAAae,EACboB,gBAtBoB,SAACC,GACvBnB,GAAiB,SAACN,GAChB,OAAOyB,EAAazB,GAAO0B,KAAI,gBAAGlC,EAAH,EAAGA,KAAMlF,EAAT,EAASA,KAAT,MAA4B,CAAEkF,KAAAA,EAAMf,MAApC,EAAeA,OAAqCnE,UAqBnFqH,YAAY,QACZC,cAAc,OACdC,QAAQ,gBAoBd9B,GAAU1D,UAAY,CACpByF,QAASxF,IAAAA,MAAgB,CACvByF,OAAQzF,IAAAA,KAAAA,WACR0F,KAAM1F,IAAAA,KAAAA,aAER0D,MAAO1D,IAAAA,MACP4D,UAAW5D,IAAAA,KACX2F,aAAc3F,IAAAA,OACd2D,WAAY3D,IAAAA,KAAAA,WACZgE,iBAAkBhE,IAAAA,KAAAA,WAClB8D,cAAe9D,IAAAA,MACf6D,WAAY7D,IAAAA,MAAgB,CAC1BnC,MAAOmC,IAAAA,OAAAA,WACPlC,OAAQkC,IAAAA,OAAAA,WACR4F,MAAO5F,IAAAA,SAET+D,QAAS/D,IAAAA,MAGXyD,GAAUoC,aAAe,CACvBnC,MAAO,GACPG,WAAYiC,EAAAA,GACZ/B,SAAS,GAiCX,UAAegC,EAAAA,EAAAA,UAtES,SAAC,GAAD,QAAGC,YAAetC,EAAlB,EAAkBA,MAAOE,EAAzB,EAAyBA,UAAzB,MAA4C,CAClEF,MAAOA,EAAMrF,KACbwF,WAAYH,EAAMuC,KAClBrC,UAAAA,MAGyB,SAACsC,GAC1B,MAAO,CACLvC,WAAY,SAACwC,GACXD,GAASE,EAAAA,EAAAA,KAAuBpB,EAAAA,EAAAA,IAAYmB,MAE9CE,gBAAiB,kBAAcH,EAASG,EAAAA,GAAAA,WAAA,kBA2D5C,CAA4D5C,IACrD,IAAM6C,IAAoBP,EAAAA,EAAAA,UA/BJ,SAAC,GAAwC,IAAtBQ,EAAsB,EAAtCC,aAAgBD,cACxC7C,EAAQ6C,EAAcE,SAAS/C,MAErC,MAAO,CACLA,MAAAA,EACAG,WAAY0C,EAAcE,SAAS5C,YAAvB,OAA0C6C,EAAAA,IAA1C,IAA2Dd,MAAOlC,GAASA,EAAM/F,SAC7FiG,WAAY2C,EAAcE,SAASE,OACnCC,QAASL,EAAcrD,SAIK,SAACgD,GAC/B,MAAO,CACLvC,WAAY,SAACiD,EAAST,GACpBD,GAASW,EAAAA,EAAAA,IAAsBD,EAAST,KAE1CE,gBAAiB,kBAAcH,EAASG,EAAAA,GAAAA,WAAA,mBAIzB,SAACS,EAAgBC,EAAmBC,GACrD,kBACKA,GACAF,GACAC,GAHL,IAIEhD,SAAS,EACTJ,WAAY,SAACwC,GAAD,OAAcY,EAAkBpD,WAAWmD,EAAeF,QAAST,QAKlDJ,CAAmEtC,ICnI9FwD,GAAW,SAACnG,GAChB,OAA0CW,EAAAA,EAAAA,UAAS,IAAnD,eAAOqC,EAAP,KAAsBE,EAAtB,KACQ3C,GAAUC,EAAAA,EAAAA,GAAYR,GAAtBO,MACFE,GAAcrC,EAAAA,EAAAA,WAWpB,OATAC,EAAAA,EAAAA,YAAU,WACR6E,EAAiBzC,EAAYtC,WAAWG,OAAO,eAAiB,MAC/D,KAEHD,EAAAA,EAAAA,YAAU,WACRkC,EAAMS,SAASgC,GACfvC,EAAYmB,OAAO,aAAcoB,KAChC,CAACA,IAGF,kBAAC,EAAAoD,SAAD,KACE,kBAAC,EAAAnF,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAkF,YAAD,KACE,kBAAC,EAAAC,KAAD,yDAGJ,kBAAC,EAAAnF,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWmF,QAAQ,eACjB,kBAAC,GAAD,CAAWvD,cAAeA,EAAeE,iBAAkBA,SAQvEiD,GAASlH,UAAY,CACnB+D,cAAe9D,IAAAA,MACfgE,iBAAkBhE,IAAAA,KAClBN,MAAOM,IAAAA,OACPwB,YAAaxB,IAAAA,QAGf,Y,4BCtCMsH,GAAW,SAACxG,GAChB,OAA0CW,EAAAA,EAAAA,UAAS,IAAnD,eAAO8F,EAAP,KAAsBC,EAAtB,KACQnG,GAAUC,EAAAA,EAAAA,GAAYR,GAAtBO,MACFE,GAAcrC,EAAAA,EAAAA,WAWpB,OATAC,EAAAA,EAAAA,YAAU,WACRqI,EAAiBjG,EAAYtC,WAAWG,OAAO,eAAiB,MAC/D,KAEHD,EAAAA,EAAAA,YAAU,WACRkC,EAAMS,SAASyF,GACfhG,EAAYmB,OAAO,aAAc6E,KAChC,CAACA,IAGF,kBAAC,EAAAL,SAAD,KACE,kBAAC,EAAAO,KAAD,KACE,kBAAC,EAAA1F,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAkF,YAAD,KACE,kBAAC,KAAD,CAAY3F,YAAa,2FAG7B,kBAAC,EAAAS,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWmF,QAAQ,eACjB,kBAAC,EAAAK,KAAD,KACE,kBAAC,KAAD,CAAkBH,cAAeA,EAAeC,iBAAkBA,EAAkBpH,SAAO,WAU3GkH,GAASvH,UAAY,CACnBwH,cAAevH,IAAAA,MACfwH,iBAAkBxH,IAAAA,KAClBN,MAAOM,IAAAA,OACPwB,YAAaxB,IAAAA,QAGf,YC/CA,IAAM2H,GAAiB,WACrB,IACA,GADoBzI,EAAAA,EAAAA,WAMJD,WAAWG,OAJXpB,EADhB,EACE,cACqBwD,EAFvB,EAEE,qBACc+F,EAHhB,EAGE,cACczD,EAJhB,EAIE,cAGF,OACE,yBAAKhE,UAAU,QACb,kBAAC,EAAAiC,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAF,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAWnC,UAAU,8BACnB,kBAAC,EAAA8H,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GAAiBjI,UAAU,kBAA5C,eAIF,kBAAC,EAAA+H,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GAAiB/J,KAGtC,kBAAC,EAAA4J,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GAAiBjI,UAAU,kBAA5C,sBAIF,kBAAC,EAAA+H,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GAAiBvG,KAGtC,kBAAC,EAAAoG,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GAAiBjI,UAAU,kBAA5C,UAIF,kBAAC,EAAA+H,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GACdjE,EAAcsB,KAAI,SAAC4C,EAAMC,GAAP,OACjB,kBAAC,EAAAb,KAAD,CAAMtH,UAAU,YAAYuE,IAAK4D,GAC9BD,EAAK7F,aAMhB,kBAAC,EAAAyF,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GAAiBjI,UAAU,kBAA5C,YAIF,kBAAC,EAAA+H,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAV,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GACdR,EAAcnC,KAAI,SAAC4C,EAAMC,GAAP,OACjB,kBAAC,EAAAb,KAAD,CAAMtH,UAAU,YAAYuE,IAAK4D,GAC9BD,EAAK7F,mBAc9BwF,GAAe5H,UAAY,CACzB/B,KAAMgC,IAAAA,OACNwB,YAAaxB,IAAAA,OACb4C,OAAQ5C,IAAAA,OAGV,Y,umBCpEO,IAAMlB,IAAwBoJ,EAAAA,EAAAA,eAAc,CACjDC,SAAS,EACTpJ,YAAY,EACZb,WAAOR,IAGH0K,GAAe,SAACtH,GAAD,OAAW,kBAAC,MAAD,UAAqBA,EAArB,CAA4BuH,kBAAkB,MAExEC,GAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAYC,GAAf,oBAA0B,kBAACD,EAAYC,IAC3DF,GAAYvI,UAAY,CACtBwI,QAASvI,IAAAA,YAAAA,YAGJ,IAAMyI,GAAkB,CAC7BjH,YAAa8G,GACb,WAAYlH,EACZ,YAAa6F,GACb,YAAaK,GACb,kBAAmBK,IAGRe,GAAW,SAACC,EAAeC,EAAkBC,GAAlC,OAAmD,SAACC,GAC1ED,EAAaC,GACTC,OAAOC,KAAKF,GAAUnL,OAAS,EACjCiL,GAAiB,GAEjBD,MAIEM,GAAiB,SAAC,GAAwC,IAAtCC,EAAsC,EAAtCA,WAAYrF,EAA0B,EAA1BA,WAAY9F,EAAc,EAAdA,QAC1CmI,GAAWiD,EAAAA,EAAAA,eACTzD,GAAS0D,EAAAA,EAAAA,cAAT1D,KACR,GAAwDjE,EAAAA,EAAAA,WAAS,GAAjE,eAAO4H,EAAP,KAA6BC,EAA7B,KACA,GAAkC7H,EAAAA,EAAAA,UAAS,IAA3C,eAAO8H,EAAP,KAAkBV,EAAlB,KACA,GAAoDpH,EAAAA,EAAAA,UAAS,CAC3D0G,SAAS,EACTpJ,YAAY,EACZb,WAAOR,EACP8L,UAAU,IAJZ,eAAOC,EAAP,KAA2BC,EAA3B,KAOMC,EAAmB,WACvBzD,GACEG,EAAAA,EAAAA,IAAgB,CACduD,QAAS,UACTlK,MAAO,eACPmK,aAAc,IACdC,aAAa,EACbtI,YAAa,4CAGjBkE,EAAK,CACHqE,SAAUC,GAAAA,EAAAA,OACVC,QAAQC,EAAAA,EAAAA,IAAkB,IAAEC,KAAM,EAAGC,SAAUvG,EAAWhG,OAAUE,OAkCxE,OAAOsL,EACL,kBAAC,IAAD,CACE7I,KAAK,QACL6J,OAAQhB,EACRiB,cAAe,kBAAMhB,GAAwB,IAC7CiB,gBAAiBZ,IAGnB,kBAAC7K,GAAsB0L,SAAvB,CAAgC9L,MAAK,SAAO+K,GAAP,IAA2BzK,eAtC3C,SAACd,GAAD,OAAWwL,GAAsB,SAACe,GAAD,UAAC,MAAeA,GAAhB,IAAsBvM,MAAAA,QAsCIwM,iBArCzD,SAACvC,GAAD,OAAauB,GAAsB,SAACe,GAAD,UAAC,MAAeA,GAAhB,IAAsBtC,QAAAA,QAqCkBwC,YApChF,SAACnB,GAAD,OAAcE,GAAsB,SAACe,GAAD,UAAC,MAAeA,GAAhB,IAAsBjB,SAAAA,WAqC1E,kBAAC,IAAD,CACEoB,OAAQA,EACRC,aAAc,CAAEzL,QAAQ,GACxBgJ,aAAcA,GACd0C,gBAAe,SAAOA,EAAAA,IAAoBrC,IAC1CsC,SAxCW,SAACjC,GAChB,IAAMS,EAAY,CAChBvL,KAAM8K,EAAS,cACftH,YAAasH,EAAS,qBACtBkC,UAAWlC,EAAS,cAAc1D,KAAI,SAAC6F,GAAD,MAAW,CAAEC,SAAUD,EAAK9I,UAClEgJ,WAAYrC,EAAS,cAAc1D,KAAI,SAAC4C,GAAD,OAAUA,EAAK9E,SAExDwC,EAAK,CACHqE,SAAUC,GAAAA,EAAAA,OACVC,QAAQC,EAAAA,EAAAA,IAAkB,CAAEC,KAAM,EAAGC,SAAUvG,EAAWhG,UAE5DqI,GAASkF,EAAAA,EAAAA,IAAS7B,IACflK,MAAK,kBAAM6J,EAAW,CAAErL,MAAOgG,EAAWhG,MAAOC,OAAQ,EAAGC,QAAS,QACrEsB,MAAK,WACJ6G,GACEG,EAAAA,EAAAA,IAAgB,CACduD,QAAS,UACTlK,MAAO,uBACPmK,aAAc,IACdC,aAAa,EACbtI,YAAa,2CAqBjB6J,cAAe9B,EACfb,SAAUA,GAASiB,EAAkBL,EAAyBT,OAMtEI,GAAelJ,UAAY,CACzBmJ,WAAYlJ,IAAAA,KACZ6D,WAAY7D,IAAAA,MAAgB,CAC1BnC,MAAOmC,IAAAA,OAAAA,aACNqC,WACHtE,QAASiC,IAAAA,MAAgB,CACvBhC,KAAMgC,IAAAA,SACLqC,YAGL,Y,inBC1HA,IAAMiJ,GAAiB,SAAC,GAUlB,IATJjF,EASI,EATJA,gBACAkF,EAQI,EARJA,YACArC,EAOI,EAPJA,WACArF,EAMI,EANJA,WACA9F,EAKI,EALJA,QACAyN,EAII,EAJJA,YAII,IAHJC,YAAAA,OAGI,MAHUD,EAGV,EAFJE,EAEI,EAFJA,MACAC,EACI,EADJA,QAEA,GAA0ClK,EAAAA,EAAAA,eAAS/D,GAAnD,eAAO6I,EAAP,KAAsBqF,EAAtB,KAEQlG,GAAS0D,EAAAA,EAAAA,cAAT1D,KACFmG,GAAQC,EAAAA,EAAAA,eAAc,oBAEtBjD,EAAe,SAACU,GACpBqC,EAAiBrC,KAUnBpK,EAAAA,EAAAA,YAAU,WANR0M,IACEE,EAAAA,EAAAA,IAAWF,EAAMG,OAAOvO,IACrBwO,QAAQ5M,MAAK,SAAChB,GAAD,OAAUwK,EAAaxK,MADvC,OAES,kBAAMwK,OAAanL,QAK7B,KAEHyB,EAAAA,EAAAA,YAAU,WACRyM,EAAiBF,KAChB,CAACA,IAEJ,IAaMhD,EAAW,WACfrC,EAAgB,CACduD,QAAS,UACTC,aAAc,IACdC,aAAa,EACbpK,MAAO6G,EAAgB,gBAAkB,eACzC/E,YAAa+E,EAAgB,uCAAyC,2CAExEoF,IACAjG,EAAK8F,IAGDZ,EAAS,CACb3K,OAAQ,CAAC,OAELjC,KAAM,OACNmE,MAAO,OACPjC,UAAWqG,EAAgB7F,EAAAA,EAAAA,WAA4B,YACnD6F,EAAgB,CAAE2F,iBAAiB,GAAS,IAL5C,IAMJ3L,SAAU,CACR,CAAEC,KAAM,sBAAuB/C,GAAIoO,EAAQA,EAAMG,OAAOvO,GAAKiO,EAAMxI,KAAM1F,MAAO,QAChF,CACEgD,KAAMC,EAAAA,EAAAA,aAIZ,CACEzC,KAAM,cACNmE,MAAO,cACPjC,UAAWqG,EAAgB7F,EAAAA,EAAAA,SAA0B,WACrDH,SAAU,CACR,CACEC,KAAMC,EAAAA,EAAAA,WACNG,UAAW,SAOfuL,EAAkB,CACtB,sBACE,gBAAG3O,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACA,SAACiB,GAAD,OACEF,EAAwBE,EAAOlB,EAAOC,MAG5C,OACE,kBAAC,KAAD,CACEmN,OAAQA,EACRE,gBAAe,SACVA,EAAAA,IADU,IAEbsB,SAAUC,EAAAA,WAEZ3D,SAAUA,EACVqC,SApEa,SAAC1M,GAChB,IAAMiO,EAAY,CAChBpJ,KAAM7E,EAAK6E,KACX1B,YAAanD,EAAKmD,aAAe,KACjCxD,KAAMK,EAAKL,MAEbkL,EACIqC,EAAYe,GACTjN,MAAK,kBAAM6J,EAAW,CAAErL,MAAOgG,MAAAA,OAAF,EAAEA,EAAYhG,MAAOE,QAAAA,OAClDsB,KAAKqG,EAAK+F,IACbF,EAAYe,GAAWjN,MAAK,kBAAMqG,EAAK+F,OA2DzCU,gBAAiBA,EACjBd,cAAa,MAAO9E,GACpB6B,aAAc,SAACtH,GAAD,OACZ,kBAACyL,GAAA,GAAD,UAAuBzL,EAAvB,CAA8B0L,WAAY,CAAEb,QAASjD,EAAU2B,QAAQ,EAAMT,QAAS,SAAUlK,MAAO,mCAM/G4L,GAAezF,aAAe,CAC5B2F,YAAaiB,GAAAA,EAAAA,OACbd,QAAS,kBAAM,MACfZ,SAAU,kBAAM,OAGlBO,GAAevL,UAAY,CACzBsG,gBAAiBrG,IAAAA,KAAAA,WACjB+L,WAAY/L,IAAAA,KAAAA,WACZ0M,WAAY1M,IAAAA,OACZuL,YAAavL,IAAAA,KAAAA,WACbkJ,WAAYlJ,IAAAA,KACZ6D,WAAY7D,IAAAA,MAAgB,CAC1BnC,MAAOmC,IAAAA,OAAAA,aACNqC,WACHtE,QAASiC,IAAAA,MAAgB,CACvBhC,KAAMgC,IAAAA,SACLqC,WACHmJ,YAAaxL,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd+J,SAAU/J,IAAAA,OAAAA,WACViK,OAAQjK,IAAAA,OACR2M,KAAM3M,IAAAA,WAGVyL,YAAazL,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd+J,SAAU/J,IAAAA,OAAAA,WACViK,OAAQjK,IAAAA,OACR2M,KAAM3M,IAAAA,WAGV0L,MAAO1L,IAAAA,OACP2L,QAAS3L,IAAAA,MAiBX,UAAe+F,EAAAA,EAAAA,UAdS,SAAC,GAAD,MAAsC,CAC5DnC,UADsB,EAAG4C,aAAgB5C,cAIhB,SAACsC,GAAD,OACzB0G,EAAAA,GAAAA,oBACE,CACEvG,gBAAAA,EAAAA,GACAkF,YAAAA,EAAAA,GACAQ,WAAAA,EAAAA,IAEF7F,KAGJ,CAA4DoF,I,4BCzKtDuB,GAAmB,SAAC,GAYpB,IAXJC,EAWI,EAXJA,aACApB,EAUI,EAVJA,MACA9H,EASI,EATJA,UACAmI,EAQI,EARJA,WACAgB,EAOI,EAPJA,WACAC,EAMI,EANJA,YACA9D,EAKI,EALJA,WACArF,EAII,EAJJA,WACA9F,EAGI,EAHJA,QACAyN,EAEI,EAFJA,YAEI,IADJC,YAAAA,OACI,MADUD,EACV,GACJrM,EAAAA,EAAAA,YAAU,WACkB,IAAtB4N,EAAWpP,QACboO,EAAWgB,EAAW,GAAG7J,QAE1B,IAEH,IAAQwC,GAAS0D,EAAAA,EAAAA,cAAT1D,KAER,GAA8BjE,EAAAA,EAAAA,WAAS,GAAvC,eAAOwL,EAAP,KAAgBC,EAAhB,KAEMC,EAAiBJ,EAAWpP,OAAS,EASrC+K,EAAW,kBAAMhD,EAAK8F,IAE5B,OACE,kBAAC,EAAA4B,MAAD,CACEtN,UAAU,OACVuK,OAAQ2C,EACRpD,QAASyD,EAAAA,aAAAA,MACT3N,MACE,kBAAC,EAAA0H,KAAD,KACE,kBAAC,MAAD,CAAyBtH,UAAU,8BADrC,KAEUqN,EAAiB,iBAAmB,iBAGhDxB,QAASjD,EACT4E,QAAS,CACP,kBAAC,EAAAC,OAAD,CAAQlJ,IAAI,SAASmJ,YAAaP,EAASrD,QAAQ,SAASpJ,KAAK,SAASiN,QAtB/D,WACf,IAAMC,EAAQX,EAAW3H,KAAI,SAACsG,GAAD,OAAWA,EAAMxI,QAC9C4J,EAAaY,GACVrO,MAAK,kBAAM6J,EAAWwE,EAAO,CAAE7P,MAAOgG,MAAAA,OAAF,EAAEA,EAAYhG,MAAOE,QAAAA,OACzDsB,KAAKqG,EAAK+F,MAmBN0B,EAAiB,gBAAkB,gBAEtC,kBAAC,EAAAI,OAAD,CAAQlJ,IAAI,SAASuF,QAAQ,OAAOpJ,KAAK,SAASiN,QAAS/E,GAA3D,YAKF,kBAAC,EAAAvB,YAAD,KACGgG,EACC,kBAAC,EAAA/F,KAAD,uBACiB,2BAAI2F,EAAWpP,QADhC,gEAGEiG,EACF,kBAAC,MAAD,MAEA,kBAAC,EAAAwD,KAAD,qBACe,2BAAIsE,EAAM1N,MADzB,gEA5BN,IAkCE,kBAAC,EAAA2P,SAAD,CACEC,UAAWX,EACXnL,SAAU,kBAAMoL,GAAYD,IAC5B9K,MAAM,kDACN1E,GAAG,yBAMXoP,GAAiBhH,aAAe,CAC9BmH,aAAa,EACbtB,MAAO,GACPqB,WAAY,GACZnJ,WAAW,EACXiK,UAAWpB,GAAAA,EAAAA,QAGbI,GAAiB9M,UAAY,CAC3BiN,YAAahN,IAAAA,KACb8M,aAAc9M,IAAAA,KAAAA,WACd+L,WAAY/L,IAAAA,KAAAA,WACZkJ,WAAYlJ,IAAAA,KACZ6D,WAAY7D,IAAAA,MAAgB,CAC1BnC,MAAOmC,IAAAA,OAAAA,aACNqC,WACHtE,QAASiC,IAAAA,MAAgB,CACvBhC,KAAMgC,IAAAA,SACLqC,WACHuB,UAAW5D,IAAAA,KACX0L,MAAO1L,IAAAA,OACP+M,WAAY/M,IAAAA,MACZyL,YAAazL,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd+J,SAAU/J,IAAAA,OAAAA,WACViK,OAAQjK,IAAAA,OACR2M,KAAM3M,IAAAA,WAGVwL,YAAaxL,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACd+J,SAAU/J,IAAAA,OAAAA,WACViK,OAAQjK,IAAAA,OACR2M,KAAM3M,IAAAA,YAmBZ,UAAe+F,EAAAA,EAAAA,UAdS,SAAC,GAAD,IAAmBQ,EAAnB,EAAGC,aAAgBD,cAAnB,MAA0C,CAChEmF,MAAOnF,EACP3C,WAAY2C,EAAcI,WAGD,SAACT,GAAD,OACzB0G,EAAAA,GAAAA,oBACE,CACEb,WAAAA,EAAAA,GACAe,aAAAA,EAAAA,IAEF5G,KAGJ,CAA4D2G,I,mDCxItDiB,GAAyB,SAAC,GAAa,IAAX5K,EAAW,EAAXA,KAChC,GAA8CzB,EAAAA,EAAAA,WAAS,GAAvD,eAAOsM,EAAP,KAAyBC,EAAzB,KACMC,GAAiB7J,EAAAA,EAAAA,QAAO,MAE9B,OACE,0BAAM8J,IAAKD,EAAgB5J,IAAG,UAAKnB,EAAL,YAAqBzF,GAAG,yBACpD,kBAAC,EAAA0Q,QAAD,CACEC,OAAO,MACPC,SAAS,QACTC,UAAWP,EACXQ,YAAa,kBAAMP,GAAkB,IACrCQ,oBAAkB,EAClBC,YAAY,wFACZC,SAAUT,EAAexJ,SAEzB,kBAAC,MAAD,CACEgJ,QAAS,kBAAMO,GAAmBD,IAClCjO,UAAW6O,IAAAA,CAAW,4BAA6B,CAAE,cAAeZ,SAO9ED,GAAuB/N,UAAY,CACjCmD,KAAMlD,IAAAA,OAAAA,YAGD,IAAM6C,GAAa,SAACxE,EAAMuQ,GAA8B,IAAtBC,EAAsB,uDAAP,GACtD,OAAOxQ,EAAK2E,QACV,SAACC,EAAD,OAAQC,EAAR,EAAQA,KAAMlF,EAAd,EAAcA,KAAM8Q,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,eAAgBC,EAA/C,EAA+CA,SAA4BC,EAA3E,EAAyDC,iBAAzD,wBACKjM,GADL,CAEE,CACEC,KAAAA,EACA+L,kBAAAA,EACA7L,MAAO,CACL,kBAAC,EAAA8D,SAAD,CAAU7C,IAAKnB,GACb,yBAAKpD,UAAU,oBACb,kBAAC,EAAAqP,KAAD,CAAM9K,IAAG,UAAKnB,EAAL,SAAkBkM,GAAE,yBAAoBlM,IAC9ClF,GAEFiR,GAAqB,kBAACnB,GAAD,CAAwB5K,KAAMA,MAGxD4L,EACAC,EACA,kBAAC,EAAA7H,SAAD,CAAU7C,IAAG,UAAKnB,EAAL,cACX,kBAACmM,GAAA,EAAD,CAAYC,KAAMN,EAAUxO,MAAM+O,EAAAA,EAAAA,IAAcP,OAGpD3L,SAAUC,QAAQuL,GAAgBA,EAAatL,MAAK,SAACC,GAAD,OAASA,EAAIN,OAASA,WAG9E,KCxDEsM,GAAU,SAAC,GAAsE,IAAzD9J,EAAyD,EAApEF,QAAWE,KAAoBqE,EAAqC,EAAjD0F,SAAY1F,SAAY2F,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAChEC,EAAYF,EAASnM,MAAK,gBAAGvF,EAAH,EAAGA,KAAH,OAAc+L,EAAS8F,SAAS7R,MAGhE,OACE,kBAAC,EAAA8R,KAAD,CAAMhQ,UAAW6P,EAAW,yBAA2B,GAAII,UAAWH,EAAYA,EAAUI,SAAW,EAAGC,SAHrF,SAACC,EAAQC,GAAT,OAAsBzK,EAAKgK,EAASS,GAAUnS,QAIhE0R,EAAStK,KAAI,SAAC7G,GAAD,OACZ,kBAAC,EAAA6R,IAAD,CAAK1Q,MAAOnB,EAAKmB,MAAO2E,IAAK9F,EAAKyR,SAAUA,SAAUzR,EAAKyR,SAAUhS,KAAMO,EAAKP,YAMxFwR,GAAQzP,UAAY,CAClB0P,SAAUzP,IAAAA,MAAgB,CACxB+J,SAAU/J,IAAAA,OAAAA,aAEZwF,QAASxF,IAAAA,MAAgB,CACvB0F,KAAM1F,IAAAA,KAAAA,aAER0P,SAAU1P,IAAAA,MAAAA,WACV2P,SAAU3P,IAAAA,MAGZ,UAAeqQ,EAAAA,EAAAA,YAAWb,I,gBC3Bb3M,GAAa,SAACxE,EAAMiS,GAA8B,IAArBvN,EAAqB,uDAAP,GACtD,OAAO1E,EAAK2E,QACV,SAACC,EAAD,OAAmBsN,EAAnB,EAAQC,UAAqBtF,EAA7B,EAA6BA,SAAUuF,EAAvC,EAAuCA,MAAmBC,EAA1D,EAA8CC,WAAkCC,EAAhF,EAAqEC,UAArE,wBACK5N,GADL,CAEE,CACEC,KAAMgI,EACNA,SAAAA,EACA9H,MAAO,CACL,CACE1D,MAAO,kBAAC,EAAAoR,MAAD,CAAOC,MAAOR,GAAY,SAAUA,EAAW,SAAW,YACjEzP,MAAO,CACLzC,KAAM,CAAEkS,SAAAA,KAGZrF,EACAuF,EACAG,EACAF,GAEFrN,SAAUN,EAAYQ,MAAK,SAACC,GAAD,OAASA,EAAIN,OAASgI,UAGrD,KCdE8F,GAAkB,SAAC,GAUnB,IATOtL,EASP,EATJF,QAAWE,KAECxC,EAOR,EARJ2I,MACEG,OAAU9I,KAEZmD,EAKI,EALJA,gBACA4K,EAII,EAJJA,SACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,qBACAvT,EACI,EADJA,YAEA,GAA0C6D,EAAAA,EAAAA,UAAS,IAAnD,eAAO8F,EAAP,KAAsBC,EAAtB,KAoBMkB,EAAW,WACfrC,EAAgB,CACduD,QAAS,UACTlK,MAAO,gBAAF,OAAkB6H,EAAc5J,OAAS,EAAI,IAAM,GAAnD,aACLkM,aAAc,IACdC,aAAa,EACbtI,YAAa,gBAAF,OAAkB+F,EAAc5J,OAAS,EAAI,IAAM,GAAnD,yCAEb+H,EAAKuL,IAGP,OACE,kBAAC,EAAA7D,MAAD,CACE1N,MAAM,cACNkK,QAASyD,EAAAA,aAAAA,OACThD,QAAM,EACNiD,QAAS,CACP,kBAAC,EAAAC,OAAD,CAAQlJ,IAAI,UAAUY,OAAO,yBAAyBuI,WAAqC,IAAzBjG,EAAc5J,OAAciM,QAAQ,UAAU6D,QApCrG,WACf,IAAM2D,EAAW7J,EAAcnC,KAAI,SAAC6F,GAAD,MAAW,CAAEC,SAAUD,EAAK9I,UAC3DiP,EAASzT,OAAS,IACpB0I,EAAgB,CACduD,QAAS,OACTlK,MAAO,gBAAF,OAAkB0R,EAASzT,OAAS,EAAI,IAAM,GAA9C,aACLkM,aAAc,IACdC,aAAa,EACbtI,YAAa,gBAAF,OAAkB4P,EAASzT,OAAS,EAAI,IAAM,GAA9C,0BAEbuT,EAAkBhO,EAAMkO,GAAU/R,MAAK,WACrC8R,EAAqBjO,GACrBtF,EAAY,CAAEwC,SAAS,QAI3BsF,EAAKuL,KAoBD,gBAGA,kBAAC,EAAA1D,OAAD,CAAQ9P,GAAG,oBAAoBwH,OAAO,0BAA0BZ,IAAI,SAASuF,QAAQ,OAAO6D,QAAS/E,GAArG,WAIFiD,QAASjD,GAET,kBAAC,EAAA3G,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAkF,YAAD,KACE,kBAAC,KAAD,CAAY3F,YAAY,2FAG5B,kBAAC,EAAAS,UAAD,KACE,kBAAC,KAAD,CAAkBsF,cAAeA,EAAeC,iBAAkBA,EAAkBpH,SAAO,QAOrG4Q,GAAgBnL,aAAe,CAC7BwL,MAAO,GACP3E,WAAY,GACZuE,SAAU,UACV1J,cAAe,IAGjByJ,GAAgBjR,UAAY,CAC1ByF,QAASxF,IAAAA,MAAgB,CACvByF,OAAQzF,IAAAA,KAAAA,WACR0F,KAAM1F,IAAAA,OACLqC,WACH+I,SAAUpL,IAAAA,KAAAA,WACVqG,gBAAiBrG,IAAAA,KAAAA,WACjB8E,UAAW9E,IAAAA,KAAAA,WACXmR,qBAAsBnR,IAAAA,KAAAA,WACtB0M,WAAY1M,IAAAA,OACZqR,MAAOrR,IAAAA,MACPuH,cAAevH,IAAAA,MACf6L,MAAO7L,IAAAA,OACPiR,SAAUjR,IAAAA,OACVkR,kBAAmBlR,IAAAA,KAAAA,WACnBpC,YAAaoC,IAAAA,KAAAA,YAmBf,UAAeqQ,EAAAA,EAAAA,aAAWtK,EAAAA,EAAAA,UAhBF,SAAC,GAAD,MAAsC,CAC5DnC,UADsB,EAAG4C,aAAgB5C,cAIhB,SAACsC,GAAD,OACzB0G,EAAAA,GAAAA,oBACE,CACEvG,gBAAAA,EAAAA,GACA+E,SAAAA,EAAAA,GACA8F,kBAAAA,EAAAA,GACAC,qBAAAA,EAAAA,GACAvT,YAAAA,EAAAA,IAEFsI,KAGsBH,CAA6CiL,K,gnBC5GvE,IAAM7M,GAAU,CACd,CAAEzE,MAAO,SAAU4E,WAAY,CAACgN,EAAAA,SAChC,CAAE5R,MAAO,YACT,CAAEA,MAAO,SACT,CAAEA,MAAO,aACT,CAAEA,MAAO,eAGL6R,GAAW,SAAC,GAAD,QAAG/K,aAAgB5D,EAAnB,EAAmBA,OAAQ2D,EAA3B,EAA2BA,cAA3B,MAAkD,CACjEiL,WAAYjL,EAAckL,QAAQpT,KAClCwF,WAAY0C,EAAckL,QAAQxL,KAClCyL,aAAc9O,EAAO+O,SACrBpU,UAAWgJ,EAAcvI,KACzBkR,iBAAkB3I,EAAc2I,iBAChCtL,UAAW2C,EAAckL,QAAQ7N,YAG7BgO,GAAkB,SAAC5T,EAAM0N,EAAOmG,GAAd,OACtBA,EACE,oCACQ,yCAAQ7T,IADhB,wDACgF,qCAAO0N,IADvF,WAIA,2BACE,qCAAO1N,IADT,gDACiE,yCAAQ0N,IADzE,YAmKJ,SA9JwB,WACtB,OAAsCjK,EAAAA,EAAAA,UAAS,IAA/C,eAAOwC,EAAP,KAAoBC,EAApB,KACA,GAAoDzC,EAAAA,EAAAA,UAAS,IAA7D,eAAOqQ,EAAP,KAA2BC,EAA3B,KACA,GAA8CtQ,EAAAA,EAAAA,WAAS,GAAvD,eAAOuQ,EAAP,KAAwBC,EAAxB,KACA,GAA0CxQ,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAOyQ,EAAP,KAAsBC,EAAtB,KACA,GAAoC1Q,EAAAA,EAAAA,UAAS,IAA7C,eAAO2Q,EAAP,KAAmBC,EAAnB,KAEQnP,GAASoP,EAAAA,EAAAA,aAATpP,KACR,GAAyFqP,EAAAA,EAAAA,aAAYhB,GAAUiB,EAAAA,cAAvGhB,EAAR,EAAQA,WAAY3N,EAApB,EAAoBA,WAAYtG,EAAhC,EAAgCA,UAAWmU,EAA3C,EAA2CA,aAAc9N,EAAzD,EAAyDA,UAAWsL,EAApE,EAAoEA,iBAE9DhJ,GAAWiD,EAAAA,EAAAA,eAEXrE,EAAY,SAAC2N,GAAoC,IAAzBC,EAAyB,uDAAf7O,EACtCqC,GAASiL,EAAAA,EAAAA,IAAqBjO,EAAMuP,EAAWC,MAGjDvT,EAAAA,EAAAA,YAAU,WACR2F,MACC,IAEH,IAIM6N,EAAgB,SAACC,GACrB,OAAO1M,GAAS2M,EAAAA,EAAAA,IAAuB3P,EAAM0P,IAAYvT,MAAK,WAC5D0S,EAAsB,IACtBjN,OAAUpH,EAAD,GAAC,MAAgBmG,GAAjB,IAA6B/F,OAAQ,KAC9CoI,GAAStI,EAAAA,EAAAA,IAAY,CAAEwC,SAAS,SA+B9BoF,GAAU4D,EAAAA,EAAAA,cA6ChB,OACE,kBAAC,EAAAlC,SAAD,KACE,kBAAC4L,GAAA,EAAD,CACEnT,KAAMyS,EAAWzS,KACjBD,MAAO0S,EAAW1S,MAClBqT,mBAAoBX,EAAWW,mBAC/B1I,OAAQ2H,EACRrG,QAAS,kBAAMsG,GAAmB,IAClClH,SAAU,WACRkH,GAAmB,GACnBC,OAGJ,kBAACc,GAAA,EAAD,CAASxS,KAAK,UAAU/C,GAAI,kBACzByR,EACC,kBAAC,EAAAxH,KAAD,KACE,kBAAC,EAAAuL,SAAD,KACE,kBAAC,EAAA3T,SAAD,KACE,kBAAC,EAAA6H,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,IAAjB,iEAMR,kBAAC,IAAD,CACE1J,MAAOmT,GAAc,IAAIpM,KAAI,SAAC6F,GAAD,UAAC,MAAeA,GAAhB,IAAsB/H,KAAM+H,EAAKC,cAC9DxG,aAAcgN,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aACrErQ,WAAYA,GACZsB,QAASA,GACTgP,OApFK,kBACb,kBAAC,EAAAjM,SAAD,KACE,kBAAC,EAAAkM,MAAD,CACEC,KAAMrJ,GAAAA,EAAAA,qBACNsJ,OAAQ,SAACC,GAAD,OAAU,kBAAC,IAAD,QAAiBzO,UAAWA,EAAWmM,SAAQ,yBAAoB/N,EAApB,aAAwCqQ,SAiFrGC,eAvGa,kBACnB9B,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aAErD,CACE,CACExT,MAAO,SACP+N,QAAS,SAACyC,EAAQuD,EAAQC,GACxBvB,GAAiB,kBAAM,kBAAMQ,EAAc,CAACe,EAAUxI,SAASxL,YAC/D2S,EAAc,CACZ3S,MAAO,iBACPC,KAAMiS,GAAgB8B,EAAUxI,SAASxL,MAAOnC,GAAW,GAC3DwV,mBAAoB,kBAEtBd,GAAmB,MAXzB,MAsGIpN,kBAAkB,WAClBQ,YAAY,UACZC,cAAc,SACdL,OAAO,gBACPpB,WAAYA,EACZI,YAAaA,EACba,UAAW,gBAAGjH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAQE,EAAlB,EAAkBA,KAAlB,OAA6B8G,EAAU9G,EAAM,CAAEH,MAAAA,EAAOC,OAAAA,KACjEoG,eAAgB,gBAAGlG,EAAH,EAAGA,KAAH,OAAckG,EAAelG,IAC7C+E,YAAa+O,EACblO,UAAWA,EACX+P,WAAYC,GAAAA,EACZ1O,gBA/HmB,SAACC,GAC5B4M,GAAsB,SAACP,GAAD,OAAgBrM,EAAaqM,OA+H3CqC,eAvFa,yBACjBnC,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aACvD,CACE,kBAAC,EAAA/D,KAAD,CAAMC,GAAE,yBAAoBlM,EAApB,wBAAgDmB,IAAI,oBAAoBvE,UAAU,oBACxF,kBAAC,EAAAyN,OAAD,CAAQ3D,QAAQ,UAAU,aAAW,cAArC,eAIF,CACEzH,MAAO,aACPrB,MAAO,CACLhB,UAAW,oBAEb2N,QAAS,WACPjI,EAAQE,KAAR,yBAA+BxC,EAA/B,2BAGJ,CACEf,MAAO,SACPrB,MAAO,CACL0M,YAAasE,IAAuBA,EAAmBnU,OAAS,EAChEiM,QAAS,UAEX6D,QAAS,WACP,IAAMqG,EAA0BhC,EAAmBnU,OAAS,EACtDoW,EAAaD,EAA0B,kBAAoB,iBACjE3B,GAAiB,kBAAM,kBAAMQ,EAAcb,EAAmB1M,KAAI,SAAC6F,GAAD,OAAUA,EAAK/H,aACjFmP,EAAc,CACZ3S,MAAOqU,EACPhB,mBAAoBgB,EACpBpU,KAAMiS,GACJkC,EAA0BhC,EAAmBnU,OAASmU,EAAmB,GAAG5O,KAC5E3F,EACAuW,KAGJ7B,GAAmB,MAIzB,KAgDI+B,WAAY,CAAEtU,MAAO,qCAAsC8B,YAAa,CAAC,uCAAwC,KACjH+D,QAAQ,qBC5LpB,IAAM0O,GAAqB,SAAC,GAAkC,IAAhC5J,EAAgC,EAAhCA,OAAQsB,EAAwB,EAAxBA,QAASZ,EAAe,EAAfA,SAC7C,OACE,kBAAC+H,GAAA,EAAD,CACEnT,KACE,kBAAC,EAAAwH,YAAD,KACE,kBAAC,EAAAC,KAAD,0BACoB,6CADpB,4GAEY,oDAFZ,MAMJ1H,MAAO,UACPwU,cAAY,EACZ7J,OAAQA,EACR0I,mBAAoB,WACpBpH,QAASA,EACTZ,SAAUA,KAKhBkJ,GAAmBlU,UAAY,CAC7BgL,SAAU/K,IAAAA,KACV2L,QAAS3L,IAAAA,KACTqK,OAAQrK,IAAAA,MAGV,YCzBA,IAAMmU,GAAgB,SAAC,GAiBjB,IAhBOzO,EAgBP,EAhBJF,QAAWE,KAECxC,EAcR,EAfJ2I,MACEG,OAAU9I,KAEZY,EAYI,EAZJA,cACAE,EAWI,EAXJA,iBACAtE,EAUI,EAVJA,MACAuR,EASI,EATJA,SACAmD,EAQI,EARJA,gBACApW,EAOI,EAPJA,KACAqW,EAMI,EANJA,UACAC,EAKI,EALJA,UACAjO,EAII,EAJJA,gBACAkO,EAGI,EAHJA,sBACAC,EAEI,EAFJA,mBACAzI,EACI,EADJA,WAEA,GAAgDtK,EAAAA,EAAAA,WAAS,GAAzD,eAAOgT,EAAP,KAAyBC,EAAzB,KAEMhM,EAAW,WACf1E,GAAoBA,EAAiB,IACrCqC,EAAgB,CACduD,QAAS,UACTlK,MAAO,wBACPmK,aAAc,IACdC,aAAa,EACbtI,YAAa,oDAEfkE,EAAKuL,IAGDlG,EAAW,WACf,IAAM4J,EAAY7Q,EAAcsB,KAAI,SAAC4C,GAAD,OAAUA,EAAK9E,QASnD,OARAkR,EAAgBlR,EAAMyR,GAAW,WAC/BH,IACAzI,OAEEsI,IAAcC,GAChBC,GAAsB,GAGjB7O,EAAKuL,IAGd,OAAOoD,IAAcC,GAAaG,EAChC,kBAAC,GAAD,CAAoBpK,OAAQoK,EAAkB9I,QAASjD,EAAUqC,SAAUA,IAE3E,kBAAC,EAAAqC,MAAD,CACE1N,MAAM,qBACNkK,QAASyD,EAAAA,aAAAA,OACThD,QAAM,EACNsB,QAAS,WACPjD,IACAgM,GAAoB,IAEtBpH,QAAS,CACP,kBAAC,EAAAC,OAAD,CACE,aAAW,OACXtI,OAAO,sBACP2E,QAAQ,UACRvF,IAAI,UACJmJ,WAAqC,IAAzB1J,EAAcnG,OAC1B8P,QAAS,WACPiH,GAAoB,KAClBL,GAAaC,IAAcvJ,MARjC,gBAaA,kBAAC,EAAAwC,OAAD,CAAQ,aAAW,SAAStI,OAAO,0BAA0B2E,QAAQ,OAAOvF,IAAI,SAASoJ,QAAS/E,GAAlG,YAKF,kBAAC,EAAA3G,MAAD,CAAOC,WAAS,GACbtC,GACC,kBAAC,EAAAuC,UAAD,KACE,kBAAC,EAAArC,MAAD,CAAOC,aAAa,KAAKL,KAAK,MAC3BE,IAIP,kBAAC,EAAAuC,UAAD,KACE,kBAAC,EAAAkF,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMlH,UAAW6H,EAAAA,aAAAA,GAAjB,iFACgF,+BAAK/J,GADrF,OAKJ,kBAAC,EAAAiE,UAAD,KACE,kBAAC,EAAAyF,KAAD,KACE,kBAACpB,GAAD,CAAmBxC,cAAeA,EAAeE,iBAAkBA,SAQ/EmQ,GAAcpU,UAAY,CACxByF,QAASxF,IAAAA,MAAgB,CACvB0F,KAAM1F,IAAAA,IACNyF,OAAQzF,IAAAA,KAAAA,aACPqC,WACHwJ,MAAO7L,IAAAA,MAAgB,CACrBgM,OAAQhM,IAAAA,OAAAA,aACPqC,WACHyB,cAAe9D,IAAAA,MACfgE,iBAAkBhE,IAAAA,KAClBoU,gBAAiBpU,IAAAA,KACjBiR,SAAUjR,IAAAA,OACVN,MAAOM,IAAAA,OACPhC,KAAMgC,IAAAA,OACNqU,UAAWrU,IAAAA,KACXsU,UAAWtU,IAAAA,KACXqG,gBAAiBrG,IAAAA,KACjBuU,sBAAuBvU,IAAAA,KACvBwU,mBAAoBxU,IAAAA,KACpB+L,WAAY/L,IAAAA,MAGd,YC5HA,IAAM4U,GAAc,SAAC,GAAyF,IAAvFlV,EAAuF,EAAvFA,MAAOC,EAAgF,EAAhFA,KAAMgM,EAA0E,EAA1EA,QAASZ,EAAiE,EAAjEA,SAAUV,EAAuD,EAAvDA,OAAQ0I,EAA+C,EAA/CA,mBAAoBsB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAC5F,GAAgD7S,EAAAA,EAAAA,WAAS,GAAzD,eAAOgT,EAAP,KAAyBC,EAAzB,KAEA,OAAOL,IAAcC,GAAaG,EAChC,kBAAC,GAAD,CACEpK,OAAQoK,GAAoBpK,EAC5BsB,QAAS,WACPA,IACA+I,GAAoB,IAEtB3J,SAAU,WACRA,OAIJ,kBAAC+H,GAAA,EAAD,CACEnT,KAAMA,EACND,MAAOA,EACP2K,OAAQA,EACR0I,mBAAoBA,EACpBpH,QAAS,WACPA,KAEFZ,SAAU,WACR2J,GAAoB,KAClBL,GAAaC,IAAcvJ,QAMrC6J,GAAY7U,UAAY,CACtBJ,KAAMK,IAAAA,KACNN,MAAOM,IAAAA,KACP+S,mBAAoB/S,IAAAA,OACpB+K,SAAU/K,IAAAA,KACV2L,QAAS3L,IAAAA,KACTqK,OAAQrK,IAAAA,KACRqU,UAAWrU,IAAAA,KACXsU,UAAWtU,IAAAA,MAGb4U,GAAY/O,aAAe,CACzBwO,WAAW,EACXC,WAAW,GAGb,Y,ykBCnCA,IAAMnQ,GAAU,CAAC,CAAEzE,MAAO,OAAQ8E,QAAS,QAAU,CAAE9E,MAAO,eAAiB,CAAEA,MAAO,kBAElFmD,GAAa,SAACgS,EAAWxW,EAAMyE,GAA+B,IAArBC,EAAqB,uDAAP,GAC3D,OAAO1E,EACHA,EAAK2E,QACH,SAACC,EAAD,OAAQC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,aAAcnF,EAA5B,EAA4BA,KAAMwD,EAAlC,EAAkCA,YAAawN,EAA/C,EAA+CA,SAA/C,wBACK/L,GADL,CAEE,CACEC,KAAAA,EACAxD,MAAOyD,GAAgBnF,EACvBoF,MAAO,CACL,kBAAC,EAAA8D,SAAD,CAAU7C,IAAG,UAAKnB,EAAL,UACX,kBAAC,EAAAiM,KAAD,CAAMC,GAAE,yBAAoByF,EAApB,yBAA8C3R,IAASC,GAAgBnF,IAEjFwD,EACA,kBAAC,EAAA0F,SAAD,CAAU7C,IAAG,UAAKnB,EAAL,cACX,kBAACmM,GAAA,EAAD,CAAYC,KAAMN,EAAUxO,MAAM+O,EAAAA,EAAAA,IAAcP,OAGpD3L,SAAUC,QAAQP,GAAeA,EAAYQ,MAAK,SAACC,GAAD,OAASA,EAAIN,OAASA,WAG5E,IAEF,IAGA4R,GAAiB,SAAC9W,GAEtB,OAAOA,EAAK+W,cAAclF,SAAS,kBAAoB,sBAAwB,mBAiB3EmF,GAAa,SAAC,GAmBd,IAlBJtR,EAkBI,EAlBJA,MACAuR,EAiBI,EAjBJA,YACAxO,EAgBI,EAhBJA,SACA+N,EAeI,EAfJA,mBACA5Q,EAcI,EAdJA,UACAC,EAaI,EAbJA,WAEYX,EAWR,EAZJ2I,MACEG,OAAU9I,KAEZwO,EASI,EATJA,aACA1T,EAQI,EARJA,KACAqW,EAOI,EAPJA,UACAC,EAMI,EANJA,UACAC,EAKI,EALJA,sBACA1N,EAII,EAJJA,sBACAqO,EAGI,EAHJA,gBACA7O,EAEI,EAFJA,gBACA8O,EACI,EADJA,YAEA,GAAgD1T,EAAAA,EAAAA,UAAS,IAAzD,eAAO2T,EAAP,KAAyBC,EAAzB,KACA,GAAsC5T,EAAAA,EAAAA,UAAS,IAA/C,eAAOwC,EAAP,KAAoBC,EAApB,KACA,GAA0CzC,EAAAA,EAAAA,UAAS,IAAnD,eAAOqC,EAAP,KAAsBE,EAAtB,KACA,GAAgDvC,EAAAA,EAAAA,UAAS,IAAzD,eAAO6T,EAAP,KAAyBC,EAAzB,KACA,GAA8C9T,EAAAA,EAAAA,WAAS,GAAvD,eAAOuQ,EAAP,KAAwBC,EAAxB,KACA,GAA0CxQ,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAOyQ,EAAP,KAAsBC,EAAtB,KACA,GAAoC1Q,EAAAA,EAAAA,UAAS,IAA7C,eAAO2Q,EAAP,KAAmBC,EAAnB,MAEAlT,EAAAA,EAAAA,YAAU,WACRqV,EAAmB3Q,EAAnB2Q,CAA+BtR,KAC9B,KAEH/D,EAAAA,EAAAA,YAAU,WACR0H,EAAsB3D,KACrB,CAACQ,IAEJ,IAMMkO,EAAkB,SAAC5T,EAAMgK,EAAM6J,GAAb,OACtB,6CACiB,2BAAI7T,GADrB,uCACmE6T,EAAS,QAAU,MACpF,+BAAK7J,GAFP,QAEsB6J,EAAS,IAAM,GAFrC,MAiDIrM,IAAU4D,EAAAA,EAAAA,cAuDhB,OACE,kBAAC,aAAD,KACE,kBAAC,GAAD,CACEzJ,KAAMyS,EAAWzS,KACjBD,MAAO0S,EAAW1S,MAClB2K,OAAQ2H,EACRsC,UAAWA,EACXD,UAAWA,EACXtB,mBAAoBX,EAAWW,mBAC/BpH,QAAS,kBAAMsG,GAAmB,IAClClH,SAAU,WACRkH,GAAmB,GACnBC,IACAlO,EAAiB,IACjBuQ,EAAsBF,IAAcC,MAIxC,kBAACtB,GAAA,EAAD,CAASxS,KAAK,UAAU/C,GAAI,aAC1B,kBAAC,IAAD,CACE0G,QAASA,GACTO,aAAcgN,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aACrErQ,WAAY,sCAAI/B,EAAJ,yBAAIA,EAAJ,uBAAc+B,GAAU,WAAV,GAAWK,GAAX,OAAoBpC,KAC9CzC,KAAMqF,EACNO,YAAaA,EACba,UAAW,SAACC,GACVyP,EAAmBzP,EAAnByP,CAA2BtR,IAE7BgB,eAAgB,YAA2B,IAAxBlG,EAAwB,EAAxBA,KAAMwD,EAAkB,EAAlBA,iBACP,IAATxD,GAAwBkG,EAAelG,QACvB,IAAhBwD,GAA+B6T,EAAoB7T,IAE5DoC,UAAWA,EACXC,WAAYA,EACZd,YAAae,EACboB,gBAlJgB,SAACC,GACvBnB,GAAiB,SAACN,GAChB,OAAOyB,EAAazB,GAAO0B,KAAI,gBAAGlC,EAAH,EAAGA,KAAMlF,EAAT,EAASA,KAAT,MAA4B,CAAEkF,KAAAA,EAAMf,MAApC,EAAeA,OAAqCnE,UAiJ/EqH,YAAY,QACZC,cAAc,OACduO,eA3Fe,yBACjBnC,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aACvD,CACE,kBAAC,EAAA/D,KAAD,CACErP,UAAS,kDAA6CoV,GAAmB,aACzE9F,GAAE,yBAAoBlM,EAApB,oBACFmB,IAAI,iBAlHOmJ,EAoHI0H,EApHQjQ,EAoHS6P,GAAe9W,GAAQ,IAnH3DwX,EACJ,kBAAC,EAAAjI,OAAD,CAAQtI,OAAQA,EAAQ2E,QAAQ,UAAU9J,UAAU,mBAAmB,aAAW,WAAW2V,eAAgBjI,GAA7G,YAKKA,EACL,kBAAC,EAAAkI,QAAD,CAASC,QAAQ,4DAA4DH,GAE7EA,IA4GM,CACErT,MAAO,WACPrB,MAAO,CACL0M,WAAY0H,EACZpV,UAAW,oBAEb2N,QAAS,WACPjI,GAAQE,KAAR,yBAA+BxC,EAA/B,uBAGJ,CACEf,MAAO,SACPrB,MAAO,CACL0M,YAAa1J,IAAkBA,EAAcnG,OAAS,EACtDiM,QAAS,UAEX6D,QAAS,WACP,IAAMmI,EAAwB9R,EAAcnG,OAAS,EACrDwU,GACE,kBAAM,kBACJ8C,EACE/R,EACAY,EAAcsB,KAAI,SAAC4C,GAAD,OAAUA,EAAK9E,SACjC,kBAAMsR,EAAmB,SAAK3Q,GAAN,IAAkB/F,OAAQ,IAA5C0W,CAAiDtR,UAG7DmP,EAAc,CACZ3S,MAAOkW,EAAwB,gBAAkB,eACjD7C,mBAAoBjP,EAAcnG,OAAS,EAAI,eAAiB,cAChEgC,KAAMiS,EACJ5T,EACA4X,EAAwB9R,EAAcnG,OAAS+F,EAAMH,MAAK,SAACyE,GAAD,OAAUA,EAAK9E,OAASY,EAAc,GAAGZ,QAAMlF,KACzG4X,KAIJ3D,GAAmB,MAIzB,IA9Jc,IAACzE,EAAYvI,EAC3BuQ,GAuMEhC,eAzIe,yBACjB9B,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aACvD,CACE,CACExT,MAAO,SACP+N,QAAS,SAACyC,EAAQuD,EAAQzL,GACxBmK,GAAiB,kBAAM,kBAAM8C,EAAY/R,EAAM,CAAC8E,EAAK9E,OAAO,kBAAMsR,EAAmB,SAAK3Q,GAAN,IAAkB/F,OAAQ,IAA5C0W,CAAiDtR,UACnHmP,EAAc,CACZ3S,MAAO,eACPqT,mBAAoB,cACpBpT,KAAMiS,EAAgB5T,EAAMgK,EAAKtI,OAAO,KAE1CuS,GAAmB,MAIzB,KA0HEkB,OAvHO,kBACb,kBAAC,EAAAjM,SAAD,KACE,kBAAC,EAAAkM,MAAD,CACEC,KAAMrJ,GAAAA,EAAAA,mBACNsJ,OAAQ,SAACC,GAAD,OACN,kBAAC,IAAD,QACExH,WAAY,kBAAMoJ,EAAYjS,IAC9BsR,mBAAoB,kBAAMA,EAAmB,SAAK3Q,GAAN,IAAkB/F,OAAQ,IAA5C0W,CAAiDtR,IAC3EY,cAAewR,EACftR,iBAAkBuR,EAClBtE,SAAQ,yBAAoB/N,EAApB,UACRkR,gBAAiB3N,EACjBzI,KAAMA,EACNqW,UAAWA,EACXC,UAAWA,EACXjO,gBAAiBA,EACjBkO,sBAAuBA,GACnBhB,SAuGNtO,OAAO,cACP+O,WAAY,CAAEtU,MAAO,mCAAoC8B,YAAa,CAAC,uCAAwC,KAC/GzD,QAAS,CACP,CAAEsG,IAAK,OAAQ3F,MAAOuF,GACtB,CAAEI,IAAK,cAAe3F,MAAO0W,IAE/B7P,QAAQ,mBAOZsQ,GAAgB,SAACC,EAAOC,GAE5B,OADAD,EAAM7J,QAAQ5M,KAAK0W,GACZD,GA6BTd,GAAWjV,UAAY,CACrByF,QAASxF,IAAAA,MAAgB,CACvByF,OAAQzF,IAAAA,KAAAA,WACR0F,KAAM1F,IAAAA,KAAAA,aAER0D,MAAO1D,IAAAA,MACP4D,UAAW5D,IAAAA,KACX2F,aAAc3F,IAAAA,OACdwU,mBAAoBxU,IAAAA,KAAAA,WACpB6G,sBAAuB7G,IAAAA,KAAAA,WACvB8D,cAAe9D,IAAAA,MACfyG,SAAUzG,IAAAA,KACVhC,KAAMgC,IAAAA,OACNiV,YAAajV,IAAAA,KACb6D,WAAY7D,IAAAA,MAAgB,CAC1BnC,MAAOmC,IAAAA,OAAAA,WACPlC,OAAQkC,IAAAA,OAAAA,WACR4F,MAAO5F,IAAAA,SAET6L,MAAO7L,IAAAA,MAAgB,CACrBgM,OAAQhM,IAAAA,OAAAA,aACPqC,WACHqP,aAAc1R,IAAAA,MAAgB,CAC5BiL,KAAMjL,IAAAA,MAAgB,CACpBkT,aAAclT,IAAAA,SAGlBqU,UAAWrU,IAAAA,KACXsU,UAAWtU,IAAAA,KACXuU,sBAAuBvU,IAAAA,KACvBkV,gBAAiBlV,IAAAA,KAAAA,WACjBqG,gBAAiBrG,IAAAA,KACjBmV,YAAanV,IAAAA,MAGfgV,GAAWnP,aAAe,CACxBnC,MAAO,GACPG,WAAYiC,EAAAA,GACZhC,cAAe,GACf4N,aAAc,IAGhB,UAAe3L,EAAAA,EAAAA,UApES,SAAC,GAAgD,QAA9CS,aAAgBD,EAA8B,EAA9BA,cAAe3D,EAAe,EAAfA,OAClDc,EAAQ6C,EAAc7C,MAE5B,MAAO,CACLA,MAAAA,EACAG,WAAY0C,EAAc1C,YAAd,SAAiC6C,EAAAA,IAAjC,IAAkDd,MAAOlC,GAASA,EAAM/F,SACpFiG,WAAY2C,EAAcI,OAC1B+K,aAAc9O,EAAO+O,SACrB3T,KAAMuI,EAAcvI,KACpBqW,UAAW9N,EAAc2I,iBACzBoF,WAAY/N,EAAcyP,OAC1Bd,kBAAmB3O,EAAcE,SAAS5C,YAAc0C,EAAcE,SAAS5C,WAAW+B,MAAQ,OAI3E,SAACM,GAC1B,MAAO,CACLO,SAAU,SAACG,EAASlD,EAAOqS,GAAjB,OAA8B7P,EAAS2P,IAAczB,EAAAA,EAAAA,IAAgBxN,EAASlD,GAAQqS,KAChGd,YAAa,SAACrO,EAASlD,EAAOqS,GAAjB,OAA8B7P,EAAS2P,IAAcI,EAAAA,EAAAA,IAAqBrP,EAASlD,GAAQqS,KACxGvB,mBAAoB,SAACzP,GAAD,OAAY,SAAC6B,EAAS8L,GAAV,OAAsBxM,GAASsO,EAAAA,EAAAA,IAAmB5N,EAAS7B,EAAQ2N,MACnG7L,sBAAuB,SAACD,GAAD,OAAaV,GAASW,EAAAA,EAAAA,IAAsBD,EAAS,GAAI,MAChFP,gBAAiB,kBAAcH,EAASG,EAAAA,GAAAA,WAAA,eACxC8O,YAAa,SAAChP,GAAD,OAAcD,GAAS6F,EAAAA,EAAAA,IAAW5F,QA8CnD,CAA4D6O,I,inBC5T5D,IAAMkB,GAAQ,SAAC,GAQT,IANQhT,EAMR,EAPJ2I,MACEG,OAAU9I,KAEZwI,EAII,EAJJA,MACAK,EAGI,EAHJA,WACAoK,EAEI,EAFJA,WACAC,EACI,EADJA,SAEM1G,EAAW,CACf,CAAEM,SAAU,EAAGtQ,MAAO,QAAS1B,KAAM,kBAAF,OAAoBkF,EAApB,WACnC,CAAE8M,SAAU,EAAGtQ,MAAO,UAAW1B,KAAM,kBAAF,OAAoBkF,EAApB,cAGvC,GAA0CzB,EAAAA,EAAAA,WAAS,GAAnD,eAAO4U,EAAP,KAAuBC,EAAvB,KACA,GAAsE7U,EAAAA,EAAAA,WAAS,GAA/E,eAAO8U,EAAP,KAAoCC,EAApC,KAEMhR,GAAU4D,EAAAA,EAAAA,cAEhB,GAA6CmJ,EAAAA,EAAAA,cAC3C,oBAAG/L,aAAgB5D,EAAnB,EAAmBA,OAAQ1E,EAA3B,EAA2BA,MAA3B,MAA0C,CACxC2F,WAAYjB,EAAOiB,YAAcjB,EAAOqD,KACxClI,QAAS6E,EAAO7E,QAChB0Y,YAAavY,IAAUwY,EAAAA,MAEzBlE,EAAAA,cANM3O,EAAR,EAAQA,WAAY9F,EAApB,EAAoBA,QAAS0Y,EAA7B,EAA6BA,YASvBE,EAAkB,iBAAM,CAC5B,CACEjX,MAAO,SACP0P,IAAIwH,EAAAA,EAAAA,IAAanK,GAAAA,EAAAA,OAAkB5I,EAAY9F,IAEjD0Y,EAAc,CAAE/W,MAAOyW,OAAazY,EAAYgO,EAAM1N,KAAMuS,UAAU,GAAS,CAAE7Q,MAAO,gBAAiB6Q,UAAU,KAG/GzL,EAAY,SAACqB,GACjB4F,EAAW5F,IAGPD,GAAWiD,EAAAA,EAAAA,eACXsG,GAAWoH,EAAAA,EAAAA,gBAEjB1X,EAAAA,EAAAA,YAAU,WAGR,OAFA2F,EAAU5B,GACV4T,SAASC,OAAOC,YAAY9T,GACrB,kBAAM4T,SAASC,OAAOC,iBAAYtZ,MACxC,IAEH,IAAiCM,EAmB3BiZ,EAAgB,CACpB,kBAAC,EAAAC,aAAD,CACEhX,UACE,kBAAC,EAAAiP,KAAD,CACE1B,QAAS,kBAAM6I,GAAgB,IAC/BlH,IAAKK,EAAS1F,SAAS8F,SAAS,WAAapD,GAAAA,EAAAA,6BAAyCA,GAAAA,EAAAA,4BAAsC0K,QAC1H,QACAjU,IAJJ,QAUFmB,IAAI,eAEN,kBAAC,EAAA6S,aAAD,CACEhX,UACE,kBAAC,EAAAiP,KAAD,CACE1B,QAAS,kBAAM2I,EAASlT,IACxBkM,GAAI,kBACDK,EAAS1F,SAAS8F,SAAS,WAAapD,GAAAA,EAAAA,+BAA2CA,GAAAA,EAAAA,8BAAwC0K,QAC1H,QACAjU,KALN,UAYFpD,UAAU,uBACVuE,IAAI,kBAIR,OACE,kBAAC,EAAA6C,SAAD,KACGuP,EACC,kBAAC,EAAAvP,SAAD,KACE,kBAAC,KAAD,CAAYkQ,YAAaT,KACvB,kBAAC,EAAAU,MAAD,CAAOrV,WAAS,GACd,kBAAC,EAAAsV,UAAD,CAAWC,UAAQ,GACjB,kBAAC,KAAD,CACE7X,OACGyW,GAAczK,EACb,kBAAC,EAAAxE,SAAD,KAAWwE,EAAMwD,mBAAqBxD,EAAMsK,QA/D/BhY,EA+DgE0N,EAAM1N,KA9DrG,yBAAKwZ,MAAO,CAAEC,QAAS,gBACpBzZ,EACD,yBAAK8B,UAAU,cACb,kBAAC,EAAAqO,QAAD,CACE,aAAW,qBACXM,YACE,6DAC+B,6CAD/B,4GAEsB,oDAFtB,MAMF,kBAAC,MAAD,CAAgB3O,UAAU,qCAkD6E4L,EAAM1N,WAC/FN,EAEN8D,aAAc2U,GAAczK,EAAQA,EAAMlK,iBAAc9D,KAG5D,kBAAC,EAAA4Z,UAAD,KACG5L,EAAMwD,iBAAmB,KACxB,kBAAC,EAAAwI,SAAD,CACEzS,OAAO,+BACP0S,OAAQ,kBAAC,EAAAC,YAAD,CAAaC,SAAU,SAACxN,GAAD,OAAYiM,EAAgBjM,IAAS5M,GAAG,2BACvE4M,OAAQgM,EACRyB,SAAO,EACPzJ,SAAS,QACT4I,cAAeA,MAKtBV,EACC,kBAAC,EAAAwB,MAAD,CACEnO,QAAQ,OACRoO,UAAQ,EACRtY,MAAM,mCACNuY,OAAQ,kBAAC,EAAAC,uBAAD,CAAwBvM,QAAS,kBAAM6K,GAA+B,MAC9E1W,UAAU,yBALZ,gCAO+B,6CAP/B,4GAQsB,oDARtB,KAUE,MAEN,kBAAC,GAAD,CAAS6P,UAAQ,EAACD,SAAUA,IAC5B,kBAAC,EAAA0D,MAAD,CACEC,KAAM,CAAC5G,GAAAA,EAAAA,6BAAwCA,GAAAA,EAAAA,gCAC/C6G,OAAQ,SAACxS,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEEoI,WAAY,WACVhD,GAAStI,EAAAA,EAAAA,IAAY,SAAKiG,GAAN,IAAkB/F,OAAQ,EAAGC,QAAAA,EAASqC,SAAS,OAErEoL,YAAW,uBAAkBtI,GAC7BuI,aAAamL,EAAAA,EAAAA,IAAanK,GAAAA,EAAAA,OAAD,GAAC,MAAuB5I,GAAxB,IAAoC/F,OAAQ,IAAKC,GAC1EiP,aAAW,EACXD,WAAY,CAACrB,SAInB,kBAAC,EAAA0H,MAAD,CACEC,KAAM,CAAC5G,GAAAA,EAAAA,2BAAsCA,GAAAA,EAAAA,8BAC7C6G,OAAQ,SAACxS,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEE4K,MAAOA,EACPF,YAAW,uBAAkBtI,GAC7BgG,WAAY,WACVpE,EAAU5B,UAKlB,kBAAC,EAAAkQ,MAAD,CACEC,KAAM5G,GAAAA,EAAAA,sBACN6G,OAAQ,SAACxS,GAAD,OAAW,kBAAC,IAAD,UAAgBA,EAAhB,CAAuByT,sBAAuBiC,QAEnE,kBAAC,EAAApD,MAAD,CAAOC,KAAM5G,GAAAA,EAAAA,wBAAmCvM,UAAWiY,KAC3D,kBAAC,EAAA/E,MAAD,CAAOE,OAAQ,kBAAM,kBAAC,EAAA8E,SAAD,CAAUhJ,GAAE,yBAAoBlM,EAApB,gBAC/BwI,GAAS,kBAAC,MAAD,OAGb,kBAAC,EAAAxE,SAAD,KACE,6BAASpH,UAAU,yCACjB,kBAAC,KAAoB6W,MAEvB,kBAAC,KAAD,CACEjX,MAAM,kBACN8B,YAAa,CAAC,iBAAD,OAAkB0B,EAAlB,qBACboK,QAAS,CACP,kBAAC,EAAAC,OAAD,CACElJ,IAAI,cACJvE,UAAU,aACVmF,OAAO,cACP2E,QAAQ,UACR,aAAW,wBACX6D,QAAS,kBAAMjI,EAAQC,WANzB,+BA+BdyQ,GAAMnW,UAAY,CAChB0P,SAAUzP,IAAAA,MAAgB,CACxB+J,SAAU/J,IAAAA,OAAAA,aAEZwF,QAASxF,IAAAA,MAAgB,CACvB0F,KAAM1F,IAAAA,KAAAA,aAER6L,MAAO7L,IAAAA,OACP0L,MAAO1L,IAAAA,MAAgB,CACrBkD,KAAMlD,IAAAA,OACNhC,KAAMgC,IAAAA,OACNwB,YAAaxB,IAAAA,OACbkP,iBAAkBlP,IAAAA,KAClBgW,OAAQhW,IAAAA,OAEVmW,WAAYnW,IAAAA,KACZ+L,WAAY/L,IAAAA,KACZoW,SAAUpW,IAAAA,MAGZkW,GAAMrQ,aAAe,CACnBsQ,YAAY,GAGd,UAAepQ,EAAAA,EAAAA,UArCS,SAAC,GAAD,QAAGS,aAAgBD,EAAnB,EAAmBA,cAAe8R,EAAlC,EAAkCA,gBAAiBC,EAAnD,EAAmDA,qBAAnD,MAAiF,CACvG5M,MAAOnF,EACP4P,WAAYkC,GAAmBC,MAGN,SAACpS,GAAD,OACzB0G,EAAAA,GAAAA,oBACE,CACEb,WAAAA,EAAAA,IAEF7F,KA2BJ,CAA4DgQ,I,uCCrQtDqC,GAAkB,SAAC,GAAiC,IAA/BzY,EAA+B,EAA/BA,UAAW0D,EAAoB,EAApBA,IAAQ1C,GAAY,aACxD,OACE,kBAAC,EAAA0X,YAAD,QACE1Y,UAAW2Y,IAAAA,CAAW3Y,EAAW,CAC/B,uBAAwB0D,EAAIyL,oBAE9BzL,IAAKA,GACD1C,KAKVyX,GAAgBxY,UAAY,CAC1ByD,IAAKxD,IAAAA,MAAgB,CACnBiP,kBAAmBjP,IAAAA,OAErBF,UAAWE,IAAAA,QAGb,Y,qmBCDA,IAAMmE,GAAU,CACd,CAAEzE,MAAO,OAAQ2E,IAAK,OAAQC,WAAY,CAACC,EAAAA,WAC3C,CAAE7E,MAAO,SACT,CAAEA,MAAO,WACT,CAAEA,MAAO,gBAAiB2E,IAAK,WAAYC,WAAY,CAACC,EAAAA,YA2N1D,SAxNe,WACb,IAAM2B,GAAWiD,EAAAA,EAAAA,eACX3D,GAAU4D,EAAAA,EAAAA,cACVtE,EAAY,SAAC4N,GAAD,OAAaxM,GAAStI,EAAAA,EAAAA,IAAY,SAAK8U,GAAN,IAAetS,SAAS,OAE3E,GAA2DmS,EAAAA,EAAAA,cACzD,wBAAG/L,aAAgB5D,EAAnB,EAAmBA,OAAQgB,EAA3B,EAA2BA,UAAW8U,EAAtC,EAAsCA,YAAtC,MAA2D,CACzD9V,OAAQ,GAAF,eACA8V,MAAAA,GAAA,UAAAA,EAAa1a,YAAb,SAAmB6N,MAAM,IAAI8M,OAAO/V,EAAO7E,QAAQC,KAAM,MAAQ,CAAC0a,GAAe,KADjF,QAEA9V,MAAAA,GAAA,UAAAA,EAAQvE,YAAR,eAAcua,QAAO,wEAAwB,GAArB1J,EAAH,EAAGA,iBAAH,OAAgCA,OAAqB,KAEhFjJ,MAAMrD,MAAAA,OAAA,EAAAA,EAAQiB,cAAcjB,MAAAA,OAAtB,EAAsBA,EAAQqD,MACpClI,QAAS6E,MAAAA,OAAF,EAAEA,EAAQ7E,QACjB2T,aAAc9O,MAAAA,OAAF,EAAEA,EAAQ+O,SACtB/N,UAAAA,EACA8U,YAAAA,KAEFlG,EAAAA,cAZM5P,EAAR,EAAQA,OAAQqD,EAAhB,EAAgBA,KAAMlI,EAAtB,EAAsBA,QAAS2T,EAA/B,EAA+BA,aAAc9N,EAA7C,EAA6CA,UAe7C,GAAoCnC,EAAAA,EAAAA,UAASwE,GAA7C,eAAOpC,EAAP,KAAmBgV,EAAnB,KACA,GAAsCpX,EAAAA,EAAAA,UAAS1D,EAAQC,MAAQ,IAA/D,eAAOiG,EAAP,KAAoBC,EAApB,KACA,GAAwCzC,EAAAA,EAAAA,UAAS,IAAjD,eAAOoN,EAAP,KAAqBiK,EAArB,KACA,GAAgDrX,EAAAA,EAAAA,UAAS,IAAzD,eAAOsX,EAAP,KAAyBC,EAAzB,MAEA7Z,EAAAA,EAAAA,YAAU,WACR,IAAM8Z,GAAmBC,EAAAA,EAAAA,IAA6B1T,EAAS3B,GAC/DgV,EAAcI,GACd,IAAQjb,GAASmb,EAAAA,GAAAA,IAA0B3T,EAAS,CAAC,QAAS,CAAExH,KAAMiG,IAA9DjG,KACRkG,EAAelG,GACf8Y,SAASC,OAAOqC,YAAY,CAAE3b,GAAI,SAAU4b,cAAc,IAC1DvU,EAAU,SAAKmU,GAAN,IAAwBlb,QAAS,CAAEC,KAAAA,MAC5CkI,GAASoT,EAAAA,EAAAA,IAAiBtb,MACzB,KAEHmB,EAAAA,EAAAA,YAAU,YACRoa,EAAAA,EAAAA,IAAyB/T,KAAYgU,EAAAA,EAAAA,IAAqBhU,EAAS3B,EAAWhG,MAAOgG,EAAW/F,SAChGmG,MAAAA,OAAA,EAAAA,EAAatG,QAAS,KAAM8b,EAAAA,GAAAA,IAAuBjU,EAAS,CAAC,WAAY2T,EAAAA,GAAAA,IAA0B3T,EAAS,CAAC,QAAS,CAAExH,KAAMiG,OAGhI,IAAMiB,EAAkB,SAACC,GACvB2T,GAAgB,SAACY,GAAD,OACdvU,EAAauU,GACVd,QAAO,qBAAG1J,oBACV9J,KAAI,kBAAqB,CAAElC,KAAvB,EAAGA,KAA0Bf,MAA7B,EAASnE,cAIpBmB,EAAAA,EAAAA,YAAU,WACR0E,EAAW8V,aAAcH,EAAAA,EAAAA,IAAqBhU,EAAS3B,EAAWhG,MAAOgG,EAAW/F,UACnF,CAAC+F,EAAW8V,cAEfxa,EAAAA,EAAAA,YAAU,WACR+E,EAAenG,EAAQC,MACvB6a,EAAc5S,KACb,CAAClI,EAASkI,IAEb,IAAMkN,EAAS,kBACb,kBAAC,EAAAjM,SAAD,KACE,kBAAC,EAAAkM,MAAD,CAAOwG,OAAK,EAACvG,KAAM5G,GAAAA,EAAAA,cACjB,kBAAC,GAAD,CACE5I,WAAYA,EACZ9F,QAASA,EACTmL,WAAY,SAACnE,GACXD,EAAUC,GACVb,EAAe,QAIrB,kBAAC,EAAAkP,MAAD,CAAOwG,OAAK,EAACvG,KAAM5G,GAAAA,EAAAA,cAAAA,MACjB,kBAAC,GAAD,CACE5I,WAAYA,EACZ9F,QAASA,EACTmL,WAAY,SAACnE,GACXD,EAAUC,IAEZyG,aAAaoL,EAAAA,EAAAA,IAAanK,GAAAA,EAAAA,OAAkB5I,EAAY9F,GACxD0N,aAAamL,EAAAA,EAAAA,IAAanK,GAAAA,EAAAA,OAAD,GAAC,MAAuB5I,GAAxB,IAAoC/F,OAAQ,IAAKC,MAG9E,kBAAC,EAAAqV,MAAD,CAAOwG,OAAK,EAACvG,KAAM5G,GAAAA,EAAAA,iBACjB,kBAAC,GAAD,CACE5I,WAAYA,EACZ9F,QAASA,EACTmL,WAAY,SAAC2Q,EAAK9U,GAChBD,EAAUC,GACV+T,EAAgBjK,EAAa+J,QAAO,SAACpV,GAAD,OAAUqW,EAAIhK,SAASrM,EAAIN,WAEjEsI,aAAaoL,EAAAA,EAAAA,IAAanK,GAAAA,EAAAA,OAAkB5I,EAAY9F,GACxD0N,aAAamL,EAAAA,EAAAA,IAAanK,GAAAA,EAAAA,OAAD,GAAC,MAAuB5I,GAAxB,IAAoC/F,OAAQ,IAAKC,GAC1EiP,aAAW,EACXD,WAAYgM,OAMdvF,EAAiB,SAAC,GAAD,SAAGvE,qBACDyC,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,cAC1E,KACA,CACE,CACExT,MAAO,OACP+N,QAAS,SAACyC,EAAQuD,EAAQ/H,GACxBlG,EAAQE,KAAR,uBAA6BgG,EAAMxI,SAGvC,CACExD,MAAO,SACP+N,QAAS,SAACyC,EAAQuD,EAAQ/H,GACxBsN,EAAoB,CAACtN,IACrBlG,EAAQE,KAAK+G,GAAAA,EAAAA,qBAMnBoH,EAAiB,yBACjBnC,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aACvD,CACE,kBAAC,EAAA/D,KAAD,CAAMC,GAAI3C,GAAAA,EAAAA,aAAwBpI,IAAI,YAAYvE,UAAU,oBAC1D,kBAAC,EAAAyN,OAAD,CAAQtI,OAAO,sBAAsB2E,QAAQ,UAAU,aAAW,gBAAlE,iBAIF,CACEzH,MAAO,eACPrB,MAAO,CACLhB,UAAW,oBAEb2N,QAAS,WACPjI,EAAQE,KAAK+G,GAAAA,EAAAA,gBAGjB,CACEtK,MAAO,OACPrB,MAAO,CACL0M,aAAsC,IAAxBqB,EAAalR,SAE7B8P,QAAS,kBAAMjI,EAAQE,KAAR,uBAA6BmJ,EAAa,GAAG3L,SAE9D,CACEf,MAAO,SACPrB,MAAO,CACL0M,YAAaqB,EAAalR,OAAS,GAErC8P,QAAS,WACPuL,EAAoBnK,GACpBrJ,EAAQE,KAAK+G,GAAAA,EAAAA,oBAInB,KA2CN,OACE,kBAAC,EAAAqN,OAAD,KACE,kBAAC,KAAD,CAAiBC,WAAW,cAAc1G,KAAM5G,GAAAA,EAAAA,4BAAuC6G,OAAQ,SAACxS,GAAD,OAAW,kBAAC,KAASA,MACpH,kBAAC,KAAD,CACEiZ,WAAW,eACX1G,KAAM5G,GAAAA,EAAAA,gBACN6G,OAAQ,SAACxS,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEEsV,SAAU,SAAClT,GACTgB,EAAe,IACf4U,EAAgBjK,EAAa+J,QAAO,SAACpV,GAAD,OAASA,EAAIN,MAAQA,aAKjE,kBAAC,KAAD,CAAiB6W,WAAW,aAAa1G,KAAM5G,GAAAA,EAAAA,OAAkB6G,OAAQ,kBAvD3E,kBAAC,EAAAvR,MAAD,CAAOjC,UAAU,iBACf,kBAAC,EAAAmC,UAAD,KACE,kBAAC,KAAD,CAAY+X,eAAa,GACvB,kBAAC,KAAD,CAAiBta,MAAM,aAG3B,kBAAC,EAAAuC,UAAD,KACE,kBAAC+Q,GAAA,EAAD,CAASxS,KAAK,UAAU/C,GAAI,cAC1B,kBAAC,IAAD,CACEY,KAAMuE,EAAOwC,KAAI,SAACsG,GAAD,OAAYA,EAAMwD,iBAAN,SAA8BxD,GAA9B,IAAqCqD,eAAgB,QAAUrD,KAC5F7I,WAAYA,GACZsB,QAASA,GACTO,aAAcgN,GAAgBA,EAAazG,MAAQyG,EAAazG,KAAKiI,aACrEnQ,YAAa8L,EACb3J,gBAAiBA,EACjBiO,OAAQA,EACRK,eAAgBA,EAChBnO,YAAY,SACZC,cAAc,QACdL,OAAO,eACPpB,WAAYA,EACZI,YAAaA,EACba,UAAW,SAACC,GACV,IAAQ/G,EAAwC+G,EAAxC/G,KAAM4H,EAAkCb,EAAlCa,MAAO/H,EAA2BkH,EAA3BlH,MAAOC,EAAoBiH,EAApBjH,OAAQ0G,EAAYO,EAAZP,QAGpC,OAFAgV,EAAAA,EAAAA,IAAqBhU,EAAS3H,EAAOC,IACrCmc,EAAAA,GAAAA,IAAkBzU,EAAS,CAAExH,KAAAA,IACtB8G,EAAU,CAAEc,MAAAA,EAAO/H,MAAAA,EAAOC,OAAAA,EAAQ0G,QAAAA,EAASzG,QAAS,CAAEC,KAAAA,MAE/DkG,eAAgB,gBAAGlG,EAAH,EAAGA,KAAH,OAAckG,EAAelG,IAC7C6V,eAAgBA,EAChBjQ,WAAYA,GAAgC,KAAnBhB,MAAAA,OAAA,EAAAA,EAAQjF,SAAwC,KAAxBsG,MAAAA,OAAA,EAAAA,EAAatG,SAAsBiG,EACpFiB,kBAAkB,OAClB8O,WAAY4E,GACZhT,QAAQ","sources":["webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw 'Can have maximum of 150 characters.';\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw 'Name has already been taken.';\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title=\"Group name already taken\"\n        text=\"Please return to Step 1: Group information and choose a unique group name for your group.\"\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        Review details\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\n\nexport default {\n  fields: [\n    {\n      component: 'wizard',\n      name: 'wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Create group',\n      fields: [\n        {\n          name: 'name-and-description',\n          nextStep: 'add-roles',\n          title: 'Name and Description',\n          fields: [\n            {\n              component: 'set-name',\n              name: 'group-name',\n              validate: [\n                {\n                  type: validatorTypes.REQUIRED,\n                },\n              ],\n            },\n            {\n              component: componentTypes.TEXTAREA,\n              name: 'group-description',\n              hideField: true,\n              validate: [\n                {\n                  type: validatorTypes.MAX_LENGTH,\n                  threshold: 150,\n                },\n              ],\n            },\n          ],\n        },\n        {\n          name: 'add-roles',\n          nextStep: 'add-users',\n          title: 'Add roles',\n          fields: [\n            {\n              component: 'set-roles',\n              name: 'roles-list',\n            },\n          ],\n        },\n        {\n          name: 'add-users',\n          nextStep: 'review',\n          title: 'Add members',\n          fields: [\n            {\n              component: 'set-users',\n              name: 'users-list',\n            },\n          ],\n        },\n        {\n          name: 'review',\n          title: 'Review details',\n          // eslint-disable-next-line react/display-name\n          buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n          StepTemplate: ReviewTemplate,\n          fields: [\n            {\n              component: 'summary-content',\n              name: 'summary-content',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label=\"Group name\"\n          helperTextInvalid={groupName ? groupNameError : 'Required'}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label=\"Group description\"\n          helperTextInvalid=\"Can have maximum of 150 characters.\"\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\n\nconst createRows = (data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ roles, fetchRoles, isLoading, pagination, selectedRoles, canSort, setSelectedRoles }) => {\n  const [filterValue, setFilterValue] = useState('');\n  const { current: columns } = useRef([\n    { title: 'Name', key: 'display_name', ...(canSort ? { transforms: [sortable] } : { orderBy: 'name' }) },\n    { title: 'Description' },\n  ]);\n\n  useEffect(() => {\n    fetchRoles({ orderBy: 'display_name' });\n  }, []);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  return (\n    <TableToolbarView\n      columns={columns}\n      isSelectable\n      isCompact\n      borders={false}\n      createRows={createRows}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder=\"role name\"\n      fetchData={(config) => fetchRoles(mappedProps({ ...config, filters: { display_name: config.name } }))}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural=\"roles\"\n      titleSingular=\"role\"\n      tableId=\"roles-list\"\n    />\n  );\n};\n\nconst mapStateToProps = ({ roleReducer: { roles, isLoading } }) => ({\n  roles: roles.data,\n  pagination: roles.meta,\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchRoles: (apiProps) => {\n      dispatch(fetchRolesWithPolicies(mappedProps(apiProps)));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nRolesList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRoles: PropTypes.func.isRequired,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  canSort: PropTypes.bool,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nconst mapStateToPropsGroup = ({ groupReducer: { selectedGroup } }) => {\n  const roles = selectedGroup.addRoles.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.addRoles.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.addRoles.loaded,\n    groupId: selectedGroup.uuid,\n  };\n};\n\nconst mapDispatchToPropsGroup = (dispatch) => {\n  return {\n    fetchRoles: (groupId, apiProps) => {\n      dispatch(fetchAddRolesForGroup(groupId, apiProps));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    canSort: false,\n    fetchRoles: (apiProps) => propsFromDispatch.fetchRoles(propsFromState.groupId, apiProps),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RolesList);\nexport const ExcludedRolesList = connect(mapStateToPropsGroup, mapDispatchToPropsGroup, mergeProps)(RolesList);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>Select one or more roles to add to this group.</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { CompactUsersList } from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser description={'These are all of the users in your Red Hat organization. To manage users, go to your'} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SummaryContent = () => {\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Group name\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Group description\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Roles\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Members\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport schema from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: 'Adding group',\n        dismissDelay: 8000,\n        dismissable: false,\n        description: 'Adding group was canceled by the user.',\n      })\n    );\n    push({\n      pathname: paths.groups,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success adding group',\n            dismissDelay: 8000,\n            dismissable: false,\n            description: 'The group was added successfully.',\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default AddGroupWizard;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({\n  addNotification,\n  updateGroup,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n  group,\n  onClose,\n}) => {\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? updateGroup(user_data)\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : updateGroup(user_data).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      dismissDelay: 8000,\n      dismissable: false,\n      title: selectedGroup ? 'Editing group' : 'Adding group',\n      description: selectedGroup ? 'Edit group was canceled by the user.' : 'Adding group was canceled by the user.',\n    });\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: 'Name',\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: 'Description',\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate {...props} ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: `Edit group's information` }} />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      updateGroup,\n      fetchGroup,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditGroupModal);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({\n  removeGroups,\n  group,\n  isLoading,\n  fetchGroup,\n  groupsUuid,\n  isModalOpen,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n}) => {\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      fetchGroup(groupsUuid[0].uuid);\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    removeGroups(uuids)\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {multipleGroups ? 'Delete groups?' : 'Delete group?'}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {multipleGroups ? 'Delete groups' : 'Delete group'}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            Deleting these <b>{groupsUuid.length}</b> groups removes all roles from the members inside the group.\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            Deleting the <b>{group.name}</b> group removes all roles from the members inside the group.\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label=\"I understand that this action cannot be undone.\"\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => ({\n  group: selectedGroup,\n  isLoading: !selectedGroup.loaded,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveGroupModal);\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\n\nconst DefaultPlatformPopover = ({ uuid }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id=\"default-group-popover\">\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent=\"This group contains the roles that all users in your organization inherit by default.\"\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  uuid: PropTypes.string.isRequired,\n};\n\nexport const createRows = (data, opened, selectedRows = []) => {\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              <Link key={`${uuid}-link`} to={`/groups/detail/${uuid}`}>\n                {name}\n              </Link>\n              {isPlatformDefault && <DefaultPlatformPopover uuid={uuid} />}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{isActive ? 'Active' : 'Inactive'}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addGroup, addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { CompactUsersList } from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\n\nconst AddGroupMembers = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  addNotification,\n  closeUrl,\n  addMembersToGroup,\n  fetchMembersForGroup,\n  fetchGroups,\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      addNotification({\n        variant: 'info',\n        title: `Adding member${userList.length > 1 ? 's' : ''} to group`,\n        dismissDelay: 8000,\n        dismissable: false,\n        description: `Adding member${userList.length > 1 ? 's' : ''} to group initiated.`,\n      });\n      addMembersToGroup(uuid, userList).then(() => {\n        fetchMembersForGroup(uuid);\n        fetchGroups({ inModal: false });\n      });\n    }\n\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      title: `Adding member${selectedUsers.length > 1 ? 's' : ''} to group`,\n      dismissDelay: 8000,\n      dismissable: false,\n      description: `Adding member${selectedUsers.length > 1 ? 's' : ''} to group was canceled by the user.`,\n    });\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title=\"Add members\"\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          Add to group\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser description=\"These are all of the users in your Red Hat organization. To manage users, go to your\" />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func,\n  }).isRequired,\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  match: PropTypes.object,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      addGroup,\n      addMembersToGroup,\n      fetchMembersForGroup,\n      fetchGroups,\n    },\n    dispatch\n  );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddGroupMembers));\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\n\nconst columns = [\n  { title: 'Status', transforms: [nowrap] },\n  { title: 'Username' },\n  { title: 'Email' },\n  { title: 'Last name' },\n  { title: 'First name' },\n];\n\nconst selector = ({ groupReducer: { groups, selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  userIdentity: groups.identity,\n  groupName: selectedGroup.name,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) =>\n  plural ? (\n    <p>\n      These <b> {`${name}`}</b> members will lose all the roles associated with the <b>{`${group}`}</b> group.\n    </p>\n  ) : (\n    <p>\n      <b>{`${name}`}</b> will lose all the roles associated with the <b> {`${group}`}</b> group.\n    </p>\n  );\n\nconst GroupPrincipals = () => {\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, userIdentity, isLoading, platform_default } = useSelector(selector, shallowEqual);\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !(userIdentity && userIdentity.user && userIdentity.user.is_org_admin)\n      ? null\n      : [\n          {\n            title: 'Remove',\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: 'Remove member?',\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: 'Remove member',\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members']}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(userIdentity && userIdentity.user && userIdentity.user.is_org_admin\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add_members`} key=\"remove-from-group\" className=\"ins-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              Add member\n            </Button>\n          </Link>,\n          {\n            label: 'Add member',\n            props: {\n              className: 'ins-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add_members`);\n            },\n          },\n          {\n            label: 'Remove',\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = multipleMembersSelected ? 'Remove members?' : 'Remove member?';\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>All users in this organization are members of this group.</Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarView\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={userIdentity && userIdentity.user && userIdentity.user.is_org_admin}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder=\"username\"\n            titlePlural=\"members\"\n            titleSingular=\"member\"\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: 'There are no members in this group', description: ['Add a user to configure user access.', ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            Once you edit the <b>Default access</b> group, the system will no longer update it with new default access roles. The group name will\n            change to <b>Custom default access</b>.\n          </Text>\n        </TextContent>\n      }\n      title={'Warning'}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={'Continue'}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Modal, ModalVariant, Stack, StackItem, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport { ExcludedRolesList } from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport '../../../App.scss';\n\nconst AddGroupRoles = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  name,\n  isDefault,\n  isChanged,\n  addNotification,\n  onDefaultGroupChanged,\n  fetchRolesForGroup,\n  fetchGroup,\n}) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    addNotification({\n      variant: 'warning',\n      title: 'Adding roles to group',\n      dismissDelay: 8000,\n      dismissable: false,\n      description: 'Adding roles to group was canceled by the user.',\n    });\n    push(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(uuid, rolesList, () => {\n      fetchRolesForGroup();\n      fetchGroup();\n    });\n    if (isDefault && !isChanged) {\n      onDefaultGroupChanged(true);\n    }\n\n    return push(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      title=\"Add roles to group\"\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          Add to group\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              This role list has been filtered to only show roles that are not currently in <b> {name}</b>.\n            </Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <Card>\n            <ExcludedRolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </Card>\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.any,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  addNotification: PropTypes.func,\n  onDefaultGroupChanged: PropTypes.func,\n  fetchRolesForGroup: PropTypes.func,\n  fetchGroup: PropTypes.func,\n};\n\nexport default AddGroupRoles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory } from 'react-router-dom';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { removeRolesFromGroup, addRolesToGroup, fetchRolesForGroup, fetchAddRolesForGroup, fetchGroup } from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport './group-roles.scss';\n\nconst columns = [{ title: 'Name', orderBy: 'name' }, { title: 'Description' }, { title: 'Last modified' }];\n\nconst createRows = (groupUuid, data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description, modified }) => [\n          ...acc,\n          {\n            uuid,\n            title: display_name || name,\n            cells: [\n              <Fragment key={`${uuid}-name`}>\n                <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n              </Fragment>,\n              description,\n              <Fragment key={`${uuid}-modified`}>\n                <DateFormat date={modified} type={getDateFormat(modified)} />\n              </Fragment>,\n            ],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId) => {\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"ins-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      Add role\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content=\"All available roles have already been added to the group\">{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst GroupRoles = ({\n  roles,\n  removeRoles,\n  addRoles,\n  fetchRolesForGroup,\n  isLoading,\n  pagination,\n  match: {\n    params: { uuid },\n  },\n  userIdentity,\n  name,\n  isDefault,\n  isChanged,\n  onDefaultGroupChanged,\n  fetchAddRolesForGroup,\n  disableAddRoles,\n  addNotification,\n  reloadGroup,\n}) => {\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  useEffect(() => {\n    fetchRolesForGroup(pagination)(uuid);\n  }, []);\n\n  useEffect(() => {\n    fetchAddRolesForGroup(uuid);\n  }, [roles]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      Members in the <b>{name}</b> group will lose the permissions in {plural ? 'these' : 'the'}\n      <b> {role}</b> role{plural ? `s` : ''}.\n    </p>\n  );\n\n  const actionResolver = () => [\n    ...(userIdentity && userIdentity.user && userIdentity.user.is_org_admin\n      ? [\n          {\n            title: 'Remove',\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(uuid, [role.uuid], () => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)));\n              setDeleteInfo({\n                title: 'Remove role?',\n                confirmButtonLabel: 'Remove role',\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles']}\n        render={(args) => (\n          <AddGroupRoles\n            fetchGroup={() => reloadGroup(uuid)}\n            fetchRolesForGroup={() => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${uuid}/roles`}\n            addRolesToGroup={addRoles}\n            name={name}\n            isDefault={isDefault}\n            isChanged={isChanged}\n            addNotification={addNotification}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(userIdentity && userIdentity.user && userIdentity.user.is_org_admin\n      ? [\n          <Link\n            className={`ins-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add_roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''))}\n          </Link>,\n          {\n            label: 'Add role',\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'ins-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/roles/add_roles`);\n            },\n          },\n          {\n            label: 'Remove',\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    uuid,\n                    selectedRoles.map((role) => role.uuid),\n                    () => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)\n                  )\n              );\n              setDeleteInfo({\n                title: multipleRolesSelected ? 'Remove roles?' : 'Remove role?',\n                confirmButtonLabel: selectedRoles.length > 1 ? 'Remove roles' : 'Remove role',\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id={'tab-roles'}>\n        <TableToolbarView\n          columns={columns}\n          isSelectable={userIdentity && userIdentity.user && userIdentity.user.is_org_admin}\n          createRows={(...props) => createRows(uuid, ...props)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchRolesForGroup(config)(uuid);\n          }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural=\"roles\"\n          titleSingular=\"role\"\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{ title: 'There are no roles in this group', description: ['Add a role to configure user access.', ''] }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nconst reloadWrapper = (event, callback) => {\n  event.payload.then(callback);\n  return event;\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, groups } }) => {\n  const roles = selectedGroup.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.loaded,\n    userIdentity: groups.identity,\n    name: selectedGroup.name,\n    isDefault: selectedGroup.platform_default,\n    isChanged: !selectedGroup.system,\n    disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addRoles: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n    removeRoles: (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback)),\n    fetchRolesForGroup: (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options)),\n    fetchAddRolesForGroup: (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {})),\n    addNotification: (...props) => dispatch(addNotification(...props)),\n    reloadGroup: (apiProps) => dispatch(fetchGroup(apiProps)),\n  };\n};\n\nGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRolesForGroup: PropTypes.func.isRequired,\n  fetchAddRolesForGroup: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  addRoles: PropTypes.func,\n  name: PropTypes.string,\n  removeRoles: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  userIdentity: PropTypes.shape({\n    user: PropTypes.shape({\n      is_org_admin: PropTypes.bool,\n    }),\n  }),\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n  disableAddRoles: PropTypes.bool.isRequired,\n  addNotification: PropTypes.func,\n  reloadGroup: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n  userIdentity: {},\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupRoles);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { fetchGroup, fetchGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport { Alert, AlertActionCloseButton, Popover, Split, SplitItem, DropdownItem, Dropdown, KebabToggle, Button } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrubms';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  group,\n  fetchGroup,\n  isFetching,\n  onDelete,\n}) => {\n  const tabItems = [\n    { eventKey: 0, title: 'Roles', name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: 'Members', name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  const history = useHistory();\n\n  const { pagination, filters, groupExists } = useSelector(\n    ({ groupReducer: { groups, error } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n    }),\n    shallowEqual\n  );\n\n  const breadcrumbsList = () => [\n    {\n      title: 'Groups',\n      to: getBackRoute(pathnames.groups, pagination, filters),\n    },\n    groupExists ? { title: isFetching ? undefined : group.name, isActive: true } : { title: 'Invalid group', isActive: true },\n  ];\n\n  const fetchData = (apiProps) => {\n    fetchGroup(apiProps);\n  };\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchData(uuid);\n    insights.chrome.appObjectId(uuid);\n    return () => insights.chrome.appObjectId(undefined);\n  }, []);\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <div>\n              Now that you have edited the <b>Default access</b> group, the system will no longer update it with new default access roles. The group\n              name has changed to <b>Custom default access</b>.\n            </div>\n          }\n        >\n          <InfoCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).replace(\n            ':uuid',\n            uuid\n          )}\n        >\n          Edit\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          Delete\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  return (\n    <Fragment>\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              <SplitItem>\n                {group.platform_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title=\"Default access group has changed\"\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                Now that you have edited the <b>Default access</b> group, the system will no longer update it with new default access roles. The group\n                name has changed to <b>Custom default access</b>.\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'], pathnames['group-detail-members-remove']]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'], pathnames['group-detail-members-edit']]}\n            render={(props) => (\n              <EditGroup\n                {...props}\n                group={group}\n                cancelRoute={`group/detail/${uuid}`}\n                postMethod={() => {\n                  fetchData(uuid);\n                }}\n              />\n            )}\n          />\n          <Route\n            path={pathnames['group-detail-roles']}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members']} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title=\"Group not found\"\n            description={[`Group with ID ${uuid} does not exist.`]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                Back to previous page\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n  group: selectedGroup,\n  isFetching: isRecordLoading || isRecordRolesLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n    },\n    dispatch\n  );\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  onDelete: PropTypes.func,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './group-table-helpers';\nimport { fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport { applyPaginationToUrl, isPaginationPresentInUrl, syncDefaultPaginationWithUrl } from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\n\nconst columns = [\n  { title: 'Name', key: 'name', transforms: [sortable] },\n  { title: 'Roles' },\n  { title: 'Members' },\n  { title: 'Last modified', key: 'modified', transforms: [sortable] },\n];\n\nconst Groups = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n\n  const { groups, meta, filters, userIdentity, isLoading } = useSelector(\n    ({ groupReducer: { groups, isLoading, systemGroup } }) => ({\n      groups: [\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default } = {}) => !platform_default) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      userIdentity: groups?.identity,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState(meta);\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault }) => !isPlatformDefault)\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination(meta);\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group']}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group']}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault }) =>\n    isPlatformDefault || !(userIdentity && userIdentity.user && userIdentity.user.is_org_admin)\n      ? null\n      : [\n          {\n            title: 'Edit',\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: 'Delete',\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group']);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(userIdentity && userIdentity.user && userIdentity.user.is_org_admin\n      ? [\n          <Link to={pathnames['add-group']} key=\"add-group\" className=\"ins-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              Create group\n            </Button>\n          </Link>,\n          {\n            label: 'Create group',\n            props: {\n              className: 'ins-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group']);\n            },\n          },\n          {\n            label: 'Edit',\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: 'Delete',\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group']);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title=\"Groups\" />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id={'tab-groups'}>\n          <TableToolbarView\n            data={groups.map((group) => (group.platform_default ? { ...group, principalCount: 'All' } : group))}\n            createRows={createRows}\n            columns={columns}\n            isSelectable={userIdentity && userIdentity.user && userIdentity.user.is_org_admin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural=\"groups\"\n            titleSingular=\"group\"\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder=\"name\"\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail']} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail']}\n        render={(props) => (\n          <Group\n            {...props}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["asyncValidator","groupName","idKey","id","undefined","length","fetchGroups","limit","offset","filters","name","nameMatch","error","console","response","data","some","item","debouncedAsyncValidator","asyncDebounce","value","ReviewTemplate","formFields","useContext","AddGroupWizardContext","submitting","setWizardError","getState","useFormApi","useEffect","values","then","Bullseye","Spinner","size","context","title","text","Title","headingLevel","className","propTypes","PropTypes","fields","component","isDynamic","inModal","showTitles","nextStep","validate","type","validatorTypes","componentTypes","hideField","threshold","buttons","props","StepTemplate","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","input","useFieldApi","formOptions","description","useState","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","label","helperTextInvalid","isRequired","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","createRows","expanded","checkedRows","reduce","acc","uuid","display_name","cells","selected","Boolean","find","row","RolesList","roles","fetchRoles","isLoading","pagination","selectedRoles","canSort","setSelectedRoles","filterValue","setFilterValue","columns","useRef","key","transforms","sortable","orderBy","current","isSelectable","isCompact","borders","filterPlaceholder","fetchData","config","mappedProps","ouiaId","setCheckedItems","newSelection","map","titlePlural","titleSingular","tableId","history","goBack","push","searchFilter","count","defaultProps","defaultCompactSettings","connect","roleReducer","meta","dispatch","apiProps","fetchRolesWithPolicies","addNotification","ExcludedRolesList","selectedGroup","groupReducer","addRoles","defaultSettings","loaded","groupId","fetchAddRolesForGroup","propsFromState","propsFromDispatch","ownProps","SetRoles","Fragment","TextContent","Text","fieldId","SetUsers","selectedUsers","setSelectedUsers","Form","Card","SummaryContent","Grid","GridItem","md","TextVariants","role","index","createContext","success","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","onCancel","emptyCallback","nonEmptyCallback","setGroupData","formData","Object","keys","AddGroupWizard","postMethod","useDispatch","useHistory","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","variant","dismissDelay","dismissable","pathname","paths","search","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","schema","subscription","componentMapper","onSubmit","user_list","user","username","roles_list","addGroup","initialValues","EditGroupModal","updateGroup","cancelRoute","submitRoute","group","onClose","setSelectedGroup","match","useRouteMatch","fetchGroup","params","payload","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","ModalFormTemplate","ModalProps","pathnames","inputValue","hash","bindActionCreators","RemoveGroupModal","removeGroups","groupsUuid","isModalOpen","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","Button","isDisabled","onClick","uuids","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","bodyContent","appendTo","classNames","opened","selectedRows","roleCount","principalCount","modified","isPlatformDefault","platform_default","Link","to","DateFormat","date","getDateFormat","AppTabs","location","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","_opened","isActive","is_active","email","firstName","first_name","lastName","last_name","Label","color","AddGroupMembers","closeUrl","addMembersToGroup","fetchMembersForGroup","userList","users","nowrap","selector","principals","members","userIdentity","identity","removeModalText","plural","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","useParams","useSelector","shallowEqual","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","is_org_admin","routes","Route","path","render","args","actionResolver","_rowId","principal","rowWrapper","UsersRow","toolbarButtons","multipleMembersSelected","removeText","emptyProps","DefaultGroupChange","withCheckbox","AddGroupRoles","addRolesToGroup","isDefault","isChanged","onDefaultGroupChanged","fetchRolesForGroup","showConfirmModal","setShowConfirmModal","rolesList","RemoveRoles","groupUuid","generateOuiaID","toLowerCase","GroupRoles","removeRoles","disableAddRoles","reloadGroup","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","addRoleButtonContent","isAriaDisabled","Tooltip","content","multipleRolesSelected","reloadWrapper","event","callback","system","removeRolesFromGroup","Group","isFetching","onDelete","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","groupExists","BAD_UUID","breadcrumbsList","getBackRoute","useLocation","insights","chrome","appObjectId","dropdownItems","DropdownItem","replace","breadcrumbs","Split","SplitItem","isFilled","style","display","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","isRecordLoading","isRecordRolesLoading","GroupRowWrapper","RowWrapper","classnames","systemGroup","RegExp","filter","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","syncDefaultPaginationWithUrl","syncDefaultFiltersWithUrl","appNavClick","secondaryNav","fetchSystemGroup","isPaginationPresentInUrl","applyPaginationToUrl","areFiltersPresentInUrl","rows","redirected","exact","ids","Switch","pageAction","paddingBottom","applyFiltersToUrl"],"sourceRoot":""}