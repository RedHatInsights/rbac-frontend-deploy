{"version":3,"file":"js/8090.87fa1259fa1d100d216d.js","mappings":"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","sources":["webpack:///./src/AppEntry.js","webpack:///./src/helpers/role/role-helper.js","webpack:///./src/helpers/shared/user-login.js","webpack:///./src/redux/actions/role-actions.js"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport registry, { RegistryContext } from './utilities/store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport { IntlProvider } from 'react-intl';\nimport messages from './locales/data.json';\n\nexport const locale = 'en';\n\nconst InsightsRbac = () => (\n  <IntlProvider locale={locale} messages={messages[locale]}>\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <Router basename={getBaseName(location.pathname, 2).includes('rbac') ? getBaseName(location.pathname, 2) : getBaseName(location.pathname, 1)}>\n          <App />\n        </Router>\n      </Provider>\n    </RegistryContext.Provider>\n  </IntlProvider>\n);\n\nexport default InsightsRbac;\n","import { getLastPageOffset, isOffsetValid } from '../shared/pagination';\nimport { getRoleApi } from '../shared/user-login';\n\nconst roleApi = getRoleApi();\n\nexport async function createRole(data) {\n  return await roleApi.createRoles(data);\n}\n\nexport function fetchRoles({\n  limit,\n  offset,\n  name,\n  displayName,\n  nameMatch,\n  scope,\n  orderBy = 'display_name',\n  addFields,\n  username,\n  application,\n  permission,\n  options,\n}) {\n  return roleApi.listRoles(\n    limit,\n    offset,\n    name,\n    undefined,\n    displayName,\n    nameMatch,\n    scope,\n    orderBy,\n    addFields,\n    username,\n    application,\n    permission,\n    options\n  );\n}\n\nexport async function fetchRolesWithPolicies({\n  limit,\n  offset,\n  filters = {},\n  nameMatch,\n  scope = 'account',\n  orderBy = 'display_name',\n  addFields = ['groups_in_count', 'groups_in', 'access'],\n  username,\n  options,\n  permission,\n  application,\n  inModal = true,\n}) {\n  const roles = await roleApi.listRoles(\n    limit,\n    offset,\n    filters.name,\n    undefined,\n    filters.display_name,\n    nameMatch,\n    scope,\n    orderBy,\n    addFields,\n    username,\n    application,\n    permission,\n    options\n  );\n\n  const isPaginationValid = isOffsetValid(offset, roles?.meta?.count);\n  offset = isPaginationValid ? offset : getLastPageOffset(roles.meta.count, limit);\n  let { data, meta } = isPaginationValid\n    ? roles\n    : await roleApi.listRoles(\n        limit,\n        offset,\n        filters.name,\n        undefined,\n        undefined,\n        nameMatch,\n        scope,\n        orderBy,\n        addFields,\n        username,\n        application,\n        permission,\n        options\n      );\n\n  return {\n    data,\n    meta,\n    ...(inModal\n      ? {}\n      : {\n          filters,\n          pagination: {\n            ...meta,\n            offset,\n            limit,\n            redirected: !isPaginationValid,\n          },\n        }),\n    ...(await insights.chrome.auth.getUser()),\n  };\n}\n\nexport async function fetchRole(uuid) {\n  return await roleApi.getRole(uuid);\n}\n\nexport async function fetchRoleForPrincipal(uuid) {\n  return await roleApi.getRole(uuid, 'principal');\n}\n\nexport async function removeRole(roleId) {\n  return await roleApi.deleteRole(roleId);\n}\n\nexport const updateRole = async (roleId, data, useCustomAccess) => {\n  const { data: access } = await roleApi.getRoleAccess(roleId);\n  return roleApi.updateRole(roleId, useCustomAccess ? { ...data, access } : data);\n};\n\nexport const removeRolePermissions = async (role, permissionsToRemove) => {\n  const { data: access } = await roleApi.getRoleAccess(role.uuid);\n  const newRole = { ...role, access: access.filter((item) => !permissionsToRemove.includes(item.permission)) };\n  return roleApi.updateRole(role.uuid, { ...newRole });\n};\n\nexport const patchRole = async (roleId, data) => {\n  return roleApi.patchRole(roleId, data);\n};\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport axios from 'axios';\nimport {\n  authInterceptor,\n  responseDataInterceptor,\n  interceptor401,\n  interceptor500,\n  errorInterceptor,\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { GroupApi, PrincipalApi, RoleApi, PolicyApi, AccessApi, PermissionApi } from '@redhat-cloud-services/rbac-client';\nimport { BaseAPI } from '@redhat-cloud-services/rbac-client/dist/base';\n\nimport { RBAC_API_BASE, COST_API_BASE } from '../../utilities/constants';\nimport registry from '../../utilities/store';\nimport { API_ERROR } from '../../redux/action-types';\n\nconst interceptor403 = (error) => {\n  const store = registry.getStore();\n\n  if (error.response && error.response.status === 403) {\n    store.dispatch({ type: API_ERROR, payload: 403 });\n  }\n\n  throw error;\n};\n\nconst axiosInstance = axios.create();\naxiosInstance.interceptors.request.use(authInterceptor);\naxiosInstance.interceptors.response.use(responseDataInterceptor);\n\naxiosInstance.interceptors.response.use(null, interceptor401);\naxiosInstance.interceptors.response.use(null, interceptor403);\naxiosInstance.interceptors.response.use(null, interceptor500);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nconst principalApi = new PrincipalApi(undefined, RBAC_API_BASE, axiosInstance);\nconst groupApi = new GroupApi(undefined, RBAC_API_BASE, axiosInstance);\nconst roleApi = new RoleApi(undefined, RBAC_API_BASE, axiosInstance);\nconst policyApi = new PolicyApi(undefined, RBAC_API_BASE, axiosInstance);\nconst accessApi = new AccessApi(undefined, RBAC_API_BASE, axiosInstance);\nconst permissionApi = new PermissionApi(undefined, RBAC_API_BASE, axiosInstance);\nconst costApi = new BaseAPI(undefined, COST_API_BASE, axiosInstance);\n\nexport function getPrincipalApi() {\n  return principalApi;\n}\n\nexport function getGroupApi() {\n  return groupApi;\n}\n\nexport function getRoleApi() {\n  return roleApi;\n}\n\nexport function getPolicyApi() {\n  return policyApi;\n}\n\nexport function getAccessApi() {\n  return accessApi;\n}\n\nexport function getPermissionApi() {\n  return permissionApi;\n}\n\nexport function getAxiosInstance() {\n  return axiosInstance;\n}\n\nexport function getCostApi() {\n  return {\n    getResourceTypes: () => costApi.axios.get(`${COST_API_BASE}/resource-types/`),\n    getResource: (path) => costApi.axios.get(`${path}?limit=20000`),\n  };\n}\n","import * as ActionTypes from '../action-types';\nimport * as RoleHelper from '../../helpers/role/role-helper';\nimport { BAD_UUID } from '../../helpers/shared/helpers';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\nimport { locale } from '../../AppEntry';\n\nexport const createRole = (roleData) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    type: ActionTypes.ADD_ROLE,\n    payload: RoleHelper.createRole(roleData),\n    meta: {\n      notifications: {\n        rejected: (payload) => ({\n          variant: 'danger',\n          title: intl.formatMessage(messages.createRoleErrorTitle),\n          dismissDelay: 8000,\n          description: payload?.errors?.[0]?.detail || intl.formatMessage(messages.createRoleErrorDescription),\n        }),\n      },\n    },\n  };\n};\n\nexport const fetchRole = (apiProps) => ({\n  type: ActionTypes.FETCH_ROLE,\n  payload: RoleHelper.fetchRole(apiProps).catch((err) => {\n    const error = err?.errors?.[0] || {};\n    if (error.status === '400' && error.source === 'role uuid validation') {\n      return { error: BAD_UUID };\n    }\n\n    throw err;\n  }),\n});\n\nexport const fetchRoles = (options = {}) => ({\n  type: ActionTypes.FETCH_ROLES,\n  payload: RoleHelper.fetchRoles(options).catch((err) => {\n    const error = err?.errors?.[0] || {};\n    if (error.status === '400' && error.source === 'detail') {\n      return { error: BAD_UUID };\n    }\n\n    throw err;\n  }),\n});\n\nexport const fetchRolesWithPolicies = (options = {}) => ({\n  type: ActionTypes.FETCH_ROLES,\n  payload: RoleHelper.fetchRolesWithPolicies(options),\n});\n\nexport const removeRole = (role) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    type: ActionTypes.REMOVE_ROLE,\n    payload: RoleHelper.removeRole(role),\n    meta: {\n      notifications: {\n        fulfilled: {\n          variant: 'success',\n          title: intl.formatMessage(messages.removeRoleSuccessTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(messages.removeRoleSuccessDescription),\n        },\n        rejected: {\n          variant: 'danger',\n          title: intl.formatMessage(messages.removeRoleErrorTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(messages.removeRoleErrorDescription),\n        },\n      },\n    },\n  };\n};\n\nexport const fetchRoleForUser = (apiProps) => ({\n  type: ActionTypes.FETCH_ROLE_FOR_USER,\n  payload: RoleHelper.fetchRole(apiProps),\n});\n\nexport const fetchRoleForPrincipal = (apiProps) => ({\n  type: ActionTypes.FETCH_ROLE_FOR_PRINCIPAL,\n  payload: RoleHelper.fetchRoleForPrincipal(apiProps),\n});\n\nexport const fetchRolesForWizard = (options = {}) => ({\n  type: ActionTypes.FETCH_ROLES_FOR_WIZARD,\n  payload: RoleHelper.fetchRoles(options),\n});\n\nexport const updateRole = (roleId, data, useCustomAccess) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    type: ActionTypes.UPDATE_ROLE,\n    payload: RoleHelper.updateRole(roleId, data, useCustomAccess),\n    meta: {\n      notifications: {\n        rejected: (payload) => ({\n          variant: 'danger',\n          title: intl.formatMessage(messages.editRoleErrorTitle),\n          dismissDelay: 8000,\n          description: payload?.errors?.[0]?.detail || intl.formatMessage(messages.editRoleErrorDescription),\n        }),\n      },\n    },\n  };\n};\n\nexport const patchRole = (roleId, data) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    type: ActionTypes.PATCH_ROLE,\n    payload: RoleHelper.patchRole(roleId, data),\n    meta: {\n      notifications: {\n        fulfilled: {\n          variant: 'success',\n          title: intl.formatMessage(messages.editRoleSuccessTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(messages.editRoleSuccessDescription),\n        },\n      },\n    },\n  };\n};\n\nexport const removeRolePermissions = (role, permissionsToRemove) => ({\n  type: ActionTypes.UPDATE_ROLE,\n  payload: RoleHelper.removeRolePermissions(role, permissionsToRemove),\n});\n\nexport const updateRolesFilters = (filters) => ({\n  type: ActionTypes.UPDATE_ROLES_FILTERS,\n  payload: filters,\n});\n"],"names":["locale","messages","value","getRegistry","registry","Provider","store","basename","getBaseName","location","pathname","includes","i","roleApi","getRoleApi","createRole","data","createRoles","fetchRoles","limit","offset","name","displayName","nameMatch","scope","orderBy","addFields","username","application","permission","options","listRoles","undefined","fetchRolesWithPolicies","filters","inModal","display_name","roles","isPaginationValid","isOffsetValid","meta","count","getLastPageOffset","pagination","redirected","insights","chrome","auth","getUser","fetchRole","uuid","getRole","fetchRoleForPrincipal","removeRole","roleId","deleteRole","updateRole","useCustomAccess","getRoleAccess","access","removeRolePermissions","role","permissionsToRemove","newRole","filter","item","patchRole","axiosInstance","axios","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","error","status","dispatch","type","API_ERROR","payload","interceptor500","errorInterceptor","principalApi","PrincipalApi","RBAC_API_BASE","groupApi","GroupApi","RoleApi","accessApi","PolicyApi","AccessApi","permissionApi","PermissionApi","costApi","BaseAPI","COST_API_BASE","getPrincipalApi","getGroupApi","getAccessApi","getPermissionApi","getCostApi","getResourceTypes","get","getResource","path","roleData","cache","createIntlCache","intl","createIntl","providerMessages","ActionTypes","RoleHelper","notifications","rejected","variant","title","formatMessage","dismissDelay","description","errors","detail","apiProps","err","source","BAD_UUID","fulfilled","fetchRoleForUser","fetchRolesForWizard","updateRolesFilters"],"sourceRoot":""}