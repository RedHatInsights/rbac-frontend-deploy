{"version":3,"file":"js/4551.1668161293966.95230857f1b07eacd677.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import React, { useEffect, Fragment, useState, useContext, useRef } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Label } from '@patternfly/react-core';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultCompactSettings,\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport PermissionsContext from '../../../utilities/permissions-context';\nconst createRows =\n  (userLinks) =>\n  (data, _expanded, checkedRows = []) => {\n    const intl = useIntl();\n    return data\n      ? data.reduce(\n          (acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => [\n            ...acc,\n            {\n              uuid: username,\n              cells: [\n                isOrgAdmin ? (\n                  <Fragment>\n                    <span>\n                      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n                      <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n                    </span>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n                    <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n                  </Fragment>\n                ),\n                { title: userLinks ? <Link to={`/users/detail/${username}`}>{username.toString()}</Link> : username.toString() },\n                email.toString(),\n                firstName.toString(),\n                lastName.toString(),\n                {\n                  title: (\n                    <Label key=\"status\" color={isActive && 'green'}>\n                      {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n                    </Label>\n                  ),\n                  props: {\n                    'data-is-active': isActive,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === username)),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\nconst UsersList = ({ users, fetchUsers, updateUsersFilters, isLoading, pagination, selectedUsers, setSelectedUsers, userLinks, inModal, props }) => {\n  const { orgAdmin } = useContext(PermissionsContext);\n  // user for text filter to focus\n  const innerRef = useRef(null);\n  const defaultPagination = useSelector(({ userReducer: { users } }) => ({\n    limit: inModal ? users.meta.limit : users.pagination.limit || (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: inModal ? users.meta.offset : users.pagination.offset || (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: inModal ? users.meta.count : users.pagination.count,\n    redirected: !inModal && users.pagination.redirected,\n  }));\n  const intl = useIntl();\n  const history = useHistory();\n\n  const columns = [\n    { title: intl.formatMessage(messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n\n  let stateFilters = useSelector(\n    ({\n      userReducer: {\n        users: { filters },\n      },\n    }) => (history.location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] })\n  );\n\n  const [filters, setFilters] = useState(\n    inModal\n      ? {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n      : stateFilters\n  );\n\n  useEffect(() => {\n    inModal || (defaultPagination.redirected && applyPaginationToUrl(history, defaultPagination.limit, defaultPagination.offset));\n  }, [defaultPagination.redirected]);\n\n  useEffect(() => {\n    const pagination = inModal ? defaultSettings : syncDefaultPaginationWithUrl(history, defaultPagination);\n    const newFilters = inModal ? { status: filters.status } : syncDefaultFiltersWithUrl(history, ['username', 'email', 'status'], filters);\n    setFilters(newFilters);\n    fetchUsers({ ...mappedProps({ ...pagination, filters: newFilters }), inModal });\n  }, []);\n\n  useEffect(() => {\n    if (!inModal) {\n      isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(history, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(history, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    inModal || updateUsersFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n\n  return (\n    <TableToolbarViewOld\n      columns={columns}\n      isSelectable\n      isCompact={true}\n      borders={false}\n      createRows={createRows(userLinks)}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n        fetchUsers({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), inModal }).then(() => {\n          innerRef?.current?.focus();\n        });\n        inModal || applyPaginationToUrl(history, limit, offset);\n        inModal || applyFiltersToUrl(history, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      sortBy={{\n        index: 1,\n        direction: 'asc',\n      }}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      noDataDescription={[\n        intl.formatMessage(messages.filterMatchesNoItems, { items: intl.formatMessage(messages.users).toLowerCase() }),\n        intl.formatMessage(messages.checkFilterBeginning),\n      ]}\n      noData={users.length === 0 && !filters.username && !filters.email}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nconst mapStateToProps = ({ userReducer: { users, isUserDataLoading } }) => {\n  return {\n    users: users.data && users.data.map((data) => ({ ...data, uuid: data.username })),\n    pagination: users.meta,\n    isLoading: isUserDataLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: (apiProps = defaultSettings) => {\n      return dispatch(fetchUsers(apiProps));\n    },\n    updateUsersFilters: (filters) => {\n      dispatch(updateUsersFilters(filters));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    fetchUsers: (apiProps) => {\n      return propsFromDispatch.fetchUsers(apiProps ? apiProps : defaultCompactSettings);\n    },\n  };\n};\n\nUsersList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  users: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchUsers: PropTypes.func.isRequired,\n  updateUsersFilters: PropTypes.func.isRequired,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number,\n    offset: PropTypes.number,\n    count: PropTypes.number,\n  }),\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  inModal: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  inModal: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\nexport const CompactUsersList = connect(mapStateToProps, mapDispatchToProps, mergeProps)(UsersList);\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defaultSettings, defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const textFilterRef = useRef(null);\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: { addRoles, uuid },\n    },\n  }) => ({\n    roles: addRoles.roles,\n    pagination: addRoles.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !addRoles.loaded,\n    groupId: uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) => (rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps(config)))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n      textFilterRef={textFilterRef}\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { CompactUsersList } from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({\n  addNotification,\n  updateGroup,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n  group,\n  onClose,\n}) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? updateGroup(user_data)\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : updateGroup(user_data).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      dismissDelay: 8000,\n      title: intl.formatMessage(selectedGroup ? messages.editingGroupTitle : messages.addingGroupTitle),\n      description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n    });\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      updateGroup,\n      fetchGroup,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditGroupModal);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({\n  removeGroups,\n  group,\n  isLoading,\n  fetchGroup,\n  groupsUuid,\n  isModalOpen,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n}) => {\n  const intl = useIntl();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      fetchGroup(groupsUuid[0].uuid);\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    removeGroups(uuids)\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => ({\n  group: selectedGroup,\n  isLoading: !selectedGroup.loaded,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveGroupModal);\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, _opened, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} state={{ uuid }} to={{ pathname: `/groups/detail/${isPlatformDefault ? 'default-access' : uuid}` }}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addGroup, addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { CompactUsersList } from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst AddGroupMembers = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  addNotification,\n  closeUrl,\n  addMembersToGroup,\n  fetchMembersForGroup,\n  fetchGroups,\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const intl = useIntl();\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      addNotification({\n        variant: 'info',\n        title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n      });\n      addMembersToGroup(uuid, userList).then(() => {\n        fetchMembersForGroup(uuid);\n        fetchGroups({ inModal: false });\n      });\n    }\n\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n    });\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func,\n  }).isRequired,\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  match: PropTypes.object,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      addGroup,\n      addMembersToGroup,\n      fetchMembersForGroup,\n      fetchGroups,\n    },\n    dispatch\n  );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddGroupMembers));\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupPrincipals = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members'].path}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add_members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add_members`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarViewOld\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={hasPermissions.current}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  const intl = useIntl();\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            <FormattedMessage\n              {...messages.defaultAccessGroupEditWarning}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          </Text>\n        </TextContent>\n      }\n      title={intl.formatMessage(messages.warning)}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={intl.formatMessage(messages.continue)}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Modal, ModalVariant, Stack, StackItem, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport RolesList from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst AddGroupRoles = ({\n  history: { push },\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  name,\n  isDefault,\n  isChanged,\n  addNotification,\n  onDefaultGroupChanged,\n  fetchRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n  fetchUuid,\n}) => {\n  const intl = useIntl();\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(messages.addingGroupRolesTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(messages.addingGroupRolesCancelled),\n    });\n    push(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(fetchUuid, rolesList, () => {\n      if (isDefault) {\n        fetchSystemGroup().then(({ value: { data } }) => {\n          fetchRolesForGroup(data[0].uuid);\n          fetchGroup(data[0].uuid);\n        });\n      } else {\n        fetchRolesForGroup();\n        fetchGroup();\n      }\n      setSelectedRoles([]);\n    });\n    if (isDefault && !isChanged) {\n      onDefaultGroupChanged(true);\n    }\n\n    return push(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      title={intl.formatMessage(messages.addRolesToGroup)}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              <FormattedMessage\n                {...messages.onlyGroupRolesVisible}\n                values={{\n                  b: (text) => <b>{text}</b>,\n                  name: name,\n                }}\n              />\n            </Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <Card>\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={true} />\n          </Card>\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.any,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  addNotification: PropTypes.func,\n  onDefaultGroupChanged: PropTypes.func,\n  fetchRolesForGroup: PropTypes.func,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  fetchUuid: PropTypes.string,\n};\n\nexport default AddGroupRoles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory } from 'react-router-dom';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchGroup,\n  fetchSystemGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './group-roles.scss';\n\nconst createRows = (groupUuid, data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description, modified }) => [\n          ...acc,\n          {\n            uuid,\n            title: display_name || name,\n            cells: [\n              <Fragment key={`${uuid}-name`}>\n                <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n              </Fragment>,\n              description,\n              <Fragment key={`${uuid}-modified`}>\n                <DateFormat date={modified} type={getDateFormat(modified)} />\n              </Fragment>,\n            ],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst GroupRoles = ({\n  roles,\n  removeRoles,\n  addRoles,\n  fetchRolesForGroup,\n  isLoading,\n  pagination,\n  match: {\n    params: { uuid },\n  },\n  name,\n  isAdminDefault,\n  isPlatformDefault,\n  systemGroupUuid,\n  isChanged,\n  onDefaultGroupChanged,\n  fetchAddRolesForGroup,\n  disableAddRoles,\n  addNotification,\n  reloadGroup,\n  fetchSystemGroup,\n}) => {\n  const intl = useIntl();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchRolesForGroup(pagination)(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchRolesForGroup(pagination)(systemGroupUuid);\n      }\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchAddRolesForGroup(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchAddRolesForGroup(systemGroupUuid);\n      }\n    }\n  }, [roles, systemGroupUuid]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n\n  const removeRolesCallback = () => {\n    if (isPlatformDefault) {\n      fetchSystemGroup().then(({ value: { data } }) => {\n        fetchRolesForGroup({ ...pagination, offset: 0 })(data[0].uuid);\n      });\n    } else {\n      fetchRolesForGroup({ ...pagination, offset: 0 })(uuid);\n    }\n  };\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(fetchUuid, [role.uuid], removeRolesCallback));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles'].path}\n        render={(args) => (\n          <AddGroupRoles\n            fetchUuid={fetchUuid}\n            fetchGroup={(customId) => reloadGroup(customId ?? fetchUuid)}\n            fetchRolesForGroup={(customId) => fetchRolesForGroup({ ...pagination, offset: 0 })(customId ?? fetchUuid)}\n            fetchSystemGroup={fetchSystemGroup}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${isPlatformDefault ? 'default-access' : uuid}/roles`}\n            addRolesToGroup={addRoles}\n            name={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            addNotification={addNotification}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add_roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/roles/add_roles`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    removeRolesCallback\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id={'tab-roles'}>\n        <TableToolbarViewOld\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          createRows={(...props) => createRows(uuid, ...props)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchRolesForGroup(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nconst reloadWrapper = (event, callback) => {\n  event.payload.then(callback);\n  return event;\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, systemGroup } }) => {\n  const roles = selectedGroup.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.loaded,\n    name: selectedGroup.name,\n    isPlatformDefault: selectedGroup.platform_default,\n    isAdminDefault: selectedGroup.admin_default,\n    isChanged: !selectedGroup.system,\n    disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default,\n    systemGroupUuid: systemGroup?.uuid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addRoles: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n    removeRoles: (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback)),\n    fetchRolesForGroup: (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options)),\n    fetchAddRolesForGroup: (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {})),\n    addNotification: (...props) => dispatch(addNotification(...props)),\n    reloadGroup: (apiProps) => dispatch(fetchGroup(apiProps)),\n    fetchSystemGroup: () => dispatch(fetchSystemGroup()),\n  };\n};\n\nGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRolesForGroup: PropTypes.func.isRequired,\n  fetchAddRolesForGroup: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  addRoles: PropTypes.func,\n  name: PropTypes.string,\n  removeRoles: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  isAdminDefault: PropTypes.bool,\n  isPlatformDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n  disableAddRoles: PropTypes.bool.isRequired,\n  addNotification: PropTypes.func,\n  reloadGroup: PropTypes.func,\n  systemGroupUuid: PropTypes.string,\n  fetchSystemGroup: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupRoles);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  group,\n  fetchGroup,\n  fetchSystemGroup,\n  removeGroups,\n  isFetching,\n  onDelete,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const isPlatformDefault = uuid === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: intl.formatMessage(messages.roles), name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: intl.formatMessage(messages.members), name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    const currUuid = !isPlatformDefault ? uuid : systemGroupUuid;\n    fetchGroup(currUuid);\n    insights.chrome.appObjectId(currUuid);\n    return () => insights.chrome.appObjectId(undefined);\n  }, [uuid, systemGroupUuid]);\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(pathnames.groups.path, pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).path.replace(\n            ':uuid',\n            isPlatformDefault ? 'default-access' : uuid\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).path.replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          {intl.formatMessage(messages.delete)}\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchUuid = isPlatformDefault ? systemGroupUuid : uuid;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            removeGroups([systemGroupUuid]).then(() =>\n              fetchSystemGroup().then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            history.push('/groups/detail/default-access/roles');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'].path, pathnames['group-detail-members-remove'].path]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'].path, pathnames['group-detail-members-edit'].path]}\n            render={(props) => <EditGroup {...props} group={group} cancelRoute={`group/detail/${uuid}`} postMethod={() => fetchGroup(fetchUuid)} />}\n          />\n          <Route\n            path={pathnames['group-detail-roles'].path}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members'].path} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: uuid })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n  group: selectedGroup,\n  isFetching: isRecordLoading || isRecordRolesLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      fetchSystemGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    admin_default: PropTypes.bool,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  removeGroups: PropTypes.func,\n  onDelete: PropTypes.func,\n  defaultUuid: PropTypes.string,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { Fragment, useContext, useEffect, useRef, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarViewOld } from '../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport {\n  applyPaginationToUrl,\n  defaultAdminSettings,\n  defaultSettings,\n  isPaginationPresentInUrl,\n  syncDefaultPaginationWithUrl,\n} from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n  const textFilterRef = useRef(null);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  const { groups, meta, filters, isLoading, systemGroup } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState({ ...(orgAdmin ? defaultAdminSettings : defaultSettings), ...meta });\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination(meta);\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group'].path}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group'].path}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group'].path} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group'].path);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id={'tab-groups'}>\n          <TableToolbarViewOld\n            data={groups.map((group) =>\n              group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n            )}\n            createRows={(...args) => createRows(isAdmin, ...args)}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n            textFilterRef={textFilterRef}\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail'].path} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail'].path}\n        render={(props) => (\n          <Group\n            {...props}\n            defaultUuid={systemGroup?.uuid}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups.path} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","ActiveUser","linkDescription","linkTitle","intl","useIntl","env","insights","chrome","getEnvironment","prefix","isProd","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","formatMessage","messages","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","number","createRows","userLinks","_expanded","checkedRows","reduce","acc","username","is_active","email","firstName","first_name","lastName","last_name","isOrgAdmin","is_org_admin","uuid","cells","key","Link","to","toString","Label","selected","Boolean","find","UsersList","users","fetchUsers","updateUsersFilters","isLoading","pagination","selectedUsers","setSelectedUsers","inModal","innerRef","useRef","defaultPagination","useSelector","userReducer","limit","meta","defaultAdminSettings","defaultSettings","offset","count","redirected","history","useHistory","columns","transforms","nowrap","sortable","stateFilters","filters","location","search","length","Object","keys","useState","setFilters","useEffect","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","mappedProps","isPaginationPresentInUrl","values","some","filter","areFiltersPresentInUrl","isSelectable","isCompact","borders","ouiaId","fetchData","config","prototype","hasOwnProperty","call","orderBy","then","current","focus","applyFiltersToUrl","emptyFilters","setFilterValue","payload","setCheckedItems","newSelection","map","label","sortBy","index","direction","rowWrapper","titlePlural","toLowerCase","titleSingular","noDataDescription","items","noData","value","placeholder","tableId","mapStateToProps","isUserDataLoading","mapDispatchToProps","dispatch","apiProps","addNotification","goBack","push","searchFilter","connect","CompactUsersList","propsFromState","propsFromDispatch","ownProps","defaultCompactSettings","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","fetchGroups","nameMatch","console","response","item","debouncedAsyncValidator","asyncDebounce","ReviewTemplate","formFields","AddGroupWizardContext","getState","Bullseye","Spinner","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","input","useFieldApi","description","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","RolesList","selectedRoles","setSelectedRoles","rolesExcluded","useDispatch","textFilterRef","groupReducer","selectedGroup","addRoles","roles","loaded","groupId","roleReducer","shallowEqual","filterValue","sortByState","setSortByState","fetchRoles","useCallback","fetchAddRolesForGroup","fetchRolesWithPolicies","rows","display_name","onSort","e","fetchTableData","curr","filterPlaceholder","canSort","SetRoles","TextContent","fieldId","SetUsers","Form","Card","SummaryContent","Grid","GridItem","md","role","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","schema","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","dismissDelay","pathname","paths","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","subscription","componentMapper","onSubmit","user_list","user","roles_list","addGroup","initialValues","EditGroupModal","updateGroup","cancelRoute","submitRoute","group","onClose","setSelectedGroup","match","useRouteMatch","fetchGroup","params","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","ModalFormTemplate","ModalProps","pathnames","inputValue","hash","bindActionCreators","RemoveGroupModal","removeGroups","groupsUuid","isModalOpen","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","b","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","isAdmin","_opened","selectedRows","roleCount","principalCount","modified","isPlatformDefault","platform_default","isAdminDefault","admin_default","state","DateFormat","date","getDateFormat","AppTabs","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","AddGroupMembers","closeUrl","addMembersToGroup","fetchMembersForGroup","userList","selector","principals","members","removeModalText","plural","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","useParams","userAccessAdministrator","hasPermissions","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","routes","Route","path","render","args","actionResolver","_rowId","principal","toolbarButtons","multipleMembersSelected","removeText","emptyProps","DefaultGroupChange","withCheckbox","AddGroupRoles","addRolesToGroup","isDefault","isChanged","onDefaultGroupChanged","fetchRolesForGroup","fetchSystemGroup","fetchUuid","showConfirmModal","setShowConfirmModal","rolesList","RemoveRoles","groupUuid","expanded","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","GroupRoles","removeRoles","systemGroupUuid","disableAddRoles","reloadGroup","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","removeRolesCallback","multipleRolesSelected","customId","reloadWrapper","event","callback","systemGroup","system","removeRolesFromGroup","Group","isFetching","onDelete","useLocation","groupExists","BAD_UUID","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","currUuid","appObjectId","breadcrumbsList","getBackRoute","dropdownItems","DropdownItem","replace","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","defaultUuid","isRecordLoading","isRecordRolesLoading","GroupRowWrapper","classnames","adminGroup","RegExp","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","appNavClick","secondaryNav","fetchAdminGroup","exact","ids","Switch","pageAction","paddingBottom"],"sourceRoot":""}