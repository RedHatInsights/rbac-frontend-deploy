{"version":3,"file":"js/8456.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/helpers/shared/filters.js","webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-success.tsx","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/set-service-accounts.tsx","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/service-accounts-list.tsx","webpack:///./src/redux/actions/service-account-actions.ts","webpack:///./src/smart-components/group/add-group/users-list-itless.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/user/user-table-helpers.tsx","webpack:///./src/utilities/async-debounce.ts"],"sourcesContent":["export const syncDefaultFiltersWithUrl = (location, navigate, keys, defaults = {}) => {\n  const searchParams = new URLSearchParams(location.search);\n\n  let filters = keys.reduce((acc, key) => {\n    const values = searchParams.getAll(key);\n    return {\n      ...acc,\n      [key]: values.length > 1 ? values : values[0],\n    };\n  }, {});\n\n  Object.keys(defaults).forEach((key) => {\n    const value = defaults[key];\n    filters = {\n      ...filters,\n      [key]: Array.isArray(filters[key])\n        ? [...new Set([...filters[key], ...(Array.isArray(value) ? value : [value])])]\n        : (value?.length > 0 && value) || filters[key],\n    };\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => searchParams.getAll(key).includes(item) || searchParams.append(key, item));\n    } else {\n      searchParams.get(key) || (value && searchParams.set(key, value));\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n  return filters;\n};\n\nexport const areFiltersPresentInUrl = (location, keys) => {\n  const searchParams = new URLSearchParams(location.search);\n  return keys.some((key) => searchParams.get(key));\n};\n\nexport const applyFiltersToUrl = (location, navigate, newValues) => {\n  const searchParams = new URLSearchParams(location.search);\n  Object.keys(newValues).forEach((key) => searchParams.delete(key));\n\n  Object.keys(newValues).forEach((key) => {\n    const value = newValues[key];\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => item && searchParams.append(key, item));\n    } else {\n      value && searchParams.set(key, value);\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n};\n","import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const env = chrome.getEnvironment();\n  const prefix = chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  const isITLess = useFlag('platform.rbac.itless');\n  return !isITLess && orgAdmin ? (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { ErrorState } from '@patternfly/react-component-groups';\n\nconst WizardError = ({ context, title, text, customFooter }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <ErrorState\n      errorTitle={title}\n      errorDescription={text}\n      customFooter={\n        customFooter || (\n          <Button\n            onClick={() => {\n              setWizardError(undefined);\n              jumpToStep(0);\n            }}\n            variant={ButtonVariant.primary}\n          >\n            {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n          </Button>\n        )\n      }\n    />\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  customFooter: PropTypes.element,\n};\n\nexport default WizardError;\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Progress,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { asyncValidator } from '../validators';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport WizardError from '../../common/wizard-error';\nimport pathnames from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\nimport './review-step.scss';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const navigate = useAppNavigate();\n  const { submittingGroup, submittingServiceAccounts, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || (submittingGroup && !submittingServiceAccounts)) {\n    return (\n      <Bullseye>\n        <Spinner className=\"pf-v5-u-mt-xl\" size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (submittingServiceAccounts && !error) {\n    const value = submittingGroup ? 1 : submittingServiceAccounts ? 2 : 3;\n    return (\n      <EmptyState variant={EmptyStateVariant.lg} data-component-ouia-id=\"wizard-progress\" className=\"rbac-add-group-progress\">\n        <EmptyStateHeader\n          titleText={intl.formatMessage(messages.groupBeingCreated)}\n          icon={<EmptyStateIcon className=\"pf-v5-u-mt-xl\" icon={InProgressIcon} />}\n          headingLevel=\"h4\"\n        />\n        <Progress\n          className=\"pf-v5-u-mt-lg\"\n          style={{ textAlign: 'left' }}\n          min={0}\n          max={3}\n          value={value}\n          label={`${submittingGroup ? 1 : 2} of 2`}\n          title={intl.formatMessage(submittingGroup ? messages.creatingGroup : messages.associatingServiceAccounts)}\n        />\n      </EmptyState>\n    );\n  }\n\n  return error ? (\n    <WizardError\n      context={AddGroupWizardContext}\n      title={\n        submittingGroup\n          ? intl.formatMessage(messages.groupNameTakenTitle)\n          : intl.formatMessage(messages.addGroupServiceAccountsErrorTitle, { count: getState().values['service-accounts-list'].length })\n      }\n      text={\n        submittingGroup\n          ? intl.formatMessage(messages.groupNameTakenText)\n          : intl.formatMessage(messages.addNewGroupServiceAccountsErrorDescription, { count: getState().values['service-accounts-list'].length })\n      }\n      customFooter={\n        submittingGroup ? undefined : (\n          <Button variant={ButtonVariant.primary} onClick={() => navigate(pathnames.groups.link)}>\n            {intl.formatMessage(messages.close)}\n          </Button>\n        )\n      }\n    />\n  ) : (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-v5-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { FormHelperText, HelperText, HelperTextItem, Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core';\nimport { TextArea } from '@patternfly/react-core';\nimport { FormGroup } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from '../validators';\nimport { trimAll } from '../../../helpers/shared/helpers';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) =>\n  groupName === undefined || groupNameError || groupName?.length > 150 ? 'error' : 'default';\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    const trimmedValue = trimAll(value);\n    input.onChange(undefined);\n    debouncedAsyncValidator(trimmedValue)\n      .then(() => {\n        input.onChange(trimmedValue);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n        input.onChange(undefined);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  const groupNameValid = groupNameValidated(groupName, groupNameError);\n  const groupDescriptionValid = groupDescriptionValidated(groupDescription);\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup label={intl.formatMessage(messages.groupName)} isRequired>\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValid}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(_event, value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n          {groupNameValid === 'error' && (\n            <FormHelperText>\n              <HelperText>\n                <HelperTextItem variant={groupNameValid}>{groupName ? groupNameError : intl.formatMessage(messages.required)}</HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup label={intl.formatMessage(messages.groupDescription)}>\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValid}\n            onChange={(_event, value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n          {groupDescriptionValid === 'error' && (\n            <FormHelperText>\n              <HelperText variant={groupDescriptionValid}>\n                <HelperTextItem>{intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}</HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport { Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport UsersListItless from './users-list-itless';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const isITLess = useFlag('platform.rbac.itless');\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  const activeUserProps = {\n    ...(!isITLess && { linkDescription: intl.formatMessage(messages.toManageUsersText) }),\n  };\n\n  const usersListProps = {\n    selectedUsers,\n    setSelectedUsers,\n    displayNarrow: true,\n  };\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser {...activeUserProps} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">{isITLess ? <UsersListItless {...usersListProps} /> : <UsersList {...usersListProps} />}</FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const { isBeta } = useChrome();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n    'service-accounts-list': selectedServiceAccounts,\n  } = formOptions.getState().values;\n  const enableServiceAccounts =\n    (isBeta() && useFlag('platform.rbac.group-service-accounts')) || (!isBeta() && useFlag('platform.rbac.group-service-accounts.stable'));\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  {selectedRoles.map((role, index) => (\n                    <Text className=\"pf-v5-u-mb-0\" key={index}>\n                      {role.label}\n                    </Text>\n                  ))}\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  {selectedUsers.map((role, index) => (\n                    <Text className=\"pf-v5-u-mb-0\" key={index}>\n                      {role.label}\n                    </Text>\n                  ))}\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.serviceAccounts)}\n                  </Text>\n                </GridItem>\n                {enableServiceAccounts && (\n                  <GridItem md={9}>\n                    {selectedServiceAccounts?.map((account, index) => (\n                      <Text className=\"pf-v5-u-mb-0\" key={index}>\n                        {account.name}\n                      </Text>\n                    ))}\n                  </GridItem>\n                )}\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateActions, EmptyStateHeader, EmptyStateFooter } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport messages from '../../../Messages';\n\ninterface AddGroupSuccessProps {\n  onClose: () => void;\n}\n\nconst AddGroupSuccess = ({ onClose }: AddGroupSuccessProps) => {\n  const intl = useIntl();\n  const { setHideForm, setWizardSuccess } = useContext(AddGroupWizardContext);\n\n  return (\n    <EmptyState variant={EmptyStateVariant.lg}>\n      <EmptyStateHeader\n        titleText={<>{intl.formatMessage(messages.groupCreatedSuccessfully)}</>}\n        icon={<EmptyStateIcon className=\"pf-v5-u-mt-xl\" color=\"green\" icon={CheckCircleIcon} />}\n        headingLevel=\"h4\"\n      />\n      <EmptyStateFooter>\n        <Button onClick={onClose} variant=\"primary\">\n          {intl.formatMessage(messages.exit)}\n        </Button>\n        <EmptyStateActions>\n          <Button\n            onClick={() => {\n              setHideForm(false);\n              setWizardSuccess(false);\n            }}\n            variant=\"link\"\n          >\n            {intl.formatMessage(messages.createAnotherGroup)}\n          </Button>\n        </EmptyStateActions>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n\nexport default AddGroupSuccess;\n","import React, { useState, createContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/deprecated';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport WarningModal from '@patternfly/react-component-groups/dist/dynamic/WarningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup, addServiceAccountsToGroup } from '../../../redux/actions/group-actions';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SetServiceAccounts from './set-service-accounts';\nimport SummaryContent from './summary-content';\nimport AddGroupSuccess from './add-group-success';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport paths from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n  // eslint-disable-next-line no-unused-vars\n  setHideForm: (newValue) => null,\n  // eslint-disable-next-line no-unused-vars\n  setWizardSuccess: (newValue) => null,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'set-service-accounts': SetServiceAccounts,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters, orderBy }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const container = useRef(document.createElement('div'));\n  const { isBeta } = useChrome();\n  const enableServiceAccounts =\n    (isBeta() && useFlag('platform.rbac.group-service-accounts')) || (!isBeta() && useFlag('platform.rbac.group-service-accounts.stable'));\n  const schema = useRef(schemaBuilder(container.current, enableServiceAccounts));\n  const navigate = useAppNavigate();\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardCanceled = (canceled) => setWizardContextValue((prev) => ({ ...prev, canceled }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const serviceAccountsAdded = formData['service-accounts-list']?.length > 0;\n    setWizardContextValue((prev) => ({ ...prev, submitting: true, submittingGroup: true, submittingServiceAccounts: serviceAccountsAdded }));\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    dispatch(addGroup(groupData)).then(({ value }) => {\n      setWizardContextValue((prev) => ({\n        ...prev,\n        submittingGroup: false,\n        success: !serviceAccountsAdded,\n        hideForm: !serviceAccountsAdded,\n        submitting: serviceAccountsAdded,\n      }));\n      serviceAccountsAdded &&\n        dispatch(addServiceAccountsToGroup(value.uuid, formData['service-accounts-list']))\n          .then(() => {\n            setWizardContextValue((prev) => ({ ...prev, submitting: false, submittingServiceAccounts: false, success: true, hideForm: true }));\n          })\n          .catch(() => setWizardError(true));\n    });\n  };\n\n  const onClose = () => {\n    setWizardContextValue((prev) => ({ ...prev, success: false, hideForm: false }));\n    postMethod({ limit: pagination.limit, offset: 0, orderBy, filters: {} });\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n  };\n\n  return (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <WarningModal\n        title={intl.formatMessage(messages.exitItemCreation, { item: intl.formatMessage(messages.group).toLocaleLowerCase() })}\n        isOpen={wizardContextValue.canceled}\n        onClose={() => {\n          container.current.hidden = false;\n          setWizardCanceled(false);\n        }}\n        confirmButtonLabel={intl.formatMessage(messages.discard)}\n        onConfirm={redirectToGroups}\n      >\n        {intl.formatMessage(messages.discardedInputsWarning)}\n      </WarningModal>\n      {wizardContextValue.hideForm ? (\n        wizardContextValue.success ? (\n          <Wizard\n            isOpen\n            title={intl.formatMessage(messages.createGroup)}\n            onClose={onClose}\n            steps={[\n              {\n                name: 'success',\n                component: <AddGroupSuccess onClose={onClose} />,\n                isFinishedStep: true,\n              },\n            ]}\n          />\n        ) : null\n      ) : (\n        <FormRenderer\n          schema={schema.current}\n          container={container}\n          subscription={{ values: true }}\n          FormTemplate={FormTemplate}\n          componentMapper={{ ...componentMapper, ...mapperExtension }}\n          onSubmit={onSubmit}\n          initialValues={groupData}\n          onCancel={onCancel(\n            redirectToGroups,\n            () => {\n              container.current.hidden = true;\n              setWizardCanceled(true);\n            },\n            setGroupData\n          )}\n        />\n      )}\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  orderBy: PropTypes.string,\n};\n\nexport default AddGroupWizard;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { Alert, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport ServiceAccountsList from './service-accounts-list';\nimport { ServiceAccount } from '../../../helpers/service-account/service-account-helper';\n\ninterface SetServiceAccountProps {\n  name: string;\n}\n\nconst SetServiceAccounts: React.FunctionComponent<SetServiceAccountProps> = ({ name }) => {\n  const [selectedAccounts, setSelectedAccounts] = useState<ServiceAccount[]>([]);\n\n  const { input } = useFieldApi({ name });\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedAccounts(formOptions.getState().values['service-accounts-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedAccounts);\n    formOptions.change('service-accounts-list', selectedAccounts);\n  }, [selectedAccounts]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              {intl.formatMessage(messages.addServiceAccountsToGroupDescription)}\n              <Alert\n                className=\"pf-v5-u-mt-sm rbac-service-accounts-alert\"\n                variant=\"info\"\n                component=\"span\"\n                isInline\n                isPlain\n                title={intl.formatMessage(messages.visitServiceAccountsPage, {\n                  link: (\n                    <AppLink to=\"/service-accounts\" linkBasename=\"/iam\">\n                      {intl.formatMessage(messages.serviceAccountsPage)}\n                    </AppLink>\n                  ),\n                })}\n              />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-service-accounts\">\n              <ServiceAccountsList selected={selectedAccounts} setSelected={setSelectedAccounts} />\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nexport default SetServiceAccounts;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = (container, enableServiceAccounts) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        className: 'rbac',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        container,\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: enableServiceAccounts ? 'add-service-accounts' : 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          ...(enableServiceAccounts\n            ? [\n                {\n                  name: 'add-service-accounts',\n                  nextStep: 'review',\n                  title: intl.formatMessage(messages.addServiceAccounts),\n                  fields: [\n                    {\n                      component: 'set-service-accounts',\n                      name: 'service-accounts-list',\n                    },\n                  ],\n                },\n              ]\n            : []),\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded, groupId: groupUuid }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const dispatch = useDispatch();\n  const textFilterRef = useRef(null);\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: {\n        addRoles: { roles, pagination, loaded },\n        uuid,\n      },\n    },\n  }) => ({\n    roles,\n    pagination: pagination || { ...defaultCompactSettings, count: roles?.length },\n    isLoading: !loaded,\n    groupId: groupUuid || uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) =>\n      rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps({ ...config, chrome }))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n      textFilterRef={textFilterRef}\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n  groupId: PropTypes.string,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React, { Dispatch, Fragment, SetStateAction, useCallback, useEffect } from 'react';\nimport { ServiceAccountsState } from '../../../redux/reducers/service-account-reducer';\nimport { LAST_PAGE, ServiceAccount } from '../../../helpers/service-account/service-account-helper';\nimport { useIntl } from 'react-intl';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchServiceAccounts } from '../../../redux/actions/service-account-actions';\nimport { PaginationProps } from '../service-account/add-group-service-accounts';\nimport messages from '../../../Messages';\nimport './service-accounts-list.scss';\n\ninterface ServiceAccountsListProps {\n  selected: ServiceAccount[];\n  setSelected: Dispatch<SetStateAction<ServiceAccount[]>>;\n  // optional group ID to check whether SA are assigned to selected group\n  groupId?: string;\n}\n\nconst reducer = ({ serviceAccountReducer }: { serviceAccountReducer: ServiceAccountsState }) => ({\n  serviceAccounts: serviceAccountReducer.serviceAccounts,\n  status: serviceAccountReducer.status,\n  isLoading: serviceAccountReducer.isLoading,\n  limit: serviceAccountReducer.limit,\n  offset: serviceAccountReducer.offset,\n});\n\nconst createRows = (data: ServiceAccount[], checkedRows: ServiceAccount[]) =>\n  data?.reduce(\n    (acc: unknown[], curr: ServiceAccount) => [\n      ...acc,\n      {\n        uuid: curr.uuid,\n        title: curr.name,\n        cells: [\n          curr.name,\n          curr.description,\n          curr.clientId,\n          curr.createdBy,\n          <Fragment key={`${curr.name}-modified`}>\n            <DateFormat date={curr.createdAt} type={getDateFormat(curr.createdAt)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row: ServiceAccount) => row.uuid === curr.uuid)) || curr.assignedToSelectedGroup,\n        disableSelection: curr.assignedToSelectedGroup,\n      },\n    ],\n    []\n  );\n\nexport const ServiceAccountsList: React.FunctionComponent<ServiceAccountsListProps> = ({ selected, setSelected, groupId }) => {\n  const { auth, getEnvironmentDetails } = useChrome();\n  const { serviceAccounts, status, limit, offset, isLoading } = useSelector(reducer);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const fetchAccounts = useCallback(\n    async (props?: PaginationProps) => {\n      const env = getEnvironmentDetails();\n      const token = await auth.getToken();\n      dispatch(fetchServiceAccounts({ limit: props?.limit ?? limit, offset: props?.offset ?? offset, token, sso: env?.sso, groupId }));\n    },\n    [limit, offset]\n  );\n\n  useEffect(() => {\n    fetchAccounts({ limit, offset: 0 });\n  }, []);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description), orderBy: 'description' },\n    { title: intl.formatMessage(messages.clientId), orderBy: 'clientId' },\n    { title: intl.formatMessage(messages.owner), orderBy: 'owner' },\n    { title: intl.formatMessage(messages.timeCreated), orderBy: 'timeCreated' },\n  ];\n\n  return (\n    <TableToolbarView\n      className=\"rbac-service-accounts-list\"\n      columns={columns}\n      isSelectable\n      rows={createRows(serviceAccounts, selected)}\n      data={serviceAccounts}\n      fetchData={fetchAccounts}\n      isLoading={isLoading}\n      pagination={{\n        limit,\n        offset,\n        ...(status === LAST_PAGE ? { count: offset + serviceAccounts.length } : {}),\n      }}\n      paginationProps={{\n        toggleTemplate: ({ firstIndex, lastIndex }) => (\n          <>\n            <b>\n              {firstIndex} - {lastIndex}\n            </b>{' '}\n            of <b>{status === LAST_PAGE ? offset + serviceAccounts.length : 'many'}</b>\n          </>\n        ),\n        isCompact: true,\n      }}\n      checkedRows={selected}\n      setCheckedItems={setSelected}\n      titlePlural={intl.formatMessage(messages.serviceAccounts).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.serviceAccount)}\n      emptyProps={{\n        title: intl.formatMessage(messages.noServiceAccountsFound),\n        description: [intl.formatMessage(messages.contactServiceTeamForAccounts), ''],\n      }}\n      tableId=\"group-add-accounts\"\n      ouiaId=\"group-add-accounts\"\n    />\n  );\n};\n\nexport default ServiceAccountsList;\n","import * as ActionTypes from '../action-types';\nimport * as ServiceAccountsHelper from '../../helpers/service-account/service-account-helper';\n\nexport const fetchServiceAccounts = (apiProps: Record<string, unknown>) => ({\n  type: ActionTypes.FETCH_SERVICE_ACCOUNTS,\n  payload: ServiceAccountsHelper.getServiceAccounts(apiProps),\n  meta: apiProps,\n});\n","import React, { useEffect, Fragment, useState, useContext, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport truncate from 'lodash/truncate';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport AppLink, { mergeToBasename } from '../../../presentational-components/shared/AppLink';\nimport { fetchUsers, updateUsersFilters, updateUsers, updateUserIsOrgAdminStatus } from '../../../redux/actions/user-actions';\nimport { Button, Switch as PF4Switch, Label, Modal, ModalVariant, List, ListItem, Checkbox, Stack, StackItem } from '@patternfly/react-core';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core/deprecated';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { mappedProps, isExternalIdp } from '../../../helpers/shared/helpers';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport messages from '../../../Messages';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { useScreenSize, isSmallScreen } from '@redhat-cloud-services/frontend-components/useScreenSize';\nimport paths from '../../../utilities/pathnames';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst IsAdminCellTextContent = ({ isOrgAdmin }) => {\n  const intl = useIntl();\n\n  return isOrgAdmin ? (\n    <Fragment>\n      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n      <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n    </Fragment>\n  ) : (\n    <Fragment>\n      <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n      <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n    </Fragment>\n  );\n};\n\nIsAdminCellTextContent.propTypes = {\n  isOrgAdmin: PropTypes.bool,\n};\n\nconst IsAdminCellDropdownContent = ({ isOrgAdmin, userId, isDisabled, toggleUserIsOrgAdminStatus }) => {\n  const [isAdminDropdownOpen, setIsAdminDropdownOpen] = useState(false);\n  const intl = useIntl();\n\n  const onIsAdminDropdownToggle = (isOpen) => {\n    setIsAdminDropdownOpen(isOpen);\n  };\n\n  const onIsAdminDropdownSelect = (_event) => {\n    const isAdminStatusMap = { yes: true, no: false };\n\n    toggleUserIsOrgAdminStatus(isAdminStatusMap[_event?.target?.id], null, { userId });\n    setIsAdminDropdownOpen(false);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key={`is-admin-dropdown-item-${userId}`} componentID=\"yes\">\n      {intl.formatMessage(messages.yes)}\n    </DropdownItem>,\n    <DropdownItem key={`is-not-admin-dropdown-item-${userId}`} componentID=\"no\">\n      {intl.formatMessage(messages.no)}\n    </DropdownItem>,\n  ];\n  return (\n    <Dropdown\n      id={`is-admin-dropdown-${userId}`}\n      key={`is-admin-dropdown-${userId}`}\n      onSelect={onIsAdminDropdownSelect}\n      toggle={\n        <DropdownToggle\n          id={`is-admin-dropdown-toggle-${userId}`}\n          key={`is-admin-dropdown-toggle-${userId}`}\n          isDisabled={isDisabled}\n          onToggle={onIsAdminDropdownToggle}\n        >\n          {isOrgAdmin ? intl.formatMessage(messages.yes) : intl.formatMessage(messages.no)}\n        </DropdownToggle>\n      }\n      isOpen={isAdminDropdownOpen}\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nIsAdminCellDropdownContent.propTypes = {\n  isOrgAdmin: PropTypes.bool,\n  userId: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  toggleUserIsOrgAdminStatus: PropTypes.func,\n};\n\nconst UsersListItless = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, displayNarrow, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [isDeactivateConfirmationModalOpen, setIsDeactivateConfirmationModalOpen] = useState(false);\n  const [isDeactivateConfirmationChecked, setIsDeactivateConfirmationChecked] = useState(false);\n  const [isToolbarDropdownOpen, setIsToolbarDropdownOpen] = useState(false);\n  const { orgAdmin } = useContext(PermissionsContext);\n  const screenSize = useScreenSize();\n  // use for text filter to focus\n  const innerRef = useRef(null);\n  const isAdmin = orgAdmin;\n  const chrome = useChrome();\n  const [currentUser, setCurrentUser] = useState({});\n  const [userToken, setUserToken] = useState('');\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.external_source_id })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n\n  const confirmDeactivateUsers = () => {\n    toggleUserActivationStatus(false, null, selectedRows);\n    setIsDeactivateConfirmationModalOpen(false);\n    setIsDeactivateConfirmationChecked(false);\n  };\n\n  const toggleUserIsOrgAdminStatus = (isOrgAdmin, _event, user = {}) => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    const newUserObj = { id: user.userId, is_org_admin: isOrgAdmin };\n    dispatch(updateUserIsOrgAdminStatus(newUserObj))\n      .then(() => {\n        setFilters(newFilters);\n        if (setSelectedUsers) {\n          setSelectedUsers([]);\n        } else {\n          setSelectedRows([]);\n        }\n        fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const toolbarDropdowns = () => {\n    const onToggle = (isOpen) => {\n      setIsToolbarDropdownOpen(isOpen);\n    };\n    const onToolbarDropdownSelect = async (_event) => {\n      const userActivationStatusMap = { activate: true, deactivate: false };\n\n      if (_event?.target?.id === 'deactivate') {\n        setIsDeactivateConfirmationModalOpen(true);\n      } else {\n        toggleUserActivationStatus(userActivationStatusMap[_event?.target?.id], null, selectedRows);\n      }\n      setIsToolbarDropdownOpen(false);\n    };\n    const dropdownItems = [\n      <DropdownItem key=\"activate-users-dropdown-item\" componentID=\"activate\">\n        {intl.formatMessage(messages.activateUsersButton)}\n      </DropdownItem>,\n      <DropdownItem key=\"deactivate-users-dropdown-item\" componentID=\"deactivate\">\n        {intl.formatMessage(messages.deactivateUsersButton)}\n      </DropdownItem>,\n    ];\n    return (\n      <Dropdown\n        onSelect={onToolbarDropdownSelect}\n        toggle={\n          <DropdownToggle id=\"toolbar-dropdown-toggle\" isDisabled={selectedRows.length === 0} onToggle={onToggle}>\n            {intl.formatMessage(messages.activateUsersButton)}\n          </DropdownToggle>\n        }\n        isOpen={isToolbarDropdownOpen}\n        dropdownItems={dropdownItems}\n      />\n    );\n  };\n  const toolbarButtons = () => [\n    <AppLink to={paths['invite-users'].link} key=\"invite-users\" className=\"rbac-m-hide-on-sm\">\n      <Button ouiaId=\"invite-users-button\" variant=\"primary\" aria-label=\"Invite users\">\n        {intl.formatMessage(messages.inviteUsers)}\n      </Button>\n    </AppLink>,\n    ...(isSmallScreen(screenSize)\n      ? [\n          {\n            label: intl.formatMessage(messages.inviteUsers),\n            onClick: () => {\n              navigate(mergeToBasename(paths['invite-users'].link));\n            },\n          },\n        ]\n      : []),\n  ];\n  const toggleUserActivationStatus = (isActivated, _event, users = []) => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    const newUserList = users.map((user) => {\n      return { id: user?.uuid || user?.external_source_id, is_active: isActivated };\n    });\n    dispatch(updateUsers(newUserList))\n      .then(() => {\n        setFilters(newFilters);\n        if (setSelectedUsers) {\n          setSelectedUsers([]);\n        } else {\n          setSelectedRows([]);\n        }\n        fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    chrome.auth.getUser().then((user) => setCurrentUser(user));\n    chrome.auth.getToken().then((token) => setUserToken(token));\n  }, []);\n\n  const isUserSelectable = (external_source_id) => external_source_id != currentUser?.identity?.internal?.account_id;\n\n  const createITLessRows = (userLinks, data, checkedRows = []) => {\n    const maxLength = 25;\n    return data\n      ? data.reduce(\n          (\n            acc,\n            { external_source_id, username, is_active: is_active, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }\n          ) => [\n            ...acc,\n            {\n              uuid: external_source_id,\n              cells: [\n                {\n                  title:\n                    isAdmin && !displayNarrow ? (\n                      <IsAdminCellDropdownContent\n                        isOrgAdmin={isOrgAdmin}\n                        userId={external_source_id}\n                        isDisabled={!isAdmin || currentUser?.identity?.internal?.account_id == external_source_id}\n                        toggleUserIsOrgAdminStatus={toggleUserIsOrgAdminStatus}\n                      />\n                    ) : (\n                      <IsAdminCellTextContent isOrgAdmin={isOrgAdmin} />\n                    ),\n                  props: {\n                    'data-is-active': isOrgAdmin,\n                  },\n                },\n                {\n                  title: userLinks ? (\n                    <AppLink to={paths['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n                  ) : displayNarrow ? (\n                    <span title={username}>{truncate(username, { length: maxLength })}</span>\n                  ) : (\n                    username\n                  ),\n                },\n                {\n                  title: displayNarrow ? <span title={email}>{truncate(email, { length: maxLength })}</span> : email,\n                },\n                firstName,\n                lastName,\n                {\n                  title:\n                    isAdmin && !displayNarrow ? (\n                      <PF4Switch\n                        key=\"status\"\n                        isDisabled={!isAdmin || currentUser?.identity?.internal?.account_id == external_source_id}\n                        label={intl.formatMessage(messages.active)}\n                        labelOff={intl.formatMessage(messages.inactive)}\n                        isChecked={is_active}\n                        onChange={(checked, _event) => {\n                          toggleUserActivationStatus(checked, _event, [\n                            {\n                              external_source_id,\n                              is_active: is_active,\n                            },\n                          ]);\n                        }}\n                      />\n                    ) : (\n                      <Label key=\"status\" color={is_active ? 'green' : 'grey'}>\n                        {intl.formatMessage(is_active ? messages.active : messages.inactive)}\n                      </Label>\n                    ),\n                  props: {\n                    'data-is-active': is_active,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows?.find?.(({ uuid }) => uuid === external_source_id)),\n              disableSelection: displayNarrow ? undefined : !isUserSelectable(external_source_id),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n  const columns = [\n    { title: intl.formatMessage(displayNarrow ? messages.orgAdmin : messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    if (setSelectedUsers) {\n      setSelectedUsers((users) => {\n        return newSelection(users)\n          .filter((user) => (displayNarrow ? user : user?.uuid != currentUser?.identity?.internal?.account_id))\n          .map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n      });\n    } else {\n      setSelectedRows((users) => {\n        return newSelection(users)\n          .filter((user) => (displayNarrow ? user : user?.uuid != currentUser?.identity?.internal?.account_id))\n          .map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n      });\n    }\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n  return (\n    <>\n      <Modal\n        title={intl.formatMessage(messages.deactivateUsersConfirmationModalTitle)}\n        titleIconVariant=\"warning\"\n        description={intl.formatMessage(messages.deactivateUsersConfirmationModalDescription)}\n        variant={ModalVariant.medium}\n        isOpen={isDeactivateConfirmationModalOpen}\n        footer={\n          <Stack hasGutter>\n            <StackItem>\n              <Checkbox\n                label={intl.formatMessage(messages.deactivateUsersConfirmationModalCheckboxText)}\n                isChecked={isDeactivateConfirmationChecked}\n                onChange={(checked) => {\n                  setIsDeactivateConfirmationChecked(checked);\n                }}\n                id=\"deactivateUsersConfirmationCheckbox\"\n                name=\"deactivate-users-confirmation-checkbox\"\n              />\n            </StackItem>\n            <StackItem>\n              <Button\n                key=\"confirm-deactivate-users\"\n                ouiaId=\"danger-confirm-deactivate-users-button\"\n                isDisabled={selectedRows.length === 0 || !isDeactivateConfirmationChecked}\n                variant=\"danger\"\n                onClick={() => {\n                  confirmDeactivateUsers();\n                }}\n              >\n                {intl.formatMessage(messages.deactivateUsersConfirmationButton)}\n              </Button>\n              <Button\n                id=\"deactivate-users-confirmation-cancel\"\n                ouiaId=\"secondary-cancel-button\"\n                key=\"cancel\"\n                variant=\"link\"\n                onClick={() => {\n                  setIsDeactivateConfirmationModalOpen(false);\n                }}\n              >\n                {intl.formatMessage(messages.cancel)}\n              </Button>\n            </StackItem>\n          </Stack>\n        }\n        onClose={() => {\n          setIsDeactivateConfirmationModalOpen(false);\n        }}\n      >\n        <List isPlain isBordered>\n          {selectedRows.map((user) => (\n            <ListItem key={user.uuid}>{user.label}</ListItem>\n          ))}\n        </List>\n      </Modal>\n      <TableToolbarView\n        toolbarChildren={isAdmin && !displayNarrow ? toolbarDropdowns : () => null}\n        toolbarButtons={isAdmin && !displayNarrow && !isExternalIdp(userToken) ? toolbarButtons : () => []}\n        isCompact\n        isSelectable\n        borders={false}\n        columns={columns}\n        rows={createITLessRows(userLinks, users, selectedUsers ? selectedUsers : selectedRows)}\n        sortBy={sortByState}\n        onSort={(e, index, direction) => {\n          const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - 1].key}`;\n          setSortByState({ index, direction });\n          fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n        }}\n        data={users}\n        ouiaId=\"users-table\"\n        fetchData={(config) => {\n          const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n          const { username, email, count, limit, offset, orderBy } = config;\n\n          fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n            innerRef?.current?.focus();\n          });\n          usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n        }}\n        emptyFilters={{ username: '', email: '', status: '' }}\n        setFilterValue={({ username, email, status }) => {\n          updateFilters({\n            username: typeof username === 'undefined' ? filters.username : username,\n            email: typeof email === 'undefined' ? filters.email : email,\n            status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n          });\n        }}\n        isLoading={isLoading}\n        pagination={pagination}\n        checkedRows={selectedUsers ? selectedUsers : selectedRows}\n        setCheckedItems={setCheckedItems}\n        rowWrapper={UsersRow}\n        titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n        titleSingular={intl.formatMessage(messages.user)}\n        filters={[\n          {\n            key: 'username',\n            value: filters.username,\n            placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n            innerRef,\n          },\n          {\n            key: 'email',\n            value: filters.email,\n            placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n            innerRef,\n          },\n          {\n            key: 'status',\n            value: filters.status,\n            label: intl.formatMessage(messages.status),\n            type: 'checkbox',\n            items: [\n              { label: intl.formatMessage(messages.active), value: 'Active' },\n              { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n            ],\n          },\n        ]}\n        tableId=\"users-list\"\n        {...props}\n      />\n    </>\n  );\n};\n\nUsersListItless.propTypes = {\n  displayNarrow: PropTypes.bool,\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersListItless.defaultProps = {\n  displayNarrow: false,\n  users: [],\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersListItless;\n","import React, { useEffect, useState, useContext, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport messages from '../../../Messages';\nimport { createRows } from '../../user/user-table-helpers';\n\nconst UsersList = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, displayNarrow, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { orgAdmin } = useContext(PermissionsContext);\n  // use for text filter to focus\n  const innerRef = useRef(null);\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.username })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n  const columns = [\n    { title: intl.formatMessage(displayNarrow ? messages.orgAdmin : messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n  return (\n    <TableToolbarView\n      isCompact\n      isSelectable\n      borders={false}\n      columns={columns}\n      rows={createRows(userLinks, users, intl, selectedUsers, true)}\n      sortBy={sortByState}\n      onSort={(e, index, direction) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - 1].key}`;\n        setSortByState({ index, direction });\n        fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n      }}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n\n        fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n          innerRef?.current?.focus();\n        });\n        usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nUsersList.propTypes = {\n  displayNarrow: PropTypes.bool,\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  displayNarrow: false,\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersList;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { Fragment } from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { IntlShape } from 'react-intl';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport AppLink from '../../presentational-components/shared/AppLink';\n\ninterface UserProps {\n  email: string;\n  first_name: string;\n  is_active: boolean;\n  is_org_admin: boolean;\n  last_name: string;\n  username: string;\n  uuid: string;\n}\n\nexport type CellObject = { title: string | React.RefAttributes<HTMLAnchorElement>; props?: { 'data-is-active': boolean } };\n\nexport interface RowProps {\n  uuid: string; // username\n  cells: [\n    React.ReactNode, // yes or no for isOrgAdmin\n    CellObject, // link to user or just username\n    string, // email\n    string, // firstName\n    string, // lastName\n    CellObject // status\n  ];\n  selected: boolean;\n}\n\nexport const createRows = (userLinks: boolean, data: UserProps[] = [], intl: IntlShape, checkedRows = [], isSelectable = false): RowProps[] =>\n  data?.reduce<RowProps[]>((acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => {\n    const newEntry: RowProps = {\n      uuid: username,\n      cells: [\n        isOrgAdmin ? (\n          <Fragment>\n            <CheckIcon key=\"yes-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <CloseIcon key=\"no-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n          </Fragment>\n        ),\n        {\n          title: userLinks ? (\n            <AppLink to={pathnames['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n          ) : (\n            username.toString()\n          ),\n        },\n        email,\n        firstName,\n        lastName,\n        {\n          title: (\n            <Label key=\"status\" color={isActive ? 'green' : 'grey'}>\n              {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n            </Label>\n          ),\n          props: {\n            'data-is-active': isActive,\n          },\n        },\n      ],\n      selected: isSelectable ? Boolean(checkedRows?.find?.(({ uuid }) => uuid === username)) : false,\n    };\n\n    return [...acc, newEntry];\n  }, []);\n","import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nexport default (asyncFunction: (...args: any[]) => Promise<any>, debounceTime = 250, options = { onlyResolvesLast: false }) =>\n  awesomeDebouncePromise(asyncFunction, debounceTime, options);\n"],"names":["syncDefaultFiltersWithUrl","location","navigate","keys","defaults","searchParams","URLSearchParams","search","filters","reduce","acc","key","values","getAll","length","Object","forEach","value","Array","isArray","Set","item","includes","append","get","set","pathname","toString","replace","areFiltersPresentInUrl","some","applyFiltersToUrl","newValues","delete","linkBasename","useNavigate","to","options","ActiveUser","linkDescription","linkTitle","intl","chrome","env","getEnvironment","prefix","isProd","orgAdmin","useContext","useFlag","Text","className","component","TextVariants","h7","formatMessage","usersDescription","a","href","target","rel","propTypes","defaultProps","UsersRow","row","props","status","isActive","data","isRequired","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","WizardError","title","text","customFooter","jumpToStep","setWizardError","errorTitle","errorDescription","undefined","ButtonVariant","primary","returnToStepNumber","number","ReviewTemplate","formFields","useIntl","useAppNavigate","submittingGroup","submittingServiceAccounts","AddGroupWizardContext","getState","useEffect","then","catch","Bullseye","Spinner","size","EmptyState","EmptyStateVariant","lg","EmptyStateHeader","titleText","groupBeingCreated","icon","EmptyStateIcon","headingLevel","Progress","style","textAlign","min","max","label","creatingGroup","associatingServiceAccounts","groupNameTakenTitle","addGroupServiceAccountsErrorTitle","count","groupNameTakenText","addNewGroupServiceAccountsErrorDescription","pathnames","groups","link","close","Title","reviewDetails","SetName","input","name","description","groupName","setGroupName","useState","groupNameError","setGroupNameError","groupDescription","setGroupDescription","processGroupName","trimmedValue","onChange","groupNameValid","groupNameValidated","groupDescriptionValid","groupDescriptionValidated","Stack","hasGutter","StackItem","FormGroup","TextInput","validated","onBlur","_event","FormHelperText","HelperText","HelperTextItem","required","TextArea","change","resizeOrientation","maxCharactersWarning","SetRoles","selectedRoles","setSelectedRoles","TextContent","selectRolesForGroupText","fieldId","rolesExcluded","SetUsers","selectedUsers","setSelectedUsers","isITLess","activeUserProps","toManageUsersText","usersListProps","displayNarrow","Form","A","SummaryContent","isBeta","useChrome","selectedServiceAccounts","enableServiceAccounts","Grid","GridItem","md","h4","p","roles","map","role","index","members","serviceAccounts","account","onClose","setHideForm","setWizardSuccess","groupCreatedSuccessfully","color","EmptyStateFooter","exit","EmptyStateActions","createAnotherGroup","createContext","newValue","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","selectedAccounts","setSelectedAccounts","addServiceAccountsToGroupDescription","Alert","isInline","isPlain","visitServiceAccountsPage","AppLink","serviceAccountsPage","selected","setSelected","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","pagination","orderBy","dispatch","useDispatch","container","useRef","document","createElement","schema","cache","createIntl","locale","messages","fields","isDynamic","inModal","showTitles","createGroup","nameAndDescription","validate","REQUIRED","TEXTAREA","hideField","MAX_LENGTH","threshold","addRoles","addMembers","addServiceAccounts","buttons","StepTemplate","schemaBuilder","current","groupData","wizardContextValue","setWizardContextValue","hideForm","redirectToGroups","addNotification","addingGroupTitle","dismissDelay","addingGroupCanceledDescription","page","per_page","limit","prev","setWizardCanceled","canceled","offset","Provider","WarningModal","exitItemCreation","group","toLocaleLowerCase","isOpen","hidden","confirmButtonLabel","discard","onConfirm","discardedInputsWarning","Wizard","steps","isFinishedStep","subscription","componentMapper","onSubmit","serviceAccountsAdded","user_list","user","username","roles_list","uuid","initialValues","RolesList","groupId","groupUuid","textFilterRef","isLoading","useSelector","groupReducer","selectedGroup","loaded","roleReducer","meta","shallowEqual","columns","transforms","filterValue","setFilterValue","sortByState","setSortByState","direction","fetchRoles","useCallback","config","rows","checkedRows","display_name","cells","Boolean","find","createRows","isSelectable","isCompact","borders","sortBy","onSort","e","fetchTableData","curr","filterPlaceholder","roleName","toLowerCase","fetchData","ouiaId","setCheckedItems","newSelection","titlePlural","titleSingular","tableId","canSort","reducer","serviceAccountReducer","ServiceAccountsList","auth","getEnvironmentDetails","fetchAccounts","async","token","getToken","apiProps","sso","payload","clientId","owner","timeCreated","createdBy","DateFormat","date","createdAt","assignedToSelectedGroup","disableSelection","paginationProps","toggleTemplate","firstIndex","lastIndex","serviceAccount","emptyProps","noServiceAccountsFound","contactServiceTeamForAccounts","IsAdminCellTextContent","isOrgAdmin","yes","no","IsAdminCellDropdownContent","userId","toggleUserIsOrgAdminStatus","isAdminDropdownOpen","setIsAdminDropdownOpen","dropdownItems","componentID","id","onSelect","toggle","onToggle","UsersListItless","userLinks","usesMetaInURL","useLocation","selectedRows","setSelectedRows","isDeactivateConfirmationModalOpen","setIsDeactivateConfirmationModalOpen","isDeactivateConfirmationChecked","setIsDeactivateConfirmationChecked","isToolbarDropdownOpen","setIsToolbarDropdownOpen","screenSize","innerRef","isAdmin","currentUser","setCurrentUser","userToken","setUserToken","userReducer","users","redirected","stateFilters","isUserDataLoading","external_source_id","newFilters","newUserObj","is_org_admin","setFilters","err","console","toggleUserActivationStatus","isActivated","newUserList","is_active","getUser","isUserSelectable","identity","internal","account_id","updateStateFilters","orgAdministrator","email","firstName","lastName","active","filter","Modal","deactivateUsersConfirmationModalTitle","titleIconVariant","deactivateUsersConfirmationModalDescription","ModalVariant","medium","footer","Checkbox","deactivateUsersConfirmationModalCheckboxText","isChecked","checked","deactivateUsersConfirmationButton","List","isBordered","ListItem","toolbarChildren","activateUsersButton","deactivateUsersButton","activate","deactivate","toolbarButtons","inviteUsers","first_name","last_name","labelOff","inactive","Label","createITLessRows","prototype","hasOwnProperty","call","focus","emptyFilters","rowWrapper","placeholder","filterByKey","items","searchFilter","UsersList","asyncValidator","idKey","response","nameMatch","nameAlreadyTaken","debouncedAsyncValidator","asyncFunction","debounceTime","onlyResolvesLast"],"sourceRoot":""}