{"version":3,"file":"js/694.78512e425bb1d2c0aacf.js","mappings":"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","sources":["webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded, groupId: groupUuid }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const textFilterRef = useRef(null);\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: {\n        addRoles: { roles, pagination, loaded },\n        uuid,\n      },\n    },\n  }) => ({\n    roles,\n    pagination: pagination || { ...defaultCompactSettings, count: roles?.length },\n    isLoading: !loaded,\n    groupId: groupUuid || uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) => (rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps(config)))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n      textFilterRef={textFilterRef}\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n  groupId: PropTypes.string,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React, { useEffect, Fragment, useState, useContext, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { Label } from '@patternfly/react-core';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport pathnames from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\n\nconst createRows = (userLinks, data, checkedRows = [], intl) =>\n  data\n    ? data.reduce(\n        (acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => [\n          ...acc,\n          {\n            uuid: username,\n            cells: [\n              isOrgAdmin ? (\n                <Fragment>\n                  <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n                  <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n                </Fragment>\n              ) : (\n                <Fragment>\n                  <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n                  <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n                </Fragment>\n              ),\n              {\n                title: userLinks ? (\n                  <AppLink to={pathnames['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n                ) : (\n                  username.toString()\n                ),\n              },\n              email,\n              firstName,\n              lastName,\n              {\n                title: (\n                  <Label key=\"status\" color={isActive ? 'green' : 'grey'}>\n                    {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n                  </Label>\n                ),\n                props: {\n                  'data-is-active': isActive,\n                },\n              },\n            ],\n            selected: Boolean(checkedRows?.find?.(({ uuid }) => uuid === username)),\n          },\n        ],\n        []\n      )\n    : [];\n\nconst UsersList = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { orgAdmin } = useContext(PermissionsContext);\n  // use for text filter to focus\n  const innerRef = useRef(null);\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.username })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n\n  const rows = createRows(userLinks, users, selectedUsers, intl);\n  const columns = [\n    { title: intl.formatMessage(messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n\n  return (\n    <TableToolbarView\n      isCompact\n      isSelectable\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index].key}`;\n        setSortByState({ index, direction });\n        fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n      }}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n\n        fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n          innerRef?.current?.focus();\n        });\n        usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nUsersList.propTypes = {\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersList;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Alert, Button, Modal, ModalVariant, Stack, StackItem, Title } from '@patternfly/react-core';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { fetchGroup } from '../../../redux/actions/group-actions';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport RolesList from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\nimport './add-group-roles.scss';\n\nconst AddGroupRoles = ({\n  afterSubmit,\n  fetchUuid,\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  groupName: name,\n  isDefault,\n  isChanged,\n  onDefaultGroupChanged,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  let { state } = useLocation();\n\n  const { groupId: uuid } = useParams();\n  const groupId = isDefault && fetchUuid ? fetchUuid : uuid;\n  const navigate = useAppNavigate();\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const { groupName, isRecordLoading } = useSelector(({ groupReducer: { selectedGroup, isRecordLoading } }) => ({\n    groupName: name || state?.name || selectedGroup.name,\n    isRecordLoading,\n  }));\n\n  useEffect(() => {\n    groupName || dispatch(fetchGroup(groupId));\n  }, []);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupRolesTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupRolesCancelled),\n      })\n    );\n    navigate(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(groupId, rolesList).then(afterSubmit);\n    setSelectedRoles([]);\n    isDefault && !isChanged && onDefaultGroupChanged(true);\n    return navigate(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      className=\"rbac\"\n      title={intl.formatMessage(messages.addRolesToGroup, {\n        name: isRecordLoading ? <Skeleton size={SkeletonSize.xs} className=\"rbac-c-skeleton__add-role-to-group\" /> : groupName,\n      })}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <Alert variant=\"info\" isInline isPlain title={intl.formatMessage(messages.onlyGroupRolesVisible)} />\n        </StackItem>\n        <StackItem>\n          <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={true} groupId={groupId} />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  afterSubmit: PropTypes.func,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  groupName: PropTypes.string,\n  fetchUuid: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n};\n\nexport default AddGroupRoles;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  const intl = useIntl();\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            <FormattedMessage\n              {...messages.defaultAccessGroupEditWarning}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          </Text>\n        </TextContent>\n      }\n      title={intl.formatMessage(messages.warning)}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={intl.formatMessage(messages.continue)}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n"],"names":["ActiveUser","linkDescription","linkTitle","intl","useIntl","env","insights","chrome","getEnvironment","prefix","isProd","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","formatMessage","messages","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","RolesList","selectedRoles","setSelectedRoles","rolesExcluded","groupUuid","groupId","dispatch","useDispatch","textFilterRef","useRef","useSelector","groupReducer","selectedGroup","addRoles","roles","pagination","loaded","uuid","defaultCompactSettings","count","length","isLoading","roleReducer","meta","filters","shallowEqual","columns","title","key","orderBy","transforms","sortable","current","useState","filterValue","setFilterValue","index","direction","sortByState","setSortByState","fetchRoles","useCallback","config","fetchAddRolesForGroup","fetchRolesWithPolicies","mappedProps","rows","checkedRows","reduce","acc","display_name","name","description","cells","selected","Boolean","find","createRows","useEffect","isSelectable","isCompact","borders","sortBy","onSort","e","limit","offset","fetchTableData","curr","value","filterPlaceholder","toLowerCase","fetchData","ouiaId","setCheckedItems","newSelection","map","label","titlePlural","titleSingular","tableId","canSort","UsersList","selectedUsers","setSelectedUsers","userLinks","usesMetaInURL","navigate","useNavigate","location","useLocation","innerRef","users","userReducer","defaultAdminSettings","defaultSettings","redirected","isUserDataLoading","username","stateFilters","search","Object","keys","apiProps","fetchUsers","updateStateFilters","updateUsersFilters","is_active","email","firstName","first_name","lastName","last_name","isOrgAdmin","is_org_admin","Fragment","to","pathnames","toString","Label","color","nowrap","setFilters","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","isPaginationPresentInUrl","values","some","filter","areFiltersPresentInUrl","prototype","hasOwnProperty","call","then","focus","applyFiltersToUrl","emptyFilters","payload","rowWrapper","placeholder","type","items","searchFilter","GroupRowWrapper","classnames","isPlatformDefault","isAdminDefault","AddGroupRoles","afterSubmit","fetchUuid","closeUrl","addRolesToGroup","groupName","isDefault","isChanged","onDefaultGroupChanged","state","useParams","useAppNavigate","showConfirmModal","setShowConfirmModal","isRecordLoading","fetchGroup","onCancel","addNotification","variant","dismissDelay","onSubmit","rolesList","role","isOpen","onClose","Modal","size","SkeletonSize","ModalVariant","actions","Button","isDisabled","onClick","Stack","hasGutter","StackItem","Title","headingLevel","Alert","isInline","isPlain","DefaultGroupChange","text","TextContent","b","withCheckbox","confirmButtonLabel"],"sourceRoot":""}