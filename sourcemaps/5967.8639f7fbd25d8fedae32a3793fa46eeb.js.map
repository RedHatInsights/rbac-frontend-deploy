{"version":3,"file":"js/5967.83a6b98a7d39f7d65a11.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/createIcon.js","webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/exclamation-triangle-icon.js","webpack:///./src/presentational-components/shared/RemoveModal.js","webpack:///./node_modules/react-intl/lib/src/components/message.js","webpack:///./src/smart-components/group/service-account/remove-group-service-accounts.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nexport var IconSize;\n(function (IconSize) {\n    IconSize[\"sm\"] = \"sm\";\n    IconSize[\"md\"] = \"md\";\n    IconSize[\"lg\"] = \"lg\";\n    IconSize[\"xl\"] = \"xl\";\n})(IconSize || (IconSize = {}));\nexport const getSize = (size) => {\n    switch (size) {\n        case IconSize.sm:\n            return '1em';\n        case IconSize.md:\n            return '1.5em';\n        case IconSize.lg:\n            return '2em';\n        case IconSize.xl:\n            return '3em';\n        default:\n            return '1em';\n    }\n};\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\nexport function createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {\n    var _a;\n    return _a = class SVGIcon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.id = `icon-title-${currentId++}`;\n            }\n            render() {\n                const _a = this.props, { size, color, title, noVerticalAlign } = _a, props = __rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n                const hasTitle = Boolean(title);\n                const heightWidth = getSize(size);\n                const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n                const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n                const viewBox = [xOffset, yOffset, width, height].join(' ');\n                return (React.createElement(\"svg\", Object.assign({ style: style, fill: color, height: heightWidth, width: heightWidth, viewBox: viewBox, \"aria-labelledby\": hasTitle ? this.id : null, \"aria-hidden\": hasTitle ? null : true, role: \"img\" }, props),\n                    hasTitle && React.createElement(\"title\", { id: this.id }, title),\n                    React.createElement(\"path\", { d: svgPath })));\n            }\n        },\n        _a.displayName = name,\n        _a.defaultProps = {\n            color: 'currentColor',\n            size: IconSize.sm,\n            noVerticalAlign: false\n        },\n        _a;\n}\n//# sourceMappingURL=createIcon.js.map","import { createIcon } from '../createIcon';\n\nexport const ExclamationTriangleIconConfig = {\n  name: 'ExclamationTriangleIcon',\n  height: 512,\n  width: 576,\n  svgPath: 'M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExclamationTriangleIcon = createIcon(ExclamationTriangleIconConfig);\n\nexport default ExclamationTriangleIcon;","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Button, Checkbox, Modal, ModalVariant, Split, SplitItem, Stack, TextContent } from '@patternfly/react-core';\nimport './RemoveModal.scss';\n\nconst RemoveModal = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, withCheckbox }) => {\n  const intl = useIntl();\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      title={\n        <div>\n          <ExclamationTriangleIcon className=\"ins-m-alert rbac-c__delete-icon\" /> {title}\n        </div>\n      }\n      isOpen={isOpen}\n      variant={ModalVariant.small}\n      onClose={onClose}\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={withCheckbox && !checked} variant=\"danger\" onClick={onSubmit}>\n          {confirmButtonLabel}\n        </Button>,\n        <Button key=\"cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" onClick={onClose}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Split hasGutter>\n        <SplitItem isFilled>\n          <Stack hasGutter>\n            <TextContent>{text}</TextContent>\n          </Stack>\n        </SplitItem>\n      </Split>\n      {withCheckbox ? (\n        <Checkbox\n          isChecked={checked}\n          onChange={() => setChecked(!checked)}\n          label={intl.formatMessage(messages.confirmCheckMessage)}\n          id=\"remove-modal-check\"\n          className=\"pf-u-mt-lg\"\n        />\n      ) : null}\n    </Modal>\n  );\n};\n\nRemoveModal.propTypes = {\n  text: PropTypes.any,\n  title: PropTypes.string,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  withCheckbox: PropTypes.bool,\n};\n\nRemoveModal.defaultProps = {\n  withCheckbox: false,\n};\n\nexport default RemoveModal;\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import React from 'react';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport messages from '../../../Messages';\nimport { useSearchParams } from 'react-router-dom';\nimport { removeServiceAccountFromGroup } from '../../../redux/actions/group-actions';\n\ntype AddGroupServiceAccountsProps = {\n  cancelRoute: string;\n  submitRoute: string;\n  postMethod: (promise?: Promise<unknown>) => void;\n};\n\ntype RBACStore = {\n  groupReducer: {\n    selectedGroup: {\n      uuid: string;\n      name: string;\n      serviceAccounts?: {\n        data: { name: string }[];\n      };\n    };\n  };\n};\n\nconst RemoveServiceAccountFromGroup: React.FunctionComponent<AddGroupServiceAccountsProps> = ({ postMethod }: AddGroupServiceAccountsProps) => {\n  const group = useSelector<RBACStore, { name: string; uuid: string }>(({ groupReducer: { selectedGroup } }) => selectedGroup);\n  const [params] = useSearchParams();\n  const selectedServiceAccounts = useSelector<RBACStore, { name: string }[]>(({ groupReducer: { selectedGroup } }) =>\n    (selectedGroup?.serviceAccounts?.data || []).filter(({ name }) => params.getAll('name').includes(name))\n  );\n  const dispatch = useDispatch();\n  return (\n    <RemoveModal\n      title={`Remove service account from group ${group.name}`}\n      text={\n        <FormattedMessage\n          {...messages.removeServiceAccountsText}\n          values={{\n            b: (text) => <b>{text}</b>,\n            count: params.getAll('name').length,\n            name: selectedServiceAccounts[0].name,\n            group: group.name,\n          }}\n        />\n      }\n      confirmButtonLabel=\"Remove\"\n      withCheckbox\n      onClose={() => postMethod()}\n      onSubmit={() => {\n        const action = removeServiceAccountFromGroup(group.uuid, selectedServiceAccounts);\n        dispatch(action);\n        postMethod(action.payload);\n      }}\n      isOpen={true}\n    />\n  );\n};\n\nexport default RemoveServiceAccountFromGroup;\n"],"names":["IconSize","currentId","createIcon","name","xOffset","yOffset","width","height","svgPath","_a","constructor","super","arguments","this","id","render","props","size","color","title","noVerticalAlign","__rest","hasTitle","Boolean","heightWidth","sm","md","lg","xl","getSize","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","Object","assign","fill","role","d","displayName","defaultProps","ExclamationTriangleIconConfig","ExclamationTriangleIcon","RemoveModal","text","onClose","onSubmit","isOpen","confirmButtonLabel","withCheckbox","intl","useIntl","useState","checked","setChecked","Modal","className","variant","ModalVariant","actions","Button","key","ouiaId","isDisabled","onClick","formatMessage","messages","Split","hasGutter","SplitItem","isFilled","Stack","TextContent","Checkbox","isChecked","onChange","label","propTypes","PropTypes","FormattedMessage","textComponent","Text","description","defaultMessage","values","children","_b","tagName","Component","nodes","ignoreTag","Array","isArray","MemoizedFormattedMessage","prevProps","nextProps","otherProps","nextValues","nextOtherProps","postMethod","group","useSelector","groupReducer","selectedGroup","params","useSearchParams","selectedServiceAccounts","serviceAccounts","data","filter","getAll","includes","dispatch","useDispatch","b","count","length","action","uuid","payload"],"sourceRoot":""}