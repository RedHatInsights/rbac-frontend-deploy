{"version":3,"file":"js/673.1caf8558bdb0d128bf60.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/components/Form/FormGroup.js","webpack:///./node_modules/@patternfly/react-core/dist/esm/components/TextArea/TextArea.js","webpack:///./node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/wrappable.js","webpack:///./src/helpers/shared/filters.js","webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-success.tsx","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/set-service-accounts.tsx","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/service-accounts-list.tsx","webpack:///./src/redux/actions/service-account-actions.ts","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/user/user-table-helpers.tsx","webpack:///./src/utilities/async-debounce.ts"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Form/form';\nimport { ASTERISK } from '../../helpers/htmlConstants';\nimport { css } from '@patternfly/react-styles';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nexport const FormGroup = (_a) => {\n    var { children = null, className = '', label, labelInfo, labelIcon, isRequired = false, isInline = false, hasNoPaddingTop = false, isStack = false, fieldId, role } = _a, props = __rest(_a, [\"children\", \"className\", \"label\", \"labelInfo\", \"labelIcon\", \"isRequired\", \"isInline\", \"hasNoPaddingTop\", \"isStack\", \"fieldId\", \"role\"]);\n    const isGroupOrRadioGroup = role === 'group' || role === 'radiogroup';\n    const LabelComponent = isGroupOrRadioGroup ? 'span' : 'label';\n    const labelContent = (React.createElement(React.Fragment, null,\n        React.createElement(LabelComponent, Object.assign({ className: css(styles.formLabel) }, (!isGroupOrRadioGroup && { htmlFor: fieldId })),\n            React.createElement(\"span\", { className: css(styles.formLabelText) }, label),\n            isRequired && (React.createElement(\"span\", { className: css(styles.formLabelRequired), \"aria-hidden\": \"true\" },\n                ' ',\n                ASTERISK))),\n        ' ',\n        React.isValidElement(labelIcon) && labelIcon));\n    return (React.createElement(GenerateId, null, (randomId) => (React.createElement(\"div\", Object.assign({ className: css(styles.formGroup, className) }, (role && { role }), (isGroupOrRadioGroup && { 'aria-labelledby': `${fieldId || randomId}-legend` }), props),\n        label && (React.createElement(\"div\", Object.assign({ className: css(styles.formGroupLabel, labelInfo && styles.modifiers.info, hasNoPaddingTop && styles.modifiers.noPaddingTop) }, (isGroupOrRadioGroup && { id: `${fieldId || randomId}-legend` })),\n            labelInfo && (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: css(styles.formGroupLabelMain) }, labelContent),\n                React.createElement(\"div\", { className: css(styles.formGroupLabelInfo) }, labelInfo))),\n            !labelInfo && labelContent)),\n        React.createElement(\"div\", { className: css(styles.formGroupControl, isInline && styles.modifiers.inline, isStack && styles.modifiers.stack) }, children)))));\n};\nFormGroup.displayName = 'FormGroup';\n//# sourceMappingURL=FormGroup.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport { css } from '@patternfly/react-styles';\nimport { capitalize, ValidatedOptions, canUseDOM } from '../../helpers';\nimport { FormControlIcon } from '../FormControl/FormControlIcon';\nexport var TextAreResizeOrientation;\n(function (TextAreResizeOrientation) {\n    TextAreResizeOrientation[\"horizontal\"] = \"horizontal\";\n    TextAreResizeOrientation[\"vertical\"] = \"vertical\";\n    TextAreResizeOrientation[\"both\"] = \"both\";\n})(TextAreResizeOrientation || (TextAreResizeOrientation = {}));\nexport var TextAreaReadOnlyVariant;\n(function (TextAreaReadOnlyVariant) {\n    TextAreaReadOnlyVariant[\"default\"] = \"default\";\n    TextAreaReadOnlyVariant[\"plain\"] = \"plain\";\n})(TextAreaReadOnlyVariant || (TextAreaReadOnlyVariant = {}));\nclass TextAreaBase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.inputRef = React.createRef();\n        this.setAutoHeight = (field) => {\n            const parent = field.parentElement;\n            parent.style.setProperty('height', 'inherit');\n            const computed = window.getComputedStyle(field);\n            // Calculate the height\n            const height = parseInt(computed.getPropertyValue('border-top-width')) +\n                parseInt(computed.getPropertyValue('padding-top')) +\n                field.scrollHeight +\n                parseInt(computed.getPropertyValue('padding-bottom')) +\n                parseInt(computed.getPropertyValue('border-bottom-width'));\n            parent.style.setProperty('height', `${height}px`);\n        };\n        this.handleChange = (event) => {\n            // https://gomakethings.com/automatically-expand-a-textarea-as-the-user-types-using-vanilla-javascript/\n            const field = event.currentTarget;\n            if (this.props.autoResize && canUseDOM) {\n                this.setAutoHeight(field);\n            }\n            if (this.props.onChange) {\n                this.props.onChange(event, field.value);\n            }\n        };\n        if (!props.id && !props['aria-label']) {\n            // eslint-disable-next-line no-console\n            console.error('TextArea: TextArea requires either an id or aria-label to be specified');\n        }\n    }\n    componentDidMount() {\n        const inputRef = this.props.innerRef || this.inputRef;\n        if (this.props.autoResize && canUseDOM) {\n            const field = inputRef.current;\n            this.setAutoHeight(field);\n        }\n    }\n    render() {\n        const _a = this.props, { className, value, validated, isRequired, isDisabled, readOnlyVariant, resizeOrientation, innerRef, disabled, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        autoResize, onChange, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        onBlur, onFocus } = _a, props = __rest(_a, [\"className\", \"value\", \"validated\", \"isRequired\", \"isDisabled\", \"readOnlyVariant\", \"resizeOrientation\", \"innerRef\", \"disabled\", \"autoResize\", \"onChange\", \"onBlur\", \"onFocus\"]);\n        const orientation = `resize${capitalize(resizeOrientation)}`;\n        const hasStatusIcon = ['success', 'error', 'warning'].includes(validated);\n        return (React.createElement(\"span\", { className: css(styles.formControl, readOnlyVariant && styles.modifiers.readonly, readOnlyVariant === 'plain' && styles.modifiers.plain, resizeOrientation && styles.modifiers[orientation], isDisabled && styles.modifiers.disabled, hasStatusIcon && styles.modifiers[validated], className) },\n            React.createElement(\"textarea\", Object.assign({ onChange: this.handleChange, onFocus: onFocus, onBlur: onBlur }, (typeof this.props.defaultValue !== 'string' && { value }), { \"aria-invalid\": validated === ValidatedOptions.error, required: isRequired, disabled: isDisabled || disabled, readOnly: !!readOnlyVariant, ref: innerRef || this.inputRef }, props)),\n            hasStatusIcon && (React.createElement(\"span\", { className: css(styles.formControlUtilities) },\n                React.createElement(FormControlIcon, { status: validated })))));\n    }\n}\nTextAreaBase.displayName = 'TextArea';\nTextAreaBase.defaultProps = {\n    innerRef: React.createRef(),\n    className: '',\n    isRequired: false,\n    isDisabled: false,\n    validated: 'default',\n    resizeOrientation: 'both',\n    'aria-label': null\n};\nexport const TextArea = React.forwardRef((props, ref) => (React.createElement(TextAreaBase, Object.assign({}, props, { innerRef: ref }))));\nTextArea.displayName = 'TextArea';\n//# sourceMappingURL=TextArea.js.map","import styles from '@patternfly/react-styles/css/components/Table/table';\nexport const breakWord = () => ({\n    className: styles.modifiers.breakWord\n});\nexport const fitContent = () => ({\n    className: styles.modifiers.fitContent\n});\nexport const nowrap = () => ({\n    className: styles.modifiers.nowrap\n});\nexport const truncate = () => ({\n    className: styles.modifiers.truncate\n});\nexport const wrappable = () => ({\n    className: styles.modifiers.wrap\n});\n//# sourceMappingURL=wrappable.js.map","export const syncDefaultFiltersWithUrl = (location, navigate, keys, defaults = {}) => {\n  const searchParams = new URLSearchParams(location.search);\n\n  let filters = keys.reduce((acc, key) => {\n    const values = searchParams.getAll(key);\n    return {\n      ...acc,\n      [key]: values.length > 1 ? values : values[0],\n    };\n  }, {});\n\n  Object.keys(defaults).forEach((key) => {\n    const value = defaults[key];\n    filters = {\n      ...filters,\n      [key]: Array.isArray(filters[key])\n        ? [...new Set([...filters[key], ...(Array.isArray(value) ? value : [value])])]\n        : (value?.length > 0 && value) || filters[key],\n    };\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => searchParams.getAll(key).includes(item) || searchParams.append(key, item));\n    } else {\n      searchParams.get(key) || (value && searchParams.set(key, value));\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n  return filters;\n};\n\nexport const areFiltersPresentInUrl = (location, keys) => {\n  const searchParams = new URLSearchParams(location.search);\n  return keys.some((key) => searchParams.get(key));\n};\n\nexport const applyFiltersToUrl = (location, navigate, newValues) => {\n  const searchParams = new URLSearchParams(location.search);\n  Object.keys(newValues).forEach((key) => searchParams.delete(key));\n\n  Object.keys(newValues).forEach((key) => {\n    const value = newValues[key];\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => item && searchParams.append(key, item));\n    } else {\n      value && searchParams.set(key, value);\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n};\n","import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const env = chrome.getEnvironment();\n  const prefix = chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { ErrorState } from '@patternfly/react-component-groups';\n\nconst WizardError = ({ context, title, text, customFooter }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <ErrorState\n      errorTitle={title}\n      errorDescription={text}\n      customFooter={\n        customFooter || (\n          <Button\n            onClick={() => {\n              setWizardError(undefined);\n              jumpToStep(0);\n            }}\n            variant={ButtonVariant.primary}\n          >\n            {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n          </Button>\n        )\n      }\n    />\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  customFooter: PropTypes.element,\n};\n\nexport default WizardError;\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Progress,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { asyncValidator } from '../validators';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport WizardError from '../../common/wizard-error';\nimport pathnames from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\nimport './review-step.scss';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const navigate = useAppNavigate();\n  const { submittingGroup, submittingServiceAccounts, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || (submittingGroup && !submittingServiceAccounts)) {\n    return (\n      <Bullseye>\n        <Spinner className=\"pf-v5-u-mt-xl\" size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (submittingServiceAccounts && !error) {\n    const value = submittingGroup ? 1 : submittingServiceAccounts ? 2 : 3;\n    return (\n      <EmptyState variant={EmptyStateVariant.lg} data-component-ouia-id=\"wizard-progress\" className=\"rbac-add-group-progress\">\n        <EmptyStateHeader\n          titleText={intl.formatMessage(messages.groupBeingCreated)}\n          icon={<EmptyStateIcon className=\"pf-v5-u-mt-xl\" icon={InProgressIcon} />}\n          headingLevel=\"h4\"\n        />\n        <Progress\n          className=\"pf-v5-u-mt-lg\"\n          style={{ textAlign: 'left' }}\n          min={0}\n          max={3}\n          value={value}\n          label={`${submittingGroup ? 1 : 2} of 2`}\n          title={intl.formatMessage(submittingGroup ? messages.creatingGroup : messages.associatingServiceAccounts)}\n        />\n      </EmptyState>\n    );\n  }\n\n  return error ? (\n    <WizardError\n      context={AddGroupWizardContext}\n      title={\n        submittingGroup\n          ? intl.formatMessage(messages.groupNameTakenTitle)\n          : intl.formatMessage(messages.addGroupServiceAccountsErrorTitle, { count: getState().values['service-accounts-list'].length })\n      }\n      text={\n        submittingGroup\n          ? intl.formatMessage(messages.groupNameTakenText)\n          : intl.formatMessage(messages.addNewGroupServiceAccountsErrorDescription, { count: getState().values['service-accounts-list'].length })\n      }\n      customFooter={\n        submittingGroup ? undefined : (\n          <Button variant={ButtonVariant.primary} onClick={() => navigate(pathnames.groups.link)}>\n            {intl.formatMessage(messages.close)}\n          </Button>\n        )\n      }\n    />\n  ) : (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-v5-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { FormHelperText, HelperText, HelperTextItem, Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { trimAll } from '../../../helpers/shared/helpers';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) =>\n  groupName === undefined || groupNameError || groupName?.length > 150 ? 'error' : 'default';\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    const trimmedValue = trimAll(value);\n    input.onChange(undefined);\n    debouncedAsyncValidator(trimmedValue)\n      .then(() => {\n        input.onChange(trimmedValue);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n        input.onChange(undefined);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  const groupNameValid = groupNameValidated(groupName, groupNameError);\n  const groupDescriptionValid = groupDescriptionValidated(groupDescription);\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup label={intl.formatMessage(messages.groupName)} isRequired>\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValid}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(_event, value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n          {groupNameValid === 'error' && (\n            <FormHelperText>\n              <HelperText>\n                <HelperTextItem variant={groupNameValid}>{groupName ? groupNameError : intl.formatMessage(messages.required)}</HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup label={intl.formatMessage(messages.groupDescription)}>\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValid}\n            onChange={(_event, value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n          {groupDescriptionValid === 'error' && (\n            <FormHelperText>\n              <HelperText variant={groupDescriptionValid}>\n                <HelperTextItem>{intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}</HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} displayNarrow />\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const { isBeta } = useChrome();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n    'service-accounts-list': selectedServiceAccounts,\n  } = formOptions.getState().values;\n  const enableServiceAccounts =\n    (isBeta() && useFlag('platform.rbac.group-service-accounts')) || (!isBeta() && useFlag('platform.rbac.group-service-accounts.stable'));\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  {selectedRoles.map((role, index) => (\n                    <Text className=\"pf-v5-u-mb-0\" key={index}>\n                      {role.label}\n                    </Text>\n                  ))}\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  {selectedUsers.map((role, index) => (\n                    <Text className=\"pf-v5-u-mb-0\" key={index}>\n                      {role.label}\n                    </Text>\n                  ))}\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.serviceAccounts)}\n                  </Text>\n                </GridItem>\n                {enableServiceAccounts && (\n                  <GridItem md={9}>\n                    {selectedServiceAccounts?.map((account, index) => (\n                      <Text className=\"pf-v5-u-mb-0\" key={index}>\n                        {account.name}\n                      </Text>\n                    ))}\n                  </GridItem>\n                )}\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateActions, EmptyStateHeader, EmptyStateFooter } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport messages from '../../../Messages';\n\ninterface AddGroupSuccessProps {\n  onClose: () => void;\n}\n\nconst AddGroupSuccess = ({ onClose }: AddGroupSuccessProps) => {\n  const intl = useIntl();\n  const { setHideForm, setWizardSuccess } = useContext(AddGroupWizardContext);\n\n  return (\n    <EmptyState variant={EmptyStateVariant.lg}>\n      <EmptyStateHeader\n        titleText={<>{intl.formatMessage(messages.groupCreatedSuccessfully)}</>}\n        icon={<EmptyStateIcon className=\"pf-v5-u-mt-xl\" color=\"green\" icon={CheckCircleIcon} />}\n        headingLevel=\"h4\"\n      />\n      <EmptyStateFooter>\n        <Button onClick={onClose} variant=\"primary\">\n          {intl.formatMessage(messages.exit)}\n        </Button>\n        <EmptyStateActions>\n          <Button\n            onClick={() => {\n              setHideForm(false);\n              setWizardSuccess(false);\n            }}\n            variant=\"link\"\n          >\n            {intl.formatMessage(messages.createAnotherGroup)}\n          </Button>\n        </EmptyStateActions>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n\nexport default AddGroupSuccess;\n","import React, { useState, createContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/deprecated';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport WarningModal from '@patternfly/react-component-groups/dist/dynamic/WarningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup, addServiceAccountsToGroup } from '../../../redux/actions/group-actions';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SetServiceAccounts from './set-service-accounts';\nimport SummaryContent from './summary-content';\nimport AddGroupSuccess from './add-group-success';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport paths from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n  // eslint-disable-next-line no-unused-vars\n  setHideForm: (newValue) => null,\n  // eslint-disable-next-line no-unused-vars\n  setWizardSuccess: (newValue) => null,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'set-service-accounts': SetServiceAccounts,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters, orderBy }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const container = useRef(document.createElement('div'));\n  const { isBeta } = useChrome();\n  const enableServiceAccounts =\n    (isBeta() && useFlag('platform.rbac.group-service-accounts')) || (!isBeta() && useFlag('platform.rbac.group-service-accounts.stable'));\n  const schema = useRef(schemaBuilder(container.current, enableServiceAccounts));\n  const navigate = useAppNavigate();\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardCanceled = (canceled) => setWizardContextValue((prev) => ({ ...prev, canceled }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const serviceAccountsAdded = formData['service-accounts-list']?.length > 0;\n    setWizardContextValue((prev) => ({ ...prev, submitting: true, submittingGroup: true, submittingServiceAccounts: serviceAccountsAdded }));\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    dispatch(addGroup(groupData)).then(({ value }) => {\n      setWizardContextValue((prev) => ({\n        ...prev,\n        submittingGroup: false,\n        success: !serviceAccountsAdded,\n        hideForm: !serviceAccountsAdded,\n        submitting: serviceAccountsAdded,\n      }));\n      serviceAccountsAdded &&\n        dispatch(addServiceAccountsToGroup(value.uuid, formData['service-accounts-list']))\n          .then(() => {\n            setWizardContextValue((prev) => ({ ...prev, submitting: false, submittingServiceAccounts: false, success: true, hideForm: true }));\n          })\n          .catch(() => setWizardError(true));\n    });\n  };\n\n  const onClose = () => {\n    setWizardContextValue((prev) => ({ ...prev, success: false, hideForm: false }));\n    postMethod({ limit: pagination.limit, offset: 0, orderBy, filters: {} });\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n  };\n\n  return (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <WarningModal\n        title={intl.formatMessage(messages.exitItemCreation, { item: intl.formatMessage(messages.group).toLocaleLowerCase() })}\n        isOpen={wizardContextValue.canceled}\n        onClose={() => {\n          container.current.hidden = false;\n          setWizardCanceled(false);\n        }}\n        confirmButtonLabel={intl.formatMessage(messages.discard)}\n        onConfirm={redirectToGroups}\n      >\n        {intl.formatMessage(messages.discardedInputsWarning)}\n      </WarningModal>\n      {wizardContextValue.hideForm ? (\n        wizardContextValue.success ? (\n          <Wizard\n            isOpen\n            title={intl.formatMessage(messages.createGroup)}\n            onClose={onClose}\n            steps={[\n              {\n                name: 'success',\n                component: <AddGroupSuccess onClose={onClose} />,\n                isFinishedStep: true,\n              },\n            ]}\n          />\n        ) : null\n      ) : (\n        <FormRenderer\n          schema={schema.current}\n          container={container}\n          subscription={{ values: true }}\n          FormTemplate={FormTemplate}\n          componentMapper={{ ...componentMapper, ...mapperExtension }}\n          onSubmit={onSubmit}\n          initialValues={groupData}\n          onCancel={onCancel(\n            redirectToGroups,\n            () => {\n              container.current.hidden = true;\n              setWizardCanceled(true);\n            },\n            setGroupData\n          )}\n        />\n      )}\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  orderBy: PropTypes.string,\n};\n\nexport default AddGroupWizard;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { Alert, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport ServiceAccountsList from './service-accounts-list';\nimport { ServiceAccount } from '../../../helpers/service-account/service-account-helper';\n\ninterface SetServiceAccountProps {\n  name: string;\n}\n\nconst SetServiceAccounts: React.FunctionComponent<SetServiceAccountProps> = ({ name }) => {\n  const [selectedAccounts, setSelectedAccounts] = useState<ServiceAccount[]>([]);\n\n  const { input } = useFieldApi({ name });\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedAccounts(formOptions.getState().values['service-accounts-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedAccounts);\n    formOptions.change('service-accounts-list', selectedAccounts);\n  }, [selectedAccounts]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              {intl.formatMessage(messages.addServiceAccountsToGroupDescription)}\n              <Alert\n                className=\"pf-v5-u-mt-sm rbac-service-accounts-alert\"\n                variant=\"info\"\n                component=\"span\"\n                isInline\n                isPlain\n                title={intl.formatMessage(messages.visitServiceAccountsPage, {\n                  link: (\n                    <AppLink to=\"/service-accounts\" linkBasename=\"/iam\">\n                      {intl.formatMessage(messages.serviceAccountsPage)}\n                    </AppLink>\n                  ),\n                })}\n              />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-service-accounts\">\n              <ServiceAccountsList selected={selectedAccounts} setSelected={setSelectedAccounts} />\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nexport default SetServiceAccounts;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = (container, enableServiceAccounts) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        className: 'rbac',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        container,\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: enableServiceAccounts ? 'add-service-accounts' : 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          ...(enableServiceAccounts\n            ? [\n                {\n                  name: 'add-service-accounts',\n                  nextStep: 'review',\n                  title: intl.formatMessage(messages.addServiceAccounts),\n                  fields: [\n                    {\n                      component: 'set-service-accounts',\n                      name: 'service-accounts-list',\n                    },\n                  ],\n                },\n              ]\n            : []),\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded, groupId: groupUuid }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const dispatch = useDispatch();\n  const textFilterRef = useRef(null);\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: {\n        addRoles: { roles, pagination, loaded },\n        uuid,\n      },\n    },\n  }) => ({\n    roles,\n    pagination: pagination || { ...defaultCompactSettings, count: roles?.length },\n    isLoading: !loaded,\n    groupId: groupUuid || uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) =>\n      rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps({ ...config, chrome }))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n      textFilterRef={textFilterRef}\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n  groupId: PropTypes.string,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React, { Dispatch, Fragment, SetStateAction, useCallback, useEffect } from 'react';\nimport { ServiceAccountsState } from '../../../redux/reducers/service-account-reducer';\nimport { LAST_PAGE, ServiceAccount } from '../../../helpers/service-account/service-account-helper';\nimport { useIntl } from 'react-intl';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchServiceAccounts } from '../../../redux/actions/service-account-actions';\nimport { PaginationProps } from '../service-account/add-group-service-accounts';\nimport messages from '../../../Messages';\nimport './service-accounts-list.scss';\n\ninterface ServiceAccountsListProps {\n  selected: ServiceAccount[];\n  setSelected: Dispatch<SetStateAction<ServiceAccount[]>>;\n  // optional group ID to check whether SA are assigned to selected group\n  groupId?: string;\n}\n\nconst reducer = ({ serviceAccountReducer }: { serviceAccountReducer: ServiceAccountsState }) => ({\n  serviceAccounts: serviceAccountReducer.serviceAccounts,\n  status: serviceAccountReducer.status,\n  isLoading: serviceAccountReducer.isLoading,\n  limit: serviceAccountReducer.limit,\n  offset: serviceAccountReducer.offset,\n});\n\nconst createRows = (data: ServiceAccount[], checkedRows: ServiceAccount[]) =>\n  data?.reduce(\n    (acc: unknown[], curr: ServiceAccount) => [\n      ...acc,\n      {\n        uuid: curr.uuid,\n        title: curr.name,\n        cells: [\n          curr.name,\n          curr.description,\n          curr.clientID,\n          curr.createdBy,\n          <Fragment key={`${curr.name}-modified`}>\n            <DateFormat date={curr.createdAt} type={getDateFormat(curr.createdAt)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row: ServiceAccount) => row.uuid === curr.uuid)) || curr.assignedToSelectedGroup,\n        disableSelection: curr.assignedToSelectedGroup,\n      },\n    ],\n    []\n  );\n\nexport const ServiceAccountsList: React.FunctionComponent<ServiceAccountsListProps> = ({ selected, setSelected, groupId }) => {\n  const { auth, getEnvironmentDetails } = useChrome();\n  const { serviceAccounts, status, limit, offset, isLoading } = useSelector(reducer);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const fetchAccounts = useCallback(\n    async (props?: PaginationProps) => {\n      const env = getEnvironmentDetails();\n      const token = await auth.getToken();\n      dispatch(fetchServiceAccounts({ limit: props?.limit ?? limit, offset: props?.offset ?? offset, token, sso: env?.sso, groupId }));\n    },\n    [limit, offset]\n  );\n\n  useEffect(() => {\n    fetchAccounts({ limit, offset: 0 });\n  }, []);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description), orderBy: 'description' },\n    { title: intl.formatMessage(messages.clientId), orderBy: 'clientId' },\n    { title: intl.formatMessage(messages.owner), orderBy: 'owner' },\n    { title: intl.formatMessage(messages.timeCreated), orderBy: 'timeCreated' },\n  ];\n\n  return (\n    <TableToolbarView\n      className=\"rbac-service-accounts-list\"\n      columns={columns}\n      isSelectable\n      rows={createRows(serviceAccounts, selected)}\n      data={serviceAccounts}\n      fetchData={fetchAccounts}\n      isLoading={isLoading}\n      pagination={{\n        limit,\n        offset,\n        ...(status === LAST_PAGE ? { count: offset + serviceAccounts.length } : {}),\n      }}\n      paginationProps={{\n        toggleTemplate: ({ firstIndex, lastIndex }) => (\n          <>\n            <b>\n              {firstIndex} - {lastIndex}\n            </b>{' '}\n            of <b>{status === LAST_PAGE ? offset + serviceAccounts.length : 'many'}</b>\n          </>\n        ),\n        isCompact: true,\n      }}\n      checkedRows={selected}\n      setCheckedItems={setSelected}\n      titlePlural={intl.formatMessage(messages.serviceAccounts).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.serviceAccount)}\n      emptyProps={{\n        title: intl.formatMessage(messages.noServiceAccountsFound),\n        description: [intl.formatMessage(messages.contactServiceTeamForAccounts), ''],\n      }}\n      tableId=\"group-add-accounts\"\n      ouiaId=\"group-add-accounts\"\n    />\n  );\n};\n\nexport default ServiceAccountsList;\n","import * as ActionTypes from '../action-types';\nimport * as ServiceAccountsHelper from '../../helpers/service-account/service-account-helper';\n\nexport const fetchServiceAccounts = (apiProps: Record<string, unknown>) => ({\n  type: ActionTypes.FETCH_SERVICE_ACCOUNTS,\n  payload: ServiceAccountsHelper.getServiceAccounts(apiProps),\n  meta: apiProps,\n});\n","import React, { useEffect, useState, useContext, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport messages from '../../../Messages';\nimport { createRows } from '../../user/user-table-helpers';\n\nconst UsersList = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, displayNarrow, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { orgAdmin } = useContext(PermissionsContext);\n  // use for text filter to focus\n  const innerRef = useRef(null);\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.username })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n  const columns = [\n    { title: intl.formatMessage(displayNarrow ? messages.orgAdmin : messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n  return (\n    <TableToolbarView\n      isCompact\n      isSelectable\n      borders={false}\n      columns={columns}\n      rows={createRows(userLinks, users, intl, selectedUsers, true)}\n      sortBy={sortByState}\n      onSort={(e, index, direction) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index].key}`;\n        setSortByState({ index, direction });\n        fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n      }}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n\n        fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n          innerRef?.current?.focus();\n        });\n        usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nUsersList.propTypes = {\n  displayNarrow: PropTypes.bool,\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  displayNarrow: false,\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersList;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { Fragment } from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { IntlShape } from 'react-intl';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport AppLink from '../../presentational-components/shared/AppLink';\n\ninterface UserProps {\n  email: string;\n  first_name: string;\n  is_active: boolean;\n  is_org_admin: boolean;\n  last_name: string;\n  username: string;\n  uuid: string;\n}\n\nexport type CellObject = { title: string | React.RefAttributes<HTMLAnchorElement>; props?: { 'data-is-active': boolean } };\n\nexport interface RowProps {\n  uuid: string; // username\n  cells: [\n    React.ReactNode, // yes or no for isOrgAdmin\n    CellObject, // link to user or just username\n    string, // email\n    string, // firstName\n    string, // lastName\n    CellObject // status\n  ];\n  selected: boolean;\n}\n\nexport const createRows = (userLinks: boolean, data: UserProps[] = [], intl: IntlShape, checkedRows = [], isSelectable = false): RowProps[] =>\n  data?.reduce<RowProps[]>((acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => {\n    const newEntry: RowProps = {\n      uuid: username,\n      cells: [\n        isOrgAdmin ? (\n          <Fragment>\n            <CheckIcon key=\"yes-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <CloseIcon key=\"no-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n          </Fragment>\n        ),\n        {\n          title: userLinks ? (\n            <AppLink to={pathnames['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n          ) : (\n            username.toString()\n          ),\n        },\n        email,\n        firstName,\n        lastName,\n        {\n          title: (\n            <Label key=\"status\" color={isActive ? 'green' : 'grey'}>\n              {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n            </Label>\n          ),\n          props: {\n            'data-is-active': isActive,\n          },\n        },\n      ],\n      selected: isSelectable ? Boolean(checkedRows?.find?.(({ uuid }) => uuid === username)) : false,\n    };\n\n    return [...acc, newEntry];\n  }, []);\n","import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nexport default (asyncFunction: (...args: any[]) => Promise<any>, debounceTime = 250, options = { onlyResolvesLast: false }) =>\n  awesomeDebouncePromise(asyncFunction, debounceTime, options);\n"],"names":["FormGroup","_a","children","className","label","labelInfo","labelIcon","isRequired","isInline","hasNoPaddingTop","isStack","fieldId","role","props","__rest","isGroupOrRadioGroup","LabelComponent","labelContent","Object","assign","css","formLabel","htmlFor","formLabelText","formLabelRequired","randomId","formGroup","formGroupLabel","modifiers","info","noPaddingTop","id","formGroupLabelMain","formGroupLabelInfo","formGroupControl","inline","stack","displayName","TextAreResizeOrientation","TextAreaReadOnlyVariant","TextAreaBase","constructor","super","this","inputRef","setAutoHeight","field","parent","parentElement","style","setProperty","computed","window","getComputedStyle","height","parseInt","getPropertyValue","scrollHeight","handleChange","event","currentTarget","autoResize","onChange","value","console","error","componentDidMount","innerRef","current","render","validated","isDisabled","readOnlyVariant","resizeOrientation","disabled","onBlur","onFocus","orientation","hasStatusIcon","includes","formControl","readonly","plain","defaultValue","required","readOnly","ref","formControlUtilities","status","defaultProps","TextArea","nowrap","syncDefaultFiltersWithUrl","location","navigate","keys","defaults","searchParams","URLSearchParams","search","filters","reduce","acc","key","values","getAll","length","forEach","Array","isArray","Set","item","append","get","set","pathname","toString","replace","areFiltersPresentInUrl","some","applyFiltersToUrl","newValues","delete","linkBasename","useNavigate","to","options","ActiveUser","linkDescription","linkTitle","intl","chrome","env","getEnvironment","prefix","isProd","orgAdmin","useContext","Text","component","TextVariants","h7","formatMessage","usersDescription","a","href","target","rel","propTypes","UsersRow","row","isActive","data","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","success","submitting","Fragment","Button","type","variant","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","WizardError","title","text","customFooter","jumpToStep","setWizardError","errorTitle","errorDescription","undefined","ButtonVariant","primary","returnToStepNumber","number","ReviewTemplate","formFields","useAppNavigate","submittingGroup","submittingServiceAccounts","AddGroupWizardContext","getState","useEffect","then","catch","Bullseye","Spinner","size","EmptyState","EmptyStateVariant","lg","EmptyStateHeader","titleText","groupBeingCreated","icon","EmptyStateIcon","headingLevel","Progress","textAlign","min","max","creatingGroup","associatingServiceAccounts","groupNameTakenTitle","addGroupServiceAccountsErrorTitle","count","groupNameTakenText","addNewGroupServiceAccountsErrorDescription","pathnames","groups","link","close","Title","reviewDetails","SetName","input","name","description","groupName","setGroupName","useState","groupNameError","setGroupNameError","groupDescription","setGroupDescription","processGroupName","trimmedValue","groupNameValid","groupNameValidated","groupDescriptionValid","groupDescriptionValidated","Stack","hasGutter","StackItem","TextInput","_event","FormHelperText","HelperText","HelperTextItem","change","maxCharactersWarning","SetRoles","selectedRoles","setSelectedRoles","TextContent","selectRolesForGroupText","rolesExcluded","SetUsers","selectedUsers","setSelectedUsers","Form","toManageUsersText","displayNarrow","SummaryContent","isBeta","useChrome","selectedServiceAccounts","enableServiceAccounts","useFlag","Grid","GridItem","md","h4","p","roles","map","index","members","serviceAccounts","account","onClose","setHideForm","setWizardSuccess","groupCreatedSuccessfully","color","EmptyStateFooter","exit","EmptyStateActions","createAnotherGroup","createContext","newValue","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","selectedAccounts","setSelectedAccounts","addServiceAccountsToGroupDescription","Alert","isPlain","visitServiceAccountsPage","AppLink","serviceAccountsPage","selected","setSelected","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","pagination","orderBy","dispatch","useDispatch","container","useRef","document","createElement","schema","cache","locale","messages","fields","isDynamic","inModal","showTitles","createGroup","nameAndDescription","validate","REQUIRED","TEXTAREA","hideField","MAX_LENGTH","threshold","addRoles","addMembers","addServiceAccounts","buttons","StepTemplate","schemaBuilder","groupData","wizardContextValue","setWizardContextValue","hideForm","redirectToGroups","addNotification","addingGroupTitle","dismissDelay","addingGroupCanceledDescription","page","per_page","limit","prev","setWizardCanceled","canceled","offset","Provider","WarningModal","exitItemCreation","group","toLocaleLowerCase","isOpen","hidden","confirmButtonLabel","discard","onConfirm","discardedInputsWarning","Wizard","steps","isFinishedStep","subscription","componentMapper","onSubmit","serviceAccountsAdded","user_list","user","username","roles_list","uuid","initialValues","RolesList","groupId","groupUuid","textFilterRef","isLoading","useSelector","groupReducer","selectedGroup","loaded","roleReducer","meta","shallowEqual","columns","transforms","filterValue","setFilterValue","sortByState","setSortByState","direction","fetchRoles","useCallback","config","rows","checkedRows","display_name","cells","Boolean","find","createRows","isSelectable","isCompact","borders","sortBy","onSort","e","fetchTableData","curr","filterPlaceholder","roleName","toLowerCase","fetchData","ouiaId","setCheckedItems","newSelection","titlePlural","titleSingular","tableId","canSort","reducer","serviceAccountReducer","ServiceAccountsList","auth","getEnvironmentDetails","fetchAccounts","async","token","getToken","apiProps","sso","payload","clientId","owner","timeCreated","clientID","createdBy","DateFormat","date","createdAt","assignedToSelectedGroup","disableSelection","paginationProps","toggleTemplate","firstIndex","lastIndex","serviceAccount","emptyProps","noServiceAccountsFound","contactServiceTeamForAccounts","UsersList","userLinks","usesMetaInURL","useLocation","userReducer","users","redirected","stateFilters","isUserDataLoading","updateStateFilters","orgAdministrator","email","firstName","lastName","setFilters","active","newFilters","filter","prototype","hasOwnProperty","call","focus","emptyFilters","rowWrapper","placeholder","filterByKey","items","inactive","searchFilter","asyncValidator","idKey","response","nameMatch","nameAlreadyTaken","debouncedAsyncValidator","is_active","first_name","last_name","is_org_admin","isOrgAdmin","yes","no","Label","asyncFunction","debounceTime","onlyResolvesLast"],"sourceRoot":""}