{"version":3,"file":"js/9368.3cfe898de01ed994b394.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport { useDispatch } from 'react-redux';\n\nconst EditGroupModal = ({ postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute, group, onClose }) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? dispatch(updateGroup(user_data))\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : dispatch(updateGroup(user_data)).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        dismissDelay: 8000,\n        title: intl.formatMessage(selectedGroup ? messages.editingGroupTitle : messages.addingGroupTitle),\n        description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n      })\n    );\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nexport default EditGroupModal;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({ groupsUuid, isModalOpen, postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute }) => {\n  const intl = useIntl();\n  const { group, isLoading } = useSelector(\n    ({ groupReducer: { selectedGroup } }) => ({\n      group: selectedGroup,\n      isLoading: !selectedGroup.loaded,\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      dispatch(fetchGroup(groupsUuid[0].uuid));\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    dispatch(removeGroups(uuids))\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default RemoveGroupModal;\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, _opened, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} state={{ uuid }} to={{ pathname: `/groups/detail/${isPlatformDefault ? 'default-access' : uuid}` }}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport UsersList from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst AddGroupMembers = ({ closeUrl }) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const intl = useIntl();\n  const { push } = useHistory();\n  const { uuid } = useParams();\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      dispatch(\n        addNotification({\n          variant: 'info',\n          title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n        })\n      );\n      dispatch(\n        addMembersToGroup(uuid, userList).then(() => {\n          dispatch(fetchMembersForGroup(uuid));\n          dispatch(fetchGroups({ inModal: false }));\n        })\n      );\n    }\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n      })\n    );\n    push(closeUrl);\n  };\n\n  const dispatch = useDispatch();\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nexport default AddGroupMembers;\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupPrincipals = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members'].path}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add-members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add-members`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarViewOld\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={hasPermissions.current}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport messages from '../../../Messages';\nimport './group-roles.scss';\n\nconst createRows = (groupUuid, data, checkedRows = []) =>\n  data?.reduce(\n    (acc, { uuid, display_name, name, description, modified }) => [\n      ...acc,\n      {\n        uuid,\n        title: display_name || name,\n        cells: [\n          <Fragment key={`${uuid}-name`}>\n            <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n          </Fragment>,\n          description,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  ) || [];\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst reducer = ({ groupReducer: { selectedGroup, systemGroup } }) => ({\n  roles: selectedGroup.roles,\n  pagination: selectedGroup.pagination || { ...defaultSettings, count: selectedGroup?.roles && selectedGroup.roles.length },\n  isLoading: !selectedGroup.loaded,\n  name: selectedGroup.name,\n  isPlatformDefault: selectedGroup.platform_default,\n  isAdminDefault: selectedGroup.admin_default,\n  isChanged: !selectedGroup.system,\n  disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default,\n  systemGroupUuid: systemGroup?.uuid,\n});\n\nconst GroupRoles = ({ onDefaultGroupChanged }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { uuid } = useParams();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n  const { roles, pagination, isLoading, name, isPlatformDefault, isAdminDefault, isChanged, disableAddRoles, systemGroupUuid } = useSelector(reducer);\n\n  const reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n  };\n\n  const fetchAddGroupRoles = (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {}));\n  const fetchGroupData = (customId) => dispatch(fetchGroup(customId ?? uuid));\n  const fetchSystGroup = () => dispatch(fetchSystemGroup());\n  const removeRoles = (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback));\n  const fetchGroupRoles = (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options));\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    if (uuid !== 'default-access') {\n      fetchGroupRoles(pagination)(uuid);\n    } else {\n      systemGroupUuid && fetchGroupRoles(pagination)(systemGroupUuid);\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    if (roles?.length > 0) {\n      if (uuid !== 'default-access') {\n        fetchAddGroupRoles(uuid);\n      } else {\n        systemGroupUuid && fetchAddGroupRoles(systemGroupUuid);\n      }\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n\n  const removeRolesCallback = () => {\n    if (isPlatformDefault) {\n      fetchSystGroup().then(({ value: { data } }) => {\n        fetchGroupRoles({ ...pagination, offset: 0 })(data[0].uuid);\n      });\n    } else {\n      fetchGroupRoles({ ...pagination, offset: 0 })(uuid);\n    }\n  };\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(fetchUuid, [role.uuid], removeRolesCallback));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles'].path}\n        render={(args) => (\n          <AddGroupRoles\n            afterSubmit={() => {\n              if (isPlatformDefault || isAdminDefault) {\n                fetchSystGroup().then(({ value: { data } }) => {\n                  fetchRolesForGroup(data[0].uuid);\n                  fetchGroupData(data[0].uuid);\n                });\n              } else {\n                fetchRolesForGroup();\n                fetchGroupData();\n              }\n            }}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${isPlatformDefault ? 'default-access' : uuid}/roles`}\n            addRolesToGroup={(groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback))}\n            groupName={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add-roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => history.push(`/groups/detail/${uuid}/roles/add-roles`),\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    removeRolesCallback\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id=\"tab-roles\">\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          rows={createRows(uuid, roles, selectedRoles)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchGroupRoles(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nGroupRoles.propTypes = {\n  searchFilter: PropTypes.string,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  onDefaultGroupChanged: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default GroupRoles;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  onDelete,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const chrome = useChrome();\n  const isPlatformDefault = uuid === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: intl.formatMessage(messages.roles), name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: intl.formatMessage(messages.members), name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const { group, isFetching } = useSelector(\n    ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n      group: selectedGroup,\n      isFetching: isRecordLoading || isRecordRolesLoading,\n    }),\n    shallowEqual\n  );\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchSystemGroup());\n    const currUuid = !isPlatformDefault ? uuid : systemGroupUuid;\n    if (currUuid) {\n      dispatch(fetchGroup(currUuid));\n      chrome.appObjectId(currUuid);\n    }\n    return () => chrome.appObjectId(undefined);\n  }, [uuid, systemGroupUuid]);\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(pathnames.groups.path, pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).path.replace(\n            ':uuid',\n            isPlatformDefault ? 'default-access' : uuid\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).path.replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          {intl.formatMessage(messages.delete)}\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchUuid = isPlatformDefault ? systemGroupUuid : uuid;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            dispatch(removeGroups([systemGroupUuid])).then(() =>\n              dispatch(fetchSystemGroup()).then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            history.push('/groups/detail/default-access/roles');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'].path, pathnames['group-detail-members-remove'].path]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'].path, pathnames['group-detail-members-edit'].path]}\n            render={(props) => <EditGroup {...props} group={group} cancelRoute={`group/detail/${uuid}`} postMethod={() => fetchGroup(fetchUuid)} />}\n          />\n          <Route\n            path={pathnames['group-detail-roles'].path}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members'].path} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: uuid })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    admin_default: PropTypes.bool,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  removeGroups: PropTypes.func,\n  onDelete: PropTypes.func,\n  defaultUuid: PropTypes.string,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default Group;\n","import React, { Fragment, useContext, useEffect, useRef, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarViewOld } from '../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport {\n  applyPaginationToUrl,\n  defaultAdminSettings,\n  defaultSettings,\n  isPaginationPresentInUrl,\n  syncDefaultPaginationWithUrl,\n} from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n  const textFilterRef = useRef(null);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  const { groups, meta, filters, isLoading, systemGroup } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState({ ...(orgAdmin ? defaultAdminSettings : defaultSettings), ...meta });\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination({ ...pagination, ...meta });\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group'].path}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group'].path}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group'].path} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group'].path);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id=\"tab-groups\">\n          <TableToolbarViewOld\n            data={groups.map((group) =>\n              group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n            )}\n            createRows={(...args) => createRows(isAdmin, ...args)}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n            textFilterRef={textFilterRef}\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail'].path} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail'].path}\n        render={(props) => (\n          <Group\n            {...props}\n            defaultUuid={systemGroup?.uuid}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups.path} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","PropTypes","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","useContext","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","propTypes","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","intl","useIntl","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","formatMessage","messages","number","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","length","fetchGroups","limit","offset","filters","nameMatch","console","response","data","some","item","debouncedAsyncValidator","asyncDebounce","value","ReviewTemplate","formFields","AddGroupWizardContext","getState","useEffect","values","then","Bullseye","Spinner","className","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","props","input","useFieldApi","description","useState","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","label","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","SetRoles","selectedRoles","setSelectedRoles","TextContent","Text","fieldId","rolesExcluded","SetUsers","selectedUsers","setSelectedUsers","Form","linkDescription","Card","inModal","SummaryContent","Grid","GridItem","md","component","TextVariants","map","role","index","key","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","Object","keys","AddGroupWizard","postMethod","pagination","dispatch","useDispatch","schema","useRef","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","push","useHistory","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","addNotification","dismissDelay","pathname","paths","search","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","current","subscription","componentMapper","onSubmit","user_list","user","username","roles_list","uuid","addGroup","initialValues","EditGroupModal","cancelRoute","submitRoute","group","onClose","selectedGroup","setSelectedGroup","match","useRouteMatch","fetchGroup","params","payload","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","updateGroup","ModalFormTemplate","ModalProps","defaultProps","pathnames","inputValue","hash","RemoveGroupModal","groupsUuid","isModalOpen","useSelector","groupReducer","isLoading","loaded","shallowEqual","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","removeGroups","b","count","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","classNames","createRows","isAdmin","_opened","selectedRows","reduce","acc","roleCount","principalCount","modified","isPlatformDefault","platform_default","isAdminDefault","admin_default","cells","Link","state","to","DateFormat","date","getDateFormat","selected","Boolean","find","row","AppTabs","history","location","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","checkedRows","isActive","is_active","email","firstName","first_name","lastName","last_name","Label","AddGroupMembers","closeUrl","useParams","ouiaId","userList","addMembersToGroup","fetchMembersForGroup","users","fetchData","selector","principals","members","meta","removeModalText","plural","filterValue","setFilterValue","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","PermissionsContext","userAccessAdministrator","orgAdmin","hasPermissions","columns","transforms","nowrap","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","isSelectable","routes","Route","path","render","args","actionResolver","_rowId","principal","filterPlaceholder","toLowerCase","titlePlural","titleSingular","rowWrapper","UsersRow","setCheckedItems","newSelection","toolbarButtons","multipleMembersSelected","removeText","emptyProps","tableId","RemoveRoles","isDefault","isChanged","showConfirmModal","setShowConfirmModal","groupUuid","display_name","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","reducer","systemGroup","roles","defaultSettings","system","disableAddRoles","addRoles","systemGroupUuid","GroupRoles","onDefaultGroupChanged","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","reloadWrapper","event","callback","fetchAddGroupRoles","groupId","fetchAddRolesForGroup","fetchGroupData","customId","fetchSystGroup","fetchSystemGroup","removeRoles","removeRolesFromGroup","fetchGroupRoles","config","fetchRolesForGroup","orderBy","fetchUuid","removeRolesCallback","rows","emptyFilters","multipleRolesSelected","afterSubmit","addRolesToGroup","searchFilter","defaultCompactSettings","Group","onDelete","useLocation","chrome","useChrome","groupExists","BAD_UUID","isRecordLoading","isRecordRolesLoading","isFetching","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","currUuid","appObjectId","breadcrumbsList","getBackRoute","dropdownItems","DropdownItem","replace","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","goBack","defaultUuid","textFilterRef","sortable","adminGroup","RegExp","filter","defaultAdminSettings","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","syncDefaultPaginationWithUrl","syncDefaultFiltersWithUrl","insights","appNavClick","secondaryNav","fetchAdminGroup","isPaginationPresentInUrl","applyPaginationToUrl","areFiltersPresentInUrl","redirected","exact","ids","Switch","pageAction","paddingBottom","applyFiltersToUrl","GroupRowWrapper"],"sourceRoot":""}