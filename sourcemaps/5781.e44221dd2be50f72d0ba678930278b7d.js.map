{"version":3,"file":"js/5781.a271f2430ba6904dca05.js","mappings":"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","sources":["webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/smart-components/role/remove-role-modal.js","webpack:///./src/smart-components/role/role-selectors.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport ExclamationTriangleIcon from '@patternfly/react-icons/dist/dynamic/icons/exclamation-triangle-icon';\nimport { Button, Checkbox, Modal, Text, TextContent, TextVariants, Split, SplitItem, Icon } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { removeRole } from '../../redux/actions/role-actions';\nimport { fetchRole } from '../../helpers/role/role-helper';\nimport { roleNameSelector } from './role-selectors';\nimport useAppNavigate from '../../hooks/useAppNavigate';\nimport messages from '../../Messages';\n\nconst RemoveRoleModal = ({ cancelRoute, submitRoute = cancelRoute, afterSubmit, isLoading }) => {\n  const intl = useIntl();\n  const { roleId } = useParams();\n  const roles = roleId.split(',');\n  const roleName = useSelector((state) => {\n    if (roles.length === 1) {\n      return roleNameSelector(state, roles[0]);\n    }\n\n    return roles.length;\n  });\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [internalRoleName, setInternalRoleName] = useState(roleName);\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n\n  useEffect(() => {\n    if (roles && roleName) {\n      setInternalRoleName(roleName);\n    } else if (roles && roles.length === 1) {\n      fetchRole(roles[0])\n        .then((role) => setInternalRoleName(role.display_name))\n        .catch((error) => dispatch(addNotification({ variant: 'danger', title: 'Could not get role', description: error?.errors?.[0]?.detail })));\n    }\n  }, [roleName, roles]);\n\n  const onSubmit = () => {\n    Promise.all(roles.map((id) => dispatch(removeRole(id)))).then(() => afterSubmit());\n    navigate(submitRoute);\n  };\n\n  const onCancel = () => navigate(cancelRoute, { replace: true });\n  if (!internalRoleName) {\n    return null;\n  }\n\n  return !isLoading ? (\n    <Modal\n      className=\"rbac\"\n      aria-label=\"remove-role\"\n      header={\n        <TextContent>\n          <Split hasGutter>\n            <SplitItem>\n              <Icon size=\"lg\">\n                <ExclamationTriangleIcon style={{ fill: '#f0ab00' }} />\n              </Icon>\n            </SplitItem>\n            <SplitItem>\n              <Text component=\"h1\">{intl.formatMessage(messages.deleteRoleQuestion)}</Text>\n            </SplitItem>\n          </Split>\n        </TextContent>\n      }\n      isOpen\n      variant=\"small\"\n      onClose={onCancel}\n      actions={[\n        <Button isDisabled={isDisabled} key=\"submit\" variant=\"danger\" type=\"button\" id=\"confirm-delete-portfolio\" onClick={onSubmit}>\n          {intl.formatMessage(messages.confirm)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text component={TextVariants.p}>\n          <FormattedMessage\n            {...messages.roleWilBeRemovedWithPermissions}\n            values={{\n              strong: (text) => <strong>{text}</strong>,\n              name: internalRoleName,\n              count: roles.length,\n            }}\n          />\n        </Text>\n        <Checkbox\n          id=\"remove-role-checkbox\"\n          role=\"checkbox\"\n          aria-label=\"Confirm role removal\"\n          name=\"remove-role-checkbox\"\n          label={intl.formatMessage(messages.understandActionIrreversible)}\n          isChecked={!isDisabled}\n          onChange={() => setIsDisabled((prev) => !prev)}\n        />\n      </TextContent>\n    </Modal>\n  ) : null;\n};\n\nRemoveRoleModal.propTypes = {\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]).isRequired,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  afterSubmit: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nexport default RemoveRoleModal;\n","export const roleSelector = (state, roleId) => {\n  const {\n    roleReducer: { roles = { data: [] }, selectedRole },\n  } = state;\n  if (selectedRole?.uuid === roleId) {\n    return selectedRole;\n  }\n\n  return roles.data.find(({ uuid }) => uuid === roleId);\n};\n\nexport const roleNameSelector = (state, roleId) => roleSelector(state, roleId)?.display_name;\n"],"names":["linkBasename","navigate","useNavigate","to","options","RemoveRoleModal","cancelRoute","submitRoute","afterSubmit","isLoading","intl","roleId","useParams","roles","split","roleName","useSelector","state","length","isDisabled","setIsDisabled","useState","internalRoleName","setInternalRoleName","dispatch","useDispatch","useEffect","then","role","display_name","catch","error","variant","title","description","errors","detail","onCancel","replace","Modal","className","header","TextContent","Split","hasGutter","SplitItem","Icon","size","style","fill","Text","component","formatMessage","deleteRoleQuestion","isOpen","onClose","actions","Button","key","type","id","onClick","Promise","all","map","confirm","cancel","TextVariants","p","roleWilBeRemovedWithPermissions","values","strong","text","name","count","Checkbox","label","understandActionIrreversible","isChecked","onChange","prev","propTypes","pathname","isRequired","search","hash","roleSelector","roleReducer","data","selectedRole","uuid","find","roleNameSelector"],"sourceRoot":""}