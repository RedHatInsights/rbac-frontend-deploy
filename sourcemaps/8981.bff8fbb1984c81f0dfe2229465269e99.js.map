{"version":3,"file":"js/8981.7c91a080e2f6b9dbbc21.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/deprecated/components/Dropdown/dropdownConstants.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Section/Section.js","webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/presentational-components/shared/RemoveModal.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js"],"sourcesContent":["import * as React from 'react';\nexport var DropdownPosition;\n(function (DropdownPosition) {\n    DropdownPosition[\"right\"] = \"right\";\n    DropdownPosition[\"left\"] = \"left\";\n})(DropdownPosition || (DropdownPosition = {}));\nexport var DropdownDirection;\n(function (DropdownDirection) {\n    DropdownDirection[\"up\"] = \"up\";\n    DropdownDirection[\"down\"] = \"down\";\n})(DropdownDirection || (DropdownDirection = {}));\nexport const DropdownContext = React.createContext({\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onSelect: (event) => undefined,\n    id: '',\n    toggleIndicatorClass: '',\n    toggleIconClass: '',\n    toggleTextClass: '',\n    menuClass: '',\n    itemClass: '',\n    toggleClass: '',\n    baseClass: '',\n    baseComponent: 'div',\n    sectionClass: '',\n    sectionTitleClass: '',\n    sectionComponent: 'section',\n    disabledClass: '',\n    plainTextClass: '',\n    menuComponent: 'ul'\n});\nexport const DropdownArrowContext = React.createContext({\n    keyHandler: null,\n    sendRef: null\n});\n//# sourceMappingURL=dropdownConstants.js.map","import './tooltip.css';\nexport default {\n  \"modifiers\": {\n    \"top\": \"pf-m-top\",\n    \"topLeft\": \"pf-m-top-left\",\n    \"topRight\": \"pf-m-top-right\",\n    \"bottom\": \"pf-m-bottom\",\n    \"bottomLeft\": \"pf-m-bottom-left\",\n    \"bottomRight\": \"pf-m-bottom-right\",\n    \"left\": \"pf-m-left\",\n    \"leftTop\": \"pf-m-left-top\",\n    \"leftBottom\": \"pf-m-left-bottom\",\n    \"right\": \"pf-m-right\",\n    \"rightTop\": \"pf-m-right-top\",\n    \"rightBottom\": \"pf-m-right-bottom\",\n    \"textAlignLeft\": \"pf-m-text-align-left\"\n  },\n  \"themeDark\": \"pf-v5-theme-dark\",\n  \"tooltip\": \"pf-v5-c-tooltip\",\n  \"tooltipArrow\": \"pf-v5-c-tooltip__arrow\",\n  \"tooltipContent\": \"pf-v5-c-tooltip__content\"\n};","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport '../Section/section.css';\nvar Section = function (_a) {\n    var _b;\n    var type = _a.type, children = _a.children, className = _a.className, props = __rest(_a, [\"type\", \"children\", \"className\"]);\n    var sectionClasses = classNames(className, (_b = {}, _b[\"ins-l-\".concat(type)] = type !== undefined, _b));\n    return (_jsxs(\"section\", __assign({}, props, { className: sectionClasses, children: [' ', children, ' '] })));\n};\nexport default Section;\n//# sourceMappingURL=Section.js.map","import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { Button, Checkbox, Modal, ModalVariant, Split, SplitItem, Stack, TextContent } from '@patternfly/react-core';\nimport './RemoveModal.scss';\n\nconst RemoveModal = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, withCheckbox }) => {\n  const intl = useIntl();\n  const [checked, setChecked] = useState(false);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      title={\n        <div>\n          <ExclamationTriangleIcon className=\"ins-m-alert rbac-c__delete-icon\" /> {title}\n        </div>\n      }\n      isOpen={isOpen}\n      variant={ModalVariant.small}\n      onClose={onClose}\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={withCheckbox && !checked} variant=\"danger\" onClick={onSubmit}>\n          {confirmButtonLabel}\n        </Button>,\n        <Button key=\"cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" onClick={onClose}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Split hasGutter>\n        <SplitItem isFilled>\n          <Stack hasGutter>\n            <TextContent>{text}</TextContent>\n          </Stack>\n        </SplitItem>\n      </Split>\n      {withCheckbox ? (\n        <Checkbox\n          isChecked={checked}\n          onChange={() => setChecked(!checked)}\n          label={intl.formatMessage(messages.confirmCheckMessage)}\n          id=\"remove-modal-check\"\n          className=\"pf-v5-u-mt-lg\"\n        />\n      ) : null}\n    </Modal>\n  );\n};\n\nRemoveModal.propTypes = {\n  text: PropTypes.any,\n  title: PropTypes.string,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  withCheckbox: PropTypes.bool,\n};\n\nRemoveModal.defaultProps = {\n  withCheckbox: false,\n};\n\nexport default RemoveModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  const intl = useIntl();\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            <FormattedMessage\n              {...messages.defaultAccessGroupEditWarning}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          </Text>\n        </TextContent>\n      }\n      title={intl.formatMessage(messages.warning)}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={intl.formatMessage(messages.continue)}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef, Suspense } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Outlet, useParams } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n  fetchGroups,\n} from '../../../redux/actions/group-actions';\nimport RemoveRole from './remove-role-modal';\nimport { getBackRoute, getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport { DEFAULT_ACCESS_GROUP_ID } from '../../../utilities/constants';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\nimport './group-roles.scss';\n\nconst createRows = (groupId, roles, checkedRows = []) =>\n  roles?.reduce(\n    (acc, { uuid, display_name, name, description, modified }) => [\n      ...acc,\n      {\n        uuid,\n        title: display_name || name,\n        cells: [\n          <Fragment key={`${uuid}-name`}>\n            <AppLink to={pathnames['group-detail-role-detail'].link.replace(':groupId', groupId).replace(':roleId', uuid)}>\n              {display_name || name}\n            </AppLink>\n          </Fragment>,\n          description,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  ) || [];\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst reducer = ({ groupReducer: { selectedGroup, systemGroup, groups } }) => ({\n  roles: selectedGroup.roles?.data || [],\n  pagination: selectedGroup.pagination || { ...defaultSettings, count: selectedGroup?.roles && selectedGroup.roles.length },\n  groupsPagination: groups.pagination || groups.meta,\n  groupsFilters: groups.filters,\n  isLoading: selectedGroup.roles?.isLoading,\n  isPlatformDefault: selectedGroup.platform_default,\n  isAdminDefault: selectedGroup.admin_default,\n  isChanged: !selectedGroup.system,\n  disableAddRoles:\n    /**\n     * First validate if the pagination object exists and is not empty.\n     * If empty or undefined, the disable condition will be always true\n     */\n    Object.keys(selectedGroup.addRoles.pagination || {}).length > 0\n      ? !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default\n      : !!selectedGroup.admin_default,\n  systemGroupUuid: systemGroup?.uuid,\n  group: selectedGroup,\n});\n\nconst GroupRoles = ({ onDefaultGroupChanged }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n  const {\n    roles,\n    pagination,\n    groupsPagination,\n    groupsFilters,\n    isLoading,\n    group,\n    isPlatformDefault,\n    isAdminDefault,\n    isChanged,\n    disableAddRoles,\n    systemGroupUuid,\n  } = useSelector(reducer);\n\n  const reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n  };\n\n  const fetchAddGroupRoles = (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {}));\n  const fetchGroupData = (customId) => dispatch(fetchGroup(customId ?? groupId));\n  const fetchSystGroup = () => dispatch(fetchSystemGroup({ chrome }));\n  const removeRoles = (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback));\n  const fetchGroupRoles = (pagination) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, pagination, options));\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    if (groupId !== DEFAULT_ACCESS_GROUP_ID) {\n      fetchGroupRoles(pagination)(groupId);\n    } else {\n      systemGroupUuid && fetchGroupRoles(pagination)(systemGroupUuid);\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    if (roles.length > 0) {\n      if (groupId !== DEFAULT_ACCESS_GROUP_ID) {\n        fetchAddGroupRoles(groupId);\n      } else {\n        systemGroupUuid && fetchAddGroupRoles(systemGroupUuid);\n      }\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = groupId !== DEFAULT_ACCESS_GROUP_ID ? groupId : systemGroupUuid;\n\n  const removeRolesCallback = () => {\n    if (isPlatformDefault) {\n      fetchSystGroup().then(({ value: { data } }) => {\n        fetchGroupRoles({ ...pagination, offset: 0 })(data[0].uuid);\n      });\n    } else {\n      fetchGroupRoles({ ...pagination, offset: 0 })(groupId);\n    }\n  };\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(fetchUuid, [role.uuid], removeRolesCallback));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <AppLink\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={pathnames['group-add-roles'].link.replace(':groupId', groupId)}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </AppLink>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => navigate(pathnames['group-add-roles'].link.replace(':groupId', groupId)),\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    removeRolesCallback\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id=\"tab-roles\">\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          rows={createRows(groupId, roles, selectedRoles)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchGroupRoles(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n      <Suspense>\n        <Outlet\n          context={{\n            [pathnames['group-roles-edit-group'].path]: {\n              group,\n              cancelRoute: pathnames['group-detail-roles'].link.replace(':groupId', groupId),\n              postMethod: () => dispatch(fetchGroup(fetchUuid)),\n            },\n            [pathnames['group-roles-remove-group'].path]: {\n              postMethod: () => dispatch(fetchGroups({ ...groupsPagination, offset: 0, filters: groupsFilters, usesMetaInURL: true, chrome })),\n              cancelRoute: pathnames['group-detail-roles'].link.replace(':groupId', groupId),\n              submitRoute: getBackRoute(pathnames.groups.link, { ...groupsPagination, offset: 0 }, groupsFilters),\n              groupsUuid: [group],\n            },\n            [pathnames['group-add-roles'].path]: {\n              afterSubmit: () => {\n                if (isPlatformDefault || isAdminDefault) {\n                  fetchSystGroup().then(({ value: { data } }) => {\n                    fetchGroupRoles(pagination)(data[0].uuid);\n                    fetchGroupData(data[0].uuid);\n                  });\n                } else {\n                  fetchGroupRoles(pagination)(groupId);\n                  fetchGroupData();\n                }\n              },\n              fetchUuid: systemGroupUuid,\n              selectedRoles: selectedAddRoles,\n              setSelectedRoles: setSelectedAddRoles,\n              closeUrl: pathnames['group-detail'].link.replace(':groupId', isPlatformDefault ? DEFAULT_ACCESS_GROUP_ID : groupId),\n              addRolesToGroup: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n              groupName: group.name,\n              isDefault: isPlatformDefault || isAdminDefault,\n              isChanged,\n              onDefaultGroupChanged,\n            },\n          }}\n        />\n      </Suspense>\n    </React.Fragment>\n  );\n};\n\nGroupRoles.propTypes = {\n  searchFilter: PropTypes.string,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  onDefaultGroupChanged: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default GroupRoles;\n"],"names":["DropdownPosition","DropdownDirection","DropdownContext","onSelect","event","id","toggleIndicatorClass","toggleIconClass","toggleTextClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","menuComponent","DropdownArrowContext","keyHandler","sendRef","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","_a","_b","type","children","className","props","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","sectionClasses","concat","undefined","linkBasename","navigate","useNavigate","to","options","RemoveModal","title","text","onClose","onSubmit","isOpen","confirmButtonLabel","withCheckbox","intl","checked","setChecked","useState","Modal","variant","ModalVariant","small","actions","Button","key","ouiaId","isDisabled","onClick","formatMessage","cancel","Split","hasGutter","SplitItem","isFilled","Stack","TextContent","Checkbox","isChecked","onChange","label","confirmCheckMessage","propTypes","defaultProps","DefaultGroupChange","Text","defaultAccessGroupEditWarning","values","b","warning","continue","RemoveRoles","isDefault","isChanged","showConfirmModal","setShowConfirmModal","createRows","groupId","roles","checkedRows","reduce","acc","uuid","display_name","name","description","modified","cells","Fragment","AppLink","pathnames","link","replace","DateFormat","date","selected","Boolean","find","row","generateOuiaID","toLowerCase","includes","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","addRole","Tooltip","content","allRolesAdded","reducer","groupReducer","selectedGroup","systemGroup","groups","data","pagination","count","groupsPagination","meta","groupsFilters","filters","isLoading","isPlatformDefault","platform_default","isAdminDefault","admin_default","system","disableAddRoles","keys","addRoles","systemGroupUuid","group","GroupRoles","onDefaultGroupChanged","chrome","useChrome","dispatch","useDispatch","useAppNavigate","useParams","descriptionValue","setDescriptionValue","filterValue","setFilterValue","selectedRoles","setSelectedRoles","selectedAddRoles","setSelectedAddRoles","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","userAccessAdministrator","orgAdmin","useContext","hasPermissions","useRef","useSelector","reloadWrapper","callback","payload","then","fetchAddGroupRoles","fetchGroupData","customId","fetchSystGroup","removeRoles","fetchGroupRoles","columns","orderBy","lastModified","useEffect","current","removeModalText","role","plural","removeRolesModalText","removeRoleModalText","fetchUuid","removeRolesCallback","value","offset","Section","isSelectable","rows","fetchData","config","emptyFilters","setCheckedItems","newSelection","map","titlePlural","titleSingular","toolbarButtons","defaultGroupNotManually","remove","multipleRolesSelected","removeRolesQuestion","removeRoleQuestion","removeRole","actionResolver","_event","_rowId","emptyProps","noGroupRoles","contactServiceTeamForRoles","addRoleToConfigureAccess","tableId","Suspense","Outlet","context","path","cancelRoute","postMethod","usesMetaInURL","submitRoute","groupsUuid","afterSubmit","closeUrl","addRolesToGroup","groupName","searchFilter","limit","isRequired"],"sourceRoot":""}