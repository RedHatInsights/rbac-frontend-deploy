{"version":3,"file":"js/7325.2a75dd9a13630a273b2d.js","mappings":"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","sources":["webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/user/user-table-helpers.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const env = chrome.getEnvironment();\n  const prefix = chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded, groupId: groupUuid }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const textFilterRef = useRef(null);\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: {\n        addRoles: { roles, pagination, loaded },\n        uuid,\n      },\n    },\n  }) => ({\n    roles,\n    pagination: pagination || { ...defaultCompactSettings, count: roles?.length },\n    isLoading: !loaded,\n    groupId: groupUuid || uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) => (rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps(config)))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n      textFilterRef={textFilterRef}\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n  groupId: PropTypes.string,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { Alert, Button, Modal, ModalVariant, Stack, StackItem, Title } from '@patternfly/react-core';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Skeleton, SkeletonSize } from '@redhat-cloud-services/frontend-components/Skeleton';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { fetchGroup } from '../../../redux/actions/group-actions';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport RolesList from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\nimport './add-group-roles.scss';\n\nconst AddGroupRoles = ({\n  afterSubmit,\n  fetchUuid,\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  groupName: name,\n  isDefault,\n  isChanged,\n  onDefaultGroupChanged,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  let { state } = useLocation();\n\n  const { groupId: uuid } = useParams();\n  const groupId = isDefault && fetchUuid ? fetchUuid : uuid;\n  const navigate = useAppNavigate();\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const { groupName, isRecordLoading } = useSelector(({ groupReducer: { selectedGroup, isRecordLoading } }) => ({\n    groupName: name || state?.name || selectedGroup.name,\n    isRecordLoading,\n  }));\n\n  useEffect(() => {\n    groupName || dispatch(fetchGroup(groupId));\n  }, []);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupRolesTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupRolesCancelled),\n      })\n    );\n    navigate(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(groupId, rolesList).then(afterSubmit);\n    setSelectedRoles([]);\n    isDefault && !isChanged && onDefaultGroupChanged(true);\n    return navigate(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      className=\"rbac\"\n      title={intl.formatMessage(messages.addRolesToGroup, {\n        name: isRecordLoading ? <Skeleton size={SkeletonSize.xs} className=\"rbac-c-skeleton__add-role-to-group\" /> : groupName,\n      })}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <Alert variant=\"info\" isInline isPlain title={intl.formatMessage(messages.onlyGroupRolesVisible)} />\n        </StackItem>\n        <StackItem>\n          <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={true} groupId={groupId} />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  afterSubmit: PropTypes.func,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  groupName: PropTypes.string,\n  fetchUuid: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n};\n\nexport default AddGroupRoles;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  const intl = useIntl();\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            <FormattedMessage\n              {...messages.defaultAccessGroupEditWarning}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          </Text>\n        </TextContent>\n      }\n      title={intl.formatMessage(messages.warning)}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={intl.formatMessage(messages.continue)}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Label } from '@patternfly/react-core';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport messages from '../../Messages';\nimport { IntlShape } from 'react-intl';\n\ninterface UserProps {\n  email: string;\n  first_name: string;\n  is_active: boolean;\n  is_org_admin: boolean;\n  last_name: string;\n  username: string;\n  uuid: string;\n}\n\nexport type CellObject = { title: string | React.RefAttributes<HTMLAnchorElement>; props?: { 'data-is-active': boolean } };\n\nexport interface RowProps {\n  uuid: string; // username\n  cells: [\n    React.ReactNode, // yes or no for isOrgAdmin\n    CellObject, // link to user or just username\n    string, // email\n    string, // firstName\n    string, // lastName\n    CellObject // status\n  ];\n  selected: boolean;\n}\n\nexport const createRows = (userLinks: boolean, data: UserProps[] = [], intl: IntlShape, checkedRows = [], isSelectable = false): RowProps[] =>\n  data?.reduce<RowProps[]>((acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => {\n    const newEntry: RowProps = {\n      uuid: username,\n      cells: [\n        isOrgAdmin ? (\n          <Fragment>\n            <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n            <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n            <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n          </Fragment>\n        ),\n        { title: userLinks ? <Link to={`/users/detail/${username}`}>{username.toString()}</Link> : username.toString() },\n        email,\n        firstName,\n        lastName,\n        {\n          title: (\n            <Label key=\"status\" color={isActive ? 'green' : 'grey'}>\n              {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n            </Label>\n          ),\n          props: {\n            'data-is-active': isActive,\n          },\n        },\n      ],\n      selected: isSelectable ? Boolean(checkedRows?.find?.(({ uuid }) => uuid === username)) : false,\n    };\n\n    return [...acc, newEntry];\n  }, []);\n"],"names":["ActiveUser","linkDescription","linkTitle","intl","useIntl","chrome","useChrome","env","getEnvironment","prefix","isProd","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","formatMessage","messages","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","RolesList","selectedRoles","setSelectedRoles","rolesExcluded","groupUuid","groupId","dispatch","useDispatch","textFilterRef","useRef","useSelector","groupReducer","selectedGroup","addRoles","roles","pagination","loaded","uuid","defaultCompactSettings","count","length","isLoading","roleReducer","meta","filters","shallowEqual","columns","title","key","orderBy","transforms","sortable","current","useState","filterValue","setFilterValue","index","direction","sortByState","setSortByState","fetchRoles","useCallback","config","fetchAddRolesForGroup","fetchRolesWithPolicies","mappedProps","rows","checkedRows","reduce","acc","display_name","name","description","cells","selected","Boolean","find","createRows","useEffect","isSelectable","isCompact","borders","sortBy","onSort","e","limit","offset","fetchTableData","curr","value","filterPlaceholder","toLowerCase","fetchData","ouiaId","setCheckedItems","newSelection","map","label","titlePlural","titleSingular","tableId","canSort","GroupRowWrapper","classnames","isPlatformDefault","isAdminDefault","AddGroupRoles","afterSubmit","fetchUuid","closeUrl","addRolesToGroup","groupName","isDefault","isChanged","onDefaultGroupChanged","state","useLocation","useParams","navigate","useAppNavigate","showConfirmModal","setShowConfirmModal","isRecordLoading","fetchGroup","onCancel","addNotification","variant","dismissDelay","onSubmit","rolesList","role","then","isOpen","onClose","Modal","size","SkeletonSize","ModalVariant","actions","Button","isDisabled","onClick","Stack","hasGutter","StackItem","Title","headingLevel","Alert","isInline","isPlain","DefaultGroupChange","text","TextContent","values","b","withCheckbox","confirmButtonLabel","userLinks","username","is_active","email","first_name","firstName","last_name","lastName","is_org_admin","isOrgAdmin","Fragment","CheckIcon","CloseIcon","Link","to","toString","Label","color"],"sourceRoot":""}