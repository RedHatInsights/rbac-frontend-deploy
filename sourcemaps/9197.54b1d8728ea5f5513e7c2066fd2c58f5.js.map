{"version":3,"file":"js/9197.2a75dd9a13630a273b2d.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/member/member-table-helpers.js","webpack:///./src/smart-components/group/member/add-group-members.js","webpack:///./src/smart-components/group/member/group-members.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { useEffect, useState, useContext, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport messages from '../../../Messages';\nimport { createRows } from '../../user/user-table-helpers';\n\nconst UsersList = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, displayNarrow, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { orgAdmin } = useContext(PermissionsContext);\n  // use for text filter to focus\n  const innerRef = useRef(null);\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.username })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n  const columns = [\n    { title: intl.formatMessage(displayNarrow ? messages.orgAdmin : messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n  return (\n    <TableToolbarView\n      isCompact\n      isSelectable\n      borders={false}\n      columns={columns}\n      rows={createRows(userLinks, users, intl, selectedUsers, true)}\n      sortBy={sortByState}\n      onSort={(e, index, direction) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index].key}`;\n        setSortByState({ index, direction });\n        fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n      }}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n\n        fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n          innerRef?.current?.focus();\n        });\n        usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nUsersList.propTypes = {\n  displayNarrow: PropTypes.bool,\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  displayNarrow: false,\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersList;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} displayNarrow />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { useIntl } from 'react-intl';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters, orderBy }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const navigate = useAppNavigate();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, orderBy, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  orderBy: PropTypes.string,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Skeleton } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { debouncedAsyncValidator } from './validators';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({ postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute, group, onClose }) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const navigate = useNavigate();\n  const { groupId } = useParams();\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    groupId &&\n      fetchGroup(groupId)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? dispatch(updateGroup(user_data))\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(navigate(submitRoute))\n      : dispatch(updateGroup(user_data)).then(() => {\n          navigate(submitRoute);\n        });\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        dismissDelay: 8000,\n        title: intl.formatMessage(selectedGroup ? messages.editingGroupTitle : messages.addingGroupTitle),\n        description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n      })\n    );\n    onClose();\n    navigate(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: groupId ?? group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n};\n\nEditGroupModal.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nexport default EditGroupModal;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({ groupsUuid, isModalOpen, postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute }) => {\n  const intl = useIntl();\n  const { group, isLoading } = useSelector(\n    ({ groupReducer: { selectedGroup } }) => ({\n      group: selectedGroup,\n      isLoading: !selectedGroup.loaded,\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      dispatch(fetchGroup(groupsUuid[0].uuid));\n    }\n  }, []);\n\n  const navigate = useNavigate();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    dispatch(removeGroups(uuids))\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(navigate(submitRoute));\n  };\n\n  const onCancel = () => navigate(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  groupsUuid: [],\n  isModalOpen: false,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  groupsUuid: PropTypes.array.isRequired,\n  isModalOpen: PropTypes.bool,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default RemoveGroupModal;\n","import React, { Fragment, useRef, useState } from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport AppLink from '../../presentational-components/shared/AppLink';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport pathnames from '../../utilities/pathnames';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <AppLink\n                  key={`${uuid}-link`}\n                  state={{ uuid }}\n                  to={pathnames['group-detail'].link.replace(':groupId', isPlatformDefault ? 'default-access' : uuid)}\n                >\n                  {name}\n                </AppLink>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ tabItems, isHeader }) => {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => navigate(tabItems[tabIndex].to);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default AppTabs;\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport UsersList from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\n\nconst AddGroupMembers = ({ closeUrl }) => {\n  const intl = useIntl();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const dispatch = useDispatch();\n\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      dispatch(\n        addNotification({\n          variant: 'info',\n          title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n        })\n      );\n      dispatch(addMembersToGroup(groupId, userList)).then(() => {\n        dispatch(fetchMembersForGroup(groupId));\n        dispatch(fetchGroups({ usesMetaInURL: true }));\n      });\n    }\n    navigate(closeUrl);\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n      })\n    );\n    navigate(closeUrl);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} displayNarrow />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  closeUrl: pathnames.groups.link,\n};\n\nAddGroupMembers.propTypes = {\n  closeUrl: PropTypes.string,\n};\n\nexport default AddGroupMembers;\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Outlet, Route, Routes, useParams } from 'react-router-dom';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './member-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport AddGroupMembers from './add-group-members';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  members: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupMembers = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedMembers, setSelectedMembers] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { groupId } = useParams();\n  const { members, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(groupId, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedMembers = (newSelection) => {\n    setSelectedMembers((members) => newSelection(members));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(groupId, userNames)).then(() => {\n      setSelectedMembers([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ usesMetaInURL: true }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, member) => {\n              setConfirmDelete(() => () => removeMembers([member.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(member.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Routes>\n      <Route\n        path={pathnames['group-add-members'].path}\n        element={<AddGroupMembers fetchData={fetchData} closeUrl={pathnames['group-detail-members'].link.replace(':groupId', groupId)} />}\n      />\n    </Routes>\n  );\n\n  const navigate = useAppNavigate();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <AppLink to={pathnames['group-add-members'].link.replace(':groupId', groupId)} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </AppLink>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              () => navigate(pathnames['group-add-members'].link.replace(':groupId', groupId));\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedMembers || !selectedMembers.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedMembers.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedMembers.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(multipleMembersSelected ? selectedMembers.length : selectedMembers[0].uuid, groupName, multipleMembersSelected),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  const data = (members || []).map((user) => ({ ...user, uuid: user.username }));\n  const rows = createRows(data, selectedMembers);\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id=\"tab-principals\">\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarView\n            data={data}\n            isSelectable={hasPermissions.current}\n            rows={rows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedMembers}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedMembers}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n      <Outlet />\n    </Fragment>\n  );\n};\n\nexport default GroupMembers;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Outlet, Route, Routes, useParams } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\nimport './group-roles.scss';\n\nconst createRows = (groupId, data, checkedRows = []) =>\n  data?.reduce(\n    (acc, { uuid, display_name, name, description, modified }) => [\n      ...acc,\n      {\n        uuid,\n        title: display_name || name,\n        cells: [\n          <Fragment key={`${uuid}-name`}>\n            <AppLink to={pathnames['group-detail-role-detail'].link.replace(':groupId', groupId).replace(':roleId', uuid)}>\n              {display_name || name}\n            </AppLink>\n          </Fragment>,\n          description,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  ) || [];\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst reducer = ({ groupReducer: { selectedGroup, systemGroup } }) => ({\n  roles: selectedGroup.roles,\n  pagination: selectedGroup.pagination || { ...defaultSettings, count: selectedGroup?.roles && selectedGroup.roles.length },\n  isLoading: !selectedGroup.loaded,\n  name: selectedGroup.name,\n  isPlatformDefault: selectedGroup.platform_default,\n  isAdminDefault: selectedGroup.admin_default,\n  isChanged: !selectedGroup.system,\n  disableAddRoles:\n    /**\n     * First validate if the pagination object exists and is not empty.\n     * If empty or undefined, the disable condition will be always true\n     */\n    Object.keys(selectedGroup.addRoles.pagination || {}).length > 0\n      ? !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default\n      : !!selectedGroup.admin_default,\n  systemGroupUuid: systemGroup?.uuid,\n});\n\nconst GroupRoles = ({ onDefaultGroupChanged }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n  const { roles, pagination, isLoading, name, isPlatformDefault, isAdminDefault, isChanged, disableAddRoles, systemGroupUuid } = useSelector(reducer);\n\n  const reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n  };\n\n  const fetchAddGroupRoles = (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {}));\n  const fetchGroupData = (customId) => dispatch(fetchGroup(customId ?? groupId));\n  const fetchSystGroup = () => dispatch(fetchSystemGroup());\n  const removeRoles = (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback));\n  const fetchGroupRoles = (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options));\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    if (groupId !== 'default-access') {\n      fetchGroupRoles(pagination)(groupId);\n    } else {\n      systemGroupUuid && fetchGroupRoles(pagination)(systemGroupUuid);\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    if (roles?.length > 0) {\n      if (groupId !== 'default-access') {\n        fetchAddGroupRoles(groupId);\n      } else {\n        systemGroupUuid && fetchAddGroupRoles(systemGroupUuid);\n      }\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = groupId !== 'default-access' ? groupId : systemGroupUuid;\n\n  const removeRolesCallback = () => {\n    if (isPlatformDefault) {\n      fetchSystGroup().then(({ value: { data } }) => {\n        fetchGroupRoles({ ...pagination, offset: 0 })(data[0].uuid);\n      });\n    } else {\n      fetchGroupRoles({ ...pagination, offset: 0 })(groupId);\n    }\n  };\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(fetchUuid, [role.uuid], removeRolesCallback));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Routes>\n      <Route\n        path={pathnames['group-add-roles'].path}\n        element={\n          <AddGroupRoles\n            afterSubmit={() => {\n              if (isPlatformDefault || isAdminDefault) {\n                fetchSystGroup().then(({ value: { data } }) => {\n                  fetchGroupRoles(pagination)(data[0].uuid);\n                  fetchGroupData(data[0].uuid);\n                });\n              } else {\n                fetchGroupRoles(pagination)(groupId);\n                fetchGroupData();\n              }\n            }}\n            fetchUuid={systemGroupUuid}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={pathnames['group-detail'].link.replace(':groupId', isPlatformDefault ? 'default-access' : groupId)}\n            addRolesToGroup={(groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback))}\n            groupName={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n          />\n        }\n      />\n    </Routes>\n  );\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <AppLink\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={pathnames['group-add-roles'].link.replace(':groupId', groupId)}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </AppLink>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => navigate(pathnames['group-add-roles'].link.replace(':groupId', groupId)),\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    removeRolesCallback\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id=\"tab-roles\">\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          rows={createRows(groupId, roles, selectedRoles)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchGroupRoles(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n      <Outlet />\n    </React.Fragment>\n  );\n};\n\nGroupRoles.propTypes = {\n  searchFilter: PropTypes.string,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  onDefaultGroupChanged: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default GroupRoles;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Route, useLocation, useParams, Routes } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport AppTabs from '../app-tabs/app-tabs';\nimport useAppNavigate from '../../hooks/useAppNavigate';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupMembers from './member/group-members';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport AppLink, { mergeToBasename } from '../../presentational-components/shared/AppLink';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport './group.scss';\n\nconst Group = ({ onDelete }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n  const location = useLocation();\n  const chrome = useChrome();\n  const { groupId } = useParams();\n  const isPlatformDefault = groupId === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: 'Roles', name: pathnames['group-detail-roles'].link.replace(':groupId', groupId), to: 'roles' },\n    { eventKey: 1, title: 'Members', name: pathnames['group-detail-members'].link.replace(':groupId', groupId), to: 'members' },\n  ];\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const { group, isFetching } = useSelector(\n    ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n      group: selectedGroup,\n      isFetching: isRecordLoading || isRecordRolesLoading,\n    }),\n    shallowEqual\n  );\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchSystemGroup());\n    const currId = !isPlatformDefault ? groupId : systemGroupUuid;\n    if (currId) {\n      dispatch(fetchGroup(currId));\n      chrome.appObjectId(currId);\n    }\n    return () => chrome.appObjectId(undefined);\n  }, [groupId, systemGroupUuid]);\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(mergeToBasename(pathnames.groups.link), pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <AppLink\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).link.replace(\n            ':groupId',\n            isPlatformDefault ? 'default-access' : groupId\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </AppLink>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <AppLink\n          onClick={() => onDelete(groupId)}\n          to={(location.pathname.includes('members')\n            ? pathnames['group-detail-members-remove']\n            : pathnames['group-detail-roles-remove']\n          ).link.replace(':groupId', groupId)}\n        >\n          {intl.formatMessage(messages.delete)}\n        </AppLink>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchId = isPlatformDefault ? systemGroupUuid : groupId;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            dispatch(removeGroups([systemGroupUuid])).then(() =>\n              dispatch(fetchSystemGroup()).then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            navigate(pathnames['group-detail-roles'].link).replace(':groupId', 'default-access');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Routes>\n            <Route path={pathnames['group-detail-roles'].path} element={<GroupRoles onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}>\n              <Route\n                path={pathnames['group-detail-roles-remove'].path}\n                element={\n                  <RemoveGroup\n                    postMethod={() => dispatch(fetchGroups({ ...pagination, offset: 0, filters, usesMetaInURL: true }))}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-roles'].link.replace(':groupId', groupId))}\n                    submitRoute={getBackRoute(mergeToBasename(pathnames.groups.link), { ...pagination, offset: 0 }, filters)}\n                    isModalOpen\n                    groupsUuid={[group]}\n                  />\n                }\n              />\n              <Route\n                path={pathnames['group-detail-roles-edit'].path}\n                element={\n                  <EditGroup\n                    group={group}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-roles'].link.replace(':groupId', groupId))}\n                    postMethod={() => dispatch(fetchGroup(fetchId))}\n                  />\n                }\n              />\n            </Route>\n            <Route path={pathnames['group-detail-members'].path} element={<GroupMembers />}>\n              <Route\n                path={pathnames['group-detail-members-remove'].path}\n                element={\n                  <RemoveGroup\n                    postMethod={() => dispatch(fetchGroups({ ...pagination, offset: 0, filters, usesMetaInURL: true }))}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-members'].link.replace(':groupId', groupId))}\n                    submitRoute={getBackRoute(mergeToBasename(pathnames.groups.link), { ...pagination, offset: 0 }, filters)}\n                    isModalOpen\n                    groupsUuid={[group]}\n                  />\n                }\n              />\n              <Route\n                path={pathnames['group-detail-members-edit'].path}\n                element={\n                  <EditGroup\n                    group={group}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-members'].link.replace(':groupId', groupId))}\n                    postMethod={() => dispatch(fetchGroup(fetchId))}\n                  />\n                }\n              />\n            </Route>\n            <Route path=\"/*\" element={<GroupRoles onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />} />\n          </Routes>\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: groupId })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => navigate(-1)}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nGroup.propTypes = {\n  onDelete: PropTypes.func,\n};\n\nexport default Group;\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Route, Routes, useLocation, useNavigate } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport AppLink, { mergeToBasename } from '../../presentational-components/shared/AppLink';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Group from './group';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport PageActionRoute from '../common/page-action-route';\nimport {\n  applyPaginationToUrl,\n  defaultAdminSettings,\n  defaultSettings,\n  isPaginationPresentInUrl,\n  syncDefaultPaginationWithUrl,\n} from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute, removeQueryParams } from '../../helpers/shared/helpers';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const chrome = useChrome();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, usesMetaInURL: true }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n  const textFilterRef = useRef(null);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  // using 'isAdmin' (0 or 1) determines correct index for columns due to 'isSelectable' property on Table component\n  const [sortByState, setSortByState] = useState({ index: Number(isAdmin), direction: 'asc' });\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index - Number(isAdmin)].key}`;\n\n  const { groups, pagination, filters, isLoading, systemGroup } = useSelector(\n    ({\n      groupReducer: {\n        groups: { data, filters, pagination },\n        isLoading,\n        adminGroup,\n        systemGroup,\n      },\n    }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(filters.name, 'i')) ? [systemGroup] : []),\n        ...(data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      pagination: {\n        limit: pagination?.limit ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n        offset: pagination?.offset ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n        count: pagination?.count,\n        redirected: pagination?.redirected,\n      },\n      filters: filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [filterValue, setFilterValue] = useState(filters?.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const { name } = syncDefaultFiltersWithUrl(location, navigate, ['name'], { name: filterValue });\n    setFilterValue(name);\n    chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ limit, offset, orderBy, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    if (!location.pathname.includes('detail')) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      filterValue?.length > 0 &&\n        !areFiltersPresentInUrl(location, ['name']) &&\n        syncDefaultFiltersWithUrl(location, navigate, ['name'], { name: filterValue });\n    } else {\n      removeQueryParams(location, navigate);\n    }\n  }, [location.pathname]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  const routes = () => (\n    <Routes>\n      <Route\n        path={pathnames['add-group'].path}\n        element={\n          <AddGroupWizard\n            pagination={pagination}\n            filters={filters}\n            orderBy={orderBy}\n            postMethod={(config) => {\n              setFilterValue('');\n              fetchData(config);\n            }}\n          />\n        }\n      />\n      <Route\n        path={pathnames['edit-group'].path}\n        element={\n          <EditGroup\n            pagination={pagination}\n            filters={filters}\n            postMethod={(config) => {\n              setFilterValue('');\n              fetchData({ ...config, orderBy });\n            }}\n            cancelRoute={getBackRoute('../', pagination, filters)}\n            submitRoute={getBackRoute('../', { ...pagination, offset: 0 }, filters)}\n          />\n        }\n      />\n      <Route\n        path={pathnames['remove-group'].path}\n        element={\n          <RemoveGroup\n            pagination={pagination}\n            filters={filters}\n            postMethod={(ids, config) => {\n              fetchData({ ...config, orderBy });\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n            }}\n            cancelRoute={getBackRoute('../', pagination, filters)}\n            submitRoute={getBackRoute('../', { ...pagination, offset: 0 }, filters)}\n            isModalOpen\n            groupsUuid={removeGroupsList}\n          />\n        }\n      />\n    </Routes>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => navigate(mergeToBasename(pathnames['edit-group'].link).replace(':groupId', group.uuid)),\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              navigate(mergeToBasename(pathnames['remove-group'].link));\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <AppLink to={pathnames['add-group'].link} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </AppLink>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => navigate(mergeToBasename(pathnames['add-group'].link)),\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => navigate(mergeToBasename(pathnames['edit-group'].link.replace(':groupId', selectedRows[0].uuid))),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              navigate(mergeToBasename(pathnames['remove-group'].link));\n            },\n          },\n        ]\n      : []),\n  ];\n  const data = groups.map((group) =>\n    group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n  );\n  const rows = createRows(isAdmin, data, selectedRows);\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id=\"tab-groups\">\n          <TableToolbarView\n            data={groups}\n            rows={rows}\n            sortBy={sortByState}\n            onSort={(e, index, direction) => {\n              const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - Number(isAdmin)].key}`;\n              setSortByState({ index, direction });\n              applyFiltersToUrl(location, navigate, { name: filterValue });\n              fetchData({ ...pagination, orderBy, filters: { name: filterValue } });\n            }}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ name, count, limit, offset, orderBy }) => {\n              applyFiltersToUrl(location, navigate, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n            textFilterRef={textFilterRef}\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Routes>\n      <Route\n        path={pathnames['group-detail-role-detail'].path}\n        element={\n          <PageActionRoute pageAction=\"role-detail\">\n            <Role />\n          </PageActionRoute>\n        }\n      />\n      <Route\n        path={pathnames['group-detail'].path}\n        element={\n          <PageActionRoute pageAction=\"group-detail\">\n            <Group\n              defaultUuid={systemGroup?.uuid}\n              onDelete={(uuid) => {\n                setFilterValue('');\n                setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n              }}\n            />\n          </PageActionRoute>\n        }\n      />\n      <Route path=\"/*\" element={<PageActionRoute pageAction=\"group-list\">{renderGroupsList()}</PageActionRoute>} />\n    </Routes>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","PropTypes","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","useContext","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","propTypes","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","intl","useIntl","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","formatMessage","messages","number","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","length","fetchGroups","limit","offset","filters","nameMatch","console","response","data","some","item","debouncedAsyncValidator","asyncDebounce","value","ReviewTemplate","formFields","AddGroupWizardContext","getState","useEffect","values","then","Bullseye","Spinner","className","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","props","input","useFieldApi","description","useState","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","label","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","SetRoles","selectedRoles","setSelectedRoles","TextContent","Text","fieldId","rolesExcluded","UsersList","selectedUsers","setSelectedUsers","userLinks","usesMetaInURL","displayNarrow","navigate","useNavigate","location","useLocation","dispatch","useDispatch","orgAdmin","PermissionsContext","innerRef","useRef","pagination","useSelector","users","userReducer","meta","defaultAdminSettings","defaultSettings","count","redirected","isUserDataLoading","map","uuid","username","isLoading","stateFilters","search","Object","keys","status","fetchData","useCallback","apiProps","fetchUsers","updateStateFilters","updateUsersFilters","columns","key","transforms","nowrap","sortable","index","direction","sortByState","setSortByState","email","setFilters","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","mappedProps","isPaginationPresentInUrl","filter","areFiltersPresentInUrl","isCompact","isSelectable","borders","rows","createRows","sortBy","onSort","e","orderBy","ouiaId","config","prototype","hasOwnProperty","call","current","focus","applyFiltersToUrl","emptyFilters","setFilterValue","payload","checkedRows","setCheckedItems","newSelection","rowWrapper","UsersRow","titlePlural","toLowerCase","titleSingular","placeholder","items","tableId","searchFilter","defaultProps","SetUsers","Form","linkDescription","Card","SummaryContent","Grid","GridItem","md","component","TextVariants","role","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","schema","fields","isDynamic","inModal","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","useAppNavigate","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","addNotification","dismissDelay","pathname","paths","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","subscription","componentMapper","onSubmit","user_list","user","roles_list","addGroup","initialValues","EditGroupModal","cancelRoute","submitRoute","group","onClose","selectedGroup","setSelectedGroup","groupId","useParams","fetchGroup","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","updateGroup","ModalFormTemplate","ModalProps","pathnames","hash","RemoveGroupModal","groupsUuid","isModalOpen","groupReducer","loaded","shallowEqual","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","removeGroups","b","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","classNames","AppTabs","tabItems","isHeader","activeTab","find","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","to","Tab","AddGroupMembers","closeUrl","userList","addMembersToGroup","fetchMembersForGroup","selector","members","admin_default","platform_default","removeModalText","plural","filterValue","selectedMembers","setSelectedMembers","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","userAccessAdministrator","hasPermissions","usernames","options","removeMembers","userNames","removeMembersFromGroup","reduce","acc","isActive","is_active","firstName","first_name","lastName","last_name","cells","Label","selected","row","RemoveModal","confirmButtonLabel","Section","CardBody","routes","Routes","Route","path","element","actionResolver","_rowId","member","filterPlaceholder","toolbarButtons","AppLink","multipleMembersSelected","removeText","emptyProps","Outlet","RemoveRoles","isDefault","isChanged","showConfirmModal","setShowConfirmModal","display_name","modified","replace","DateFormat","date","getDateFormat","Boolean","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","reducer","systemGroup","roles","isPlatformDefault","isAdminDefault","system","disableAddRoles","addRoles","systemGroupUuid","GroupRoles","onDefaultGroupChanged","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","reloadWrapper","event","callback","fetchAddGroupRoles","fetchAddRolesForGroup","fetchGroupData","customId","fetchSystGroup","fetchSystemGroup","removeRoles","removeRolesFromGroup","fetchGroupRoles","fetchRolesForGroup","fetchUuid","removeRolesCallback","multipleRolesSelected","afterSubmit","addRolesToGroup","defaultCompactSettings","Group","onDelete","chrome","useChrome","groupExists","BAD_UUID","isRecordLoading","isRecordRolesLoading","isFetching","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","currId","appObjectId","breadcrumbsList","getBackRoute","mergeToBasename","dropdownItems","DropdownItem","link","fetchId","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","isAdmin","textFilterRef","Number","adminGroup","match","RegExp","selectedRows","setSelectedRows","removeGroupsList","setRemoveGroupsList","appNavClick","secondaryNav","fetchAdminGroup","removeQueryParams","principalCount","roleCount","state","pageAction","defaultUuid","paddingBottom","ids","GroupRowWrapper"],"sourceRoot":""}