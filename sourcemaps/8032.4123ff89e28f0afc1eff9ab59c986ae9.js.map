{"version":3,"file":"js/8032.d9a94be149be5494e04a.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/deprecated/components/Dropdown/dropdownConstants.js","webpack:///./node_modules/@patternfly/react-styles/css/components/Tooltip/tooltip.mjs","webpack:///./node_modules/@redhat-cloud-services/frontend-components/esm/Section/Section.js","webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/smart-components/group/service-account/group-service-accounts.js"],"sourcesContent":["import * as React from 'react';\nexport var DropdownPosition;\n(function (DropdownPosition) {\n    DropdownPosition[\"right\"] = \"right\";\n    DropdownPosition[\"left\"] = \"left\";\n})(DropdownPosition || (DropdownPosition = {}));\nexport var DropdownDirection;\n(function (DropdownDirection) {\n    DropdownDirection[\"up\"] = \"up\";\n    DropdownDirection[\"down\"] = \"down\";\n})(DropdownDirection || (DropdownDirection = {}));\nexport const DropdownContext = React.createContext({\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onSelect: (event) => undefined,\n    id: '',\n    toggleIndicatorClass: '',\n    toggleIconClass: '',\n    toggleTextClass: '',\n    menuClass: '',\n    itemClass: '',\n    toggleClass: '',\n    baseClass: '',\n    baseComponent: 'div',\n    sectionClass: '',\n    sectionTitleClass: '',\n    sectionComponent: 'section',\n    disabledClass: '',\n    plainTextClass: '',\n    menuComponent: 'ul'\n});\nexport const DropdownArrowContext = React.createContext({\n    keyHandler: null,\n    sendRef: null\n});\n//# sourceMappingURL=dropdownConstants.js.map","import './tooltip.css';\nexport default {\n  \"modifiers\": {\n    \"top\": \"pf-m-top\",\n    \"topLeft\": \"pf-m-top-left\",\n    \"topRight\": \"pf-m-top-right\",\n    \"bottom\": \"pf-m-bottom\",\n    \"bottomLeft\": \"pf-m-bottom-left\",\n    \"bottomRight\": \"pf-m-bottom-right\",\n    \"left\": \"pf-m-left\",\n    \"leftTop\": \"pf-m-left-top\",\n    \"leftBottom\": \"pf-m-left-bottom\",\n    \"right\": \"pf-m-right\",\n    \"rightTop\": \"pf-m-right-top\",\n    \"rightBottom\": \"pf-m-right-bottom\",\n    \"textAlignLeft\": \"pf-m-text-align-left\"\n  },\n  \"themeDark\": \"pf-v5-theme-dark\",\n  \"tooltip\": \"pf-v5-c-tooltip\",\n  \"tooltipArrow\": \"pf-v5-c-tooltip__arrow\",\n  \"tooltipContent\": \"pf-v5-c-tooltip__content\"\n};","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport classNames from 'classnames';\nimport '../Section/section.css';\nvar Section = function (_a) {\n    var _b;\n    var type = _a.type, children = _a.children, className = _a.className, props = __rest(_a, [\"type\", \"children\", \"className\"]);\n    var sectionClasses = classNames(className, (_b = {}, _b[\"ins-l-\".concat(type)] = type !== undefined, _b));\n    return (_jsxs(\"section\", __assign({}, props, { className: sectionClasses, children: [' ', children, ' '] })));\n};\nexport default Section;\n//# sourceMappingURL=Section.js.map","import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React, { useState, useEffect, useContext, useRef, Suspense, Fragment, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Outlet, createSearchParams, useParams } from 'react-router-dom';\nimport { Alert, Bullseye, Button, Card, CardBody, Text, TextContent, TextVariants } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchServiceAccountsForGroup } from '../../../redux/actions/group-actions';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport { DEFAULT_ACCESS_GROUP_ID } from '../../../utilities/constants';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\nimport './group-service-accounts.scss';\n\nconst createRows = (data = [], checkedRows = []) =>\n  data?.reduce(\n    (acc, { uuid, name, clientID, owner, time_created: timeCreated }) => [\n      ...acc,\n      {\n        uuid,\n        title: name,\n        cells: [\n          name,\n          clientID,\n          owner,\n          <Fragment key={`${name}-modified`}>\n            <DateFormat date={timeCreated} type={getDateFormat(timeCreated)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n\nconst reducer = ({ groupReducer: { selectedGroup, systemGroup, groups } }) => ({\n  serviceAccounts: selectedGroup.serviceAccounts?.data || [],\n  pagination: { ...defaultSettings, ...(selectedGroup?.serviceAccounts?.meta || {}) },\n  groupsPagination: groups.pagination || groups.meta,\n  groupsFilters: groups.filters,\n  isLoading: selectedGroup.serviceAccounts.isLoading,\n  isAdminDefault: selectedGroup.admin_default,\n  systemGroupUuid: systemGroup?.uuid,\n  group: selectedGroup,\n  platformDefault: selectedGroup.platform_default,\n});\n\nconst GroupServiceAccounts = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const [clientIDValue, setClientIDValue] = useState('');\n  const [selectedAccounts, setSelectedAccounts] = useState([]);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n  const { serviceAccounts, pagination, isLoading, isAdminDefault, systemGroupUuid, platformDefault } = useSelector(reducer);\n\n  const fetchGroupAccounts = (groupId, options) => dispatch(fetchServiceAccountsForGroup(groupId, options));\n\n  const columns = [\n    { title: intl.formatMessage(messages.name) },\n    { title: intl.formatMessage(messages.clientId) },\n    { title: intl.formatMessage(messages.owner) },\n    { title: intl.formatMessage(messages.timeCreated) },\n  ];\n\n  const fetchData = useCallback(() => {\n    if (groupId !== DEFAULT_ACCESS_GROUP_ID) {\n      fetchGroupAccounts(groupId, pagination);\n    } else {\n      systemGroupUuid && fetchGroupAccounts(systemGroupUuid, pagination);\n    }\n  }, [systemGroupUuid, groupId]);\n\n  useEffect(() => {\n    fetchData();\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const actionResolver = ({ uuid }) => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: () =>\n              navigate({\n                pathname: pathnames['group-service-accounts-remove-group'].link.replace(':groupId', groupId),\n                search: createSearchParams({ name: uuid }).toString(),\n              }),\n          },\n        ]\n      : []),\n  ];\n\n  const toolbarButtons = () => [\n    <AppLink className=\"rbac-m-hide-on-sm\" to={pathnames['group-add-service-account'].link.replace(':groupId', groupId)} key=\"add-to-group\">\n      <Button ouiaId=\"add-service-account-button\" variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add service account to group\">\n        {intl.formatMessage(messages.addServiceAccount)}\n      </Button>\n    </AppLink>,\n    {\n      label: intl.formatMessage(messages.remove),\n      props: {\n        isDisabled: selectedAccounts.length === 0,\n      },\n      onClick: () => {\n        const searchParams = createSearchParams();\n        selectedAccounts.forEach(({ name }) => searchParams.append('name', name));\n        navigate({\n          pathname: pathnames['group-service-accounts-remove-group'].link.replace(':groupId', groupId),\n          search: searchParams.toString(),\n        });\n      },\n    },\n    {\n      label: intl.formatMessage(messages.addServiceAccount),\n      props: {\n        className: 'rbac-m-hide-on-md',\n      },\n      onClick: () => navigate(pathnames['group-add-service-account'].link.replace(':groupId', groupId)),\n    },\n  ];\n  return (\n    <React.Fragment>\n      <Section type=\"content\" id=\"tab-service-accounts\">\n        {platformDefault ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>{intl.formatMessage(messages.noAccountsInDefaultAccess)}</Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <>\n            <Alert\n              className=\"rbac-service-accounts-alert\"\n              variant=\"info\"\n              isInline\n              isPlain\n              title={intl.formatMessage(messages.visitServiceAccountsPage, {\n                link: (\n                  <AppLink to=\"/service-accounts\" linkBasename=\"/iam\">\n                    {intl.formatMessage(messages.serviceAccountsPage)}\n                  </AppLink>\n                ),\n              })}\n            />\n            <TableToolbarView\n              columns={columns}\n              isSelectable\n              rows={createRows(serviceAccounts, selectedAccounts)}\n              data={serviceAccounts}\n              filterValue={clientIDValue}\n              fetchData={(config) => fetchGroupAccounts(groupId, config)}\n              emptyFilters={{ description: '' }}\n              setFilterValue={({ clientID }) => {\n                typeof clientID !== 'undefined' && setClientIDValue(clientID);\n              }}\n              isLoading={isLoading}\n              pagination={pagination}\n              checkedRows={selectedAccounts}\n              setCheckedItems={setSelectedAccounts}\n              titlePlural={intl.formatMessage(messages.serviceAccounts).toLowerCase()}\n              titleSingular={intl.formatMessage(messages.serviceAccount)}\n              toolbarButtons={toolbarButtons}\n              actionResolver={actionResolver}\n              emptyProps={{\n                title: intl.formatMessage(messages.noGroupAccounts),\n                description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForAccounts : messages.addAccountsToThisGroup), ''],\n              }}\n              filters={[{ key: 'clientID', value: clientIDValue }]}\n              tableId=\"group-accounts\"\n              ouiaId=\"group-accounts\"\n            />\n          </>\n        )}\n      </Section>\n      {!platformDefault ? (\n        <Suspense>\n          <Outlet\n            context={{\n              [pathnames['group-service-accounts-remove-group'].path]: {\n                postMethod: (promise) => {\n                  setSelectedAccounts([]);\n                  navigate(pathnames['group-detail-service-accounts'].link.replace(':groupId', groupId));\n                  if (promise) {\n                    promise.then?.(fetchData);\n                  }\n                },\n              },\n              [pathnames['group-add-service-account'].path]: {\n                postMethod: (promise) => {\n                  navigate(pathnames['group-detail-service-accounts'].link.replace(':groupId', groupId));\n                  if (promise) {\n                    promise.then?.(fetchData);\n                  }\n                },\n              },\n            }}\n          />\n        </Suspense>\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nexport default GroupServiceAccounts;\n"],"names":["DropdownPosition","DropdownDirection","DropdownContext","onSelect","event","id","toggleIndicatorClass","toggleIconClass","toggleTextClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","menuComponent","DropdownArrowContext","keyHandler","sendRef","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","_a","_b","type","children","className","props","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__rest","sectionClasses","concat","undefined","linkBasename","navigate","useNavigate","to","options","createRows","data","checkedRows","reduce","acc","uuid","name","clientID","owner","time_created","timeCreated","title","cells","Fragment","key","date","selected","Boolean","find","row","reducer","groupReducer","selectedGroup","systemGroup","groups","serviceAccounts","pagination","meta","groupsPagination","groupsFilters","filters","isLoading","isAdminDefault","admin_default","systemGroupUuid","group","platformDefault","platform_default","intl","dispatch","useDispatch","groupId","useParams","clientIDValue","setClientIDValue","useState","selectedAccounts","setSelectedAccounts","userAccessAdministrator","orgAdmin","useContext","hasPermissions","useRef","useSelector","fetchGroupAccounts","columns","formatMessage","clientId","fetchData","useCallback","useEffect","current","Card","CardBody","Bullseye","TextContent","Text","component","TextVariants","h1","noAccountsInDefaultAccess","Alert","variant","isInline","isPlain","visitServiceAccountsPage","link","serviceAccountsPage","isSelectable","rows","filterValue","config","emptyFilters","description","setFilterValue","setCheckedItems","titlePlural","toLowerCase","titleSingular","serviceAccount","toolbarButtons","replace","Button","ouiaId","addServiceAccount","label","remove","isDisabled","onClick","searchParams","createSearchParams","forEach","append","pathname","search","toString","actionResolver","emptyProps","noGroupAccounts","contactServiceTeamForAccounts","addAccountsToThisGroup","value","tableId","Suspense","Outlet","context","path","postMethod","promise","then"],"sourceRoot":""}