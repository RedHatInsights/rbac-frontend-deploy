{"version":3,"file":"js/7426.34cb63ae6a700e769731.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/member/member-table-helpers.js","webpack:///./src/smart-components/group/member/add-group-members.js","webpack:///./src/smart-components/group/member/group-members.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} displayNarrow />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { useIntl } from 'react-intl';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters, orderBy }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const navigate = useAppNavigate();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, orderBy, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  orderBy: PropTypes.string,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Skeleton } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { debouncedAsyncValidator } from './validators';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({ postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute, group, onClose }) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const navigate = useNavigate();\n  const { groupId } = useParams();\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    groupId &&\n      fetchGroup(groupId)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? dispatch(updateGroup(user_data))\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(navigate(submitRoute))\n      : dispatch(updateGroup(user_data)).then(() => {\n          navigate(submitRoute);\n        });\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        dismissDelay: 8000,\n        title: intl.formatMessage(selectedGroup ? messages.editingGroupTitle : messages.addingGroupTitle),\n        description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n      })\n    );\n    onClose();\n    navigate(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: groupId ?? group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n};\n\nEditGroupModal.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nexport default EditGroupModal;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { useNavigate } from 'react-router-dom';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({ groupsUuid, isModalOpen, postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute }) => {\n  const intl = useIntl();\n  const { group, isLoading } = useSelector(\n    ({ groupReducer: { selectedGroup } }) => ({\n      group: selectedGroup,\n      isLoading: !selectedGroup.loaded,\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      dispatch(fetchGroup(groupsUuid[0].uuid));\n    }\n  }, []);\n\n  const navigate = useNavigate();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    dispatch(removeGroups(uuids))\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(navigate(submitRoute));\n  };\n\n  const onCancel = () => navigate(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  groupsUuid: [],\n  isModalOpen: false,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  groupsUuid: PropTypes.array.isRequired,\n  isModalOpen: PropTypes.bool,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default RemoveGroupModal;\n","import React, { Fragment, useRef, useState } from 'react';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport AppLink from '../../presentational-components/shared/AppLink';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport pathnames from '../../utilities/pathnames';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <AppLink\n                  key={`${uuid}-link`}\n                  state={{ uuid }}\n                  to={pathnames['group-detail'].link.replace(':groupId', isPlatformDefault ? 'default-access' : uuid)}\n                >\n                  {name}\n                </AppLink>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ tabItems, isHeader }) => {\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => navigate(tabItems[tabIndex].to);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default AppTabs;\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport UsersList from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\n\nconst AddGroupMembers = ({ closeUrl }) => {\n  const intl = useIntl();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const dispatch = useDispatch();\n\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      dispatch(\n        addNotification({\n          variant: 'info',\n          title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n        })\n      );\n      dispatch(addMembersToGroup(groupId, userList)).then(() => {\n        dispatch(fetchMembersForGroup(groupId));\n        dispatch(fetchGroups({ usesMetaInURL: true }));\n      });\n    }\n    navigate(closeUrl);\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n      })\n    );\n    navigate(closeUrl);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} displayNarrow />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  closeUrl: pathnames.groups.link,\n};\n\nAddGroupMembers.propTypes = {\n  closeUrl: PropTypes.string,\n};\n\nexport default AddGroupMembers;\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Outlet, Route, Routes, useParams } from 'react-router-dom';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './member-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport AddGroupMembers from './add-group-members';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  members: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupMembers = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedMembers, setSelectedMembers] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { groupId } = useParams();\n  const { members, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(groupId, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedMembers = (newSelection) => {\n    setSelectedMembers((members) => newSelection(members));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(groupId, userNames)).then(() => {\n      setSelectedMembers([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ usesMetaInURL: true }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, member) => {\n              setConfirmDelete(() => () => removeMembers([member.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(member.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Routes>\n      <Route path={pathnames['group-add-members'].path} element={<AddGroupMembers fetchData={fetchData} closeUrl=\"../\" />} />\n    </Routes>\n  );\n\n  const navigate = useAppNavigate();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <AppLink to={pathnames['group-add-members'].link} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </AppLink>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              () => navigate(pathnames['group-add-members'].link.replace(':groupId', groupId));\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedMembers || !selectedMembers.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedMembers.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedMembers.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(multipleMembersSelected ? selectedMembers.length : selectedMembers[0].uuid, groupName, multipleMembersSelected),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  const data = (members || []).map((user) => ({ ...user, uuid: user.username }));\n  const rows = createRows(data, selectedMembers);\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id=\"tab-principals\">\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarView\n            data={data}\n            isSelectable={hasPermissions.current}\n            rows={rows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedMembers}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedMembers}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n      <Outlet />\n    </Fragment>\n  );\n};\n\nexport default GroupMembers;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Outlet, Route, Routes, useParams } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\nimport './group-roles.scss';\n\nconst createRows = (groupId, data, checkedRows = []) =>\n  data?.reduce(\n    (acc, { uuid, display_name, name, description, modified }) => [\n      ...acc,\n      {\n        uuid,\n        title: display_name || name,\n        cells: [\n          <Fragment key={`${uuid}-name`}>\n            <AppLink to={pathnames['group-detail-role-detail'].link.replace(':groupId', groupId).replace(':roleId', uuid)}>\n              {display_name || name}\n            </AppLink>\n          </Fragment>,\n          description,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  ) || [];\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst reducer = ({ groupReducer: { selectedGroup, systemGroup } }) => ({\n  roles: selectedGroup.roles,\n  pagination: selectedGroup.pagination || { ...defaultSettings, count: selectedGroup?.roles && selectedGroup.roles.length },\n  isLoading: !selectedGroup.loaded,\n  name: selectedGroup.name,\n  isPlatformDefault: selectedGroup.platform_default,\n  isAdminDefault: selectedGroup.admin_default,\n  isChanged: !selectedGroup.system,\n  disableAddRoles:\n    /**\n     * First validate if the pagination object exists and is not empty.\n     * If empty or undefined, the disable condition will be always true\n     */\n    Object.keys(selectedGroup.addRoles.pagination || {}).length > 0\n      ? !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default\n      : !!selectedGroup.admin_default,\n  systemGroupUuid: systemGroup?.uuid,\n});\n\nconst GroupRoles = ({ onDefaultGroupChanged }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n  const { roles, pagination, isLoading, name, isPlatformDefault, isAdminDefault, isChanged, disableAddRoles, systemGroupUuid } = useSelector(reducer);\n\n  const reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n  };\n\n  const fetchAddGroupRoles = (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {}));\n  const fetchGroupData = (customId) => dispatch(fetchGroup(customId ?? groupId));\n  const fetchSystGroup = () => dispatch(fetchSystemGroup());\n  const removeRoles = (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback));\n  const fetchGroupRoles = (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options));\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    if (groupId !== 'default-access') {\n      fetchGroupRoles(pagination)(groupId);\n    } else {\n      systemGroupUuid && fetchGroupRoles(pagination)(systemGroupUuid);\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    if (roles?.length > 0) {\n      if (groupId !== 'default-access') {\n        fetchAddGroupRoles(groupId);\n      } else {\n        systemGroupUuid && fetchAddGroupRoles(systemGroupUuid);\n      }\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = groupId !== 'default-access' ? groupId : systemGroupUuid;\n\n  const removeRolesCallback = () => {\n    if (isPlatformDefault) {\n      fetchSystGroup().then(({ value: { data } }) => {\n        fetchGroupRoles({ ...pagination, offset: 0 })(data[0].uuid);\n      });\n    } else {\n      fetchGroupRoles({ ...pagination, offset: 0 })(groupId);\n    }\n  };\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(fetchUuid, [role.uuid], removeRolesCallback));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Routes>\n      <Route\n        path={pathnames['group-add-roles'].path}\n        element={\n          <AddGroupRoles\n            afterSubmit={() => {\n              if (isPlatformDefault || isAdminDefault) {\n                fetchSystGroup().then(({ value: { data } }) => {\n                  fetchGroupRoles(pagination)(data[0].uuid);\n                  fetchGroupData(data[0].uuid);\n                });\n              } else {\n                fetchGroupRoles(pagination)(groupId);\n                fetchGroupData();\n              }\n            }}\n            fetchUuid={systemGroupUuid}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={pathnames['group-detail'].link.replace(':groupId', isPlatformDefault ? 'default-access' : groupId)}\n            addRolesToGroup={(groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback))}\n            groupName={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n          />\n        }\n      />\n    </Routes>\n  );\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <AppLink\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={pathnames['group-add-roles'].link.replace(':groupId', groupId)}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </AppLink>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => navigate(pathnames['group-add-roles'].link.replace(':groupId', groupId)),\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    removeRolesCallback\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id=\"tab-roles\">\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          rows={createRows(groupId, roles, selectedRoles)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchGroupRoles(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n      <Outlet />\n    </React.Fragment>\n  );\n};\n\nGroupRoles.propTypes = {\n  searchFilter: PropTypes.string,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  onDefaultGroupChanged: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default GroupRoles;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Route, useLocation, useParams, Routes } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport AppTabs from '../app-tabs/app-tabs';\nimport useAppNavigate from '../../hooks/useAppNavigate';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupMembers from './member/group-members';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport AppLink, { mergeToBasename } from '../../presentational-components/shared/AppLink';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport './group.scss';\n\nconst Group = ({ onDelete }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n  const location = useLocation();\n  const chrome = useChrome();\n  const { groupId } = useParams();\n  const isPlatformDefault = groupId === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: 'Roles', name: pathnames['group-detail-roles'].link.replace(':groupId', groupId), to: 'roles' },\n    { eventKey: 1, title: 'Members', name: pathnames['group-detail-members'].link.replace(':groupId', groupId), to: 'members' },\n  ];\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const { group, isFetching } = useSelector(\n    ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n      group: selectedGroup,\n      isFetching: isRecordLoading || isRecordRolesLoading,\n    }),\n    shallowEqual\n  );\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchSystemGroup());\n    const currId = !isPlatformDefault ? groupId : systemGroupUuid;\n    if (currId) {\n      dispatch(fetchGroup(currId));\n      chrome.appObjectId(currId);\n    }\n    return () => chrome.appObjectId(undefined);\n  }, [groupId, systemGroupUuid]);\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(mergeToBasename(pathnames.groups.link), pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <AppLink\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).link.replace(\n            ':groupId',\n            isPlatformDefault ? 'default-access' : groupId\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </AppLink>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <AppLink\n          onClick={() => onDelete(groupId)}\n          to={(location.pathname.includes('members')\n            ? pathnames['group-detail-members-remove']\n            : pathnames['group-detail-roles-remove']\n          ).link.replace(':groupId', groupId)}\n        >\n          {intl.formatMessage(messages.delete)}\n        </AppLink>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchId = isPlatformDefault ? systemGroupUuid : groupId;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            dispatch(removeGroups([systemGroupUuid])).then(() =>\n              dispatch(fetchSystemGroup()).then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            navigate(pathnames['group-detail-roles'].link).replace(':groupId', 'default-access');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Routes>\n            <Route path={pathnames['group-detail-roles'].path} element={<GroupRoles onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}>\n              <Route\n                path={pathnames['group-detail-roles-remove'].path}\n                element={\n                  <RemoveGroup\n                    postMethod={() => dispatch(fetchGroups({ ...pagination, offset: 0, filters, usesMetaInURL: true }))}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-roles'].link.replace(':groupId', groupId))}\n                    submitRoute={getBackRoute(mergeToBasename(pathnames.groups.link), { ...pagination, offset: 0 }, filters)}\n                    isModalOpen\n                    groupsUuid={[group]}\n                  />\n                }\n              />\n              <Route\n                path={pathnames['group-detail-roles-edit'].path}\n                element={\n                  <EditGroup\n                    group={group}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-roles'].link.replace(':groupId', groupId))}\n                    postMethod={() => dispatch(fetchGroup(fetchId))}\n                  />\n                }\n              />\n            </Route>\n            <Route path={pathnames['group-detail-members'].path} element={<GroupMembers />}>\n              <Route\n                path={pathnames['group-detail-members-remove'].path}\n                element={\n                  <RemoveGroup\n                    postMethod={() => dispatch(fetchGroups({ ...pagination, offset: 0, filters, usesMetaInURL: true }))}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-members'].link.replace(':groupId', groupId))}\n                    submitRoute={getBackRoute(mergeToBasename(pathnames.groups.link), { ...pagination, offset: 0 }, filters)}\n                    isModalOpen\n                    groupsUuid={[group]}\n                  />\n                }\n              />\n              <Route\n                path={pathnames['group-detail-members-edit'].path}\n                element={\n                  <EditGroup\n                    group={group}\n                    cancelRoute={mergeToBasename(pathnames['group-detail-members'].link.replace(':groupId', groupId))}\n                    postMethod={() => dispatch(fetchGroup(fetchId))}\n                  />\n                }\n              />\n            </Route>\n            <Route path=\"/*\" element={<GroupRoles onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />} />\n          </Routes>\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: groupId })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => navigate(-1)}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nGroup.propTypes = {\n  onDelete: PropTypes.func,\n};\n\nexport default Group;\n","import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { Route, Routes, useLocation, useNavigate } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport AppLink, { mergeToBasename } from '../../presentational-components/shared/AppLink';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Group from './group';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport PageActionRoute from '../common/page-action-route';\nimport {\n  applyPaginationToUrl,\n  defaultAdminSettings,\n  defaultSettings,\n  isPaginationPresentInUrl,\n  syncDefaultPaginationWithUrl,\n} from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute, removeQueryParams } from '../../helpers/shared/helpers';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, usesMetaInURL: true }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n  const textFilterRef = useRef(null);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  // using 'isAdmin' (0 or 1) determines correct index for columns due to 'isSelectable' property on Table component\n  const [sortByState, setSortByState] = useState({ index: Number(isAdmin), direction: 'asc' });\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index - Number(isAdmin)].key}`;\n\n  const { groups, pagination, filters, isLoading, systemGroup } = useSelector(\n    ({\n      groupReducer: {\n        groups: { data, filters, pagination },\n        isLoading,\n        adminGroup,\n        systemGroup,\n      },\n    }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(filters.name, 'i')) ? [systemGroup] : []),\n        ...(data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      pagination: {\n        limit: pagination?.limit ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n        offset: pagination?.offset ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n        count: pagination?.count,\n        redirected: pagination?.redirected,\n      },\n      filters: filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [filterValue, setFilterValue] = useState(filters?.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const { name } = syncDefaultFiltersWithUrl(location, navigate, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ limit, offset, orderBy, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    if (!location.pathname.includes('detail')) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      filterValue?.length > 0 &&\n        !areFiltersPresentInUrl(location, ['name']) &&\n        syncDefaultFiltersWithUrl(location, navigate, ['name'], { name: filterValue });\n    } else {\n      removeQueryParams(location, navigate);\n    }\n  }, [location.pathname]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  const routes = () => (\n    <Routes>\n      <Route\n        path={pathnames['add-group'].path}\n        element={\n          <AddGroupWizard\n            pagination={pagination}\n            filters={filters}\n            orderBy={orderBy}\n            postMethod={(config) => {\n              setFilterValue('');\n              fetchData(config);\n            }}\n          />\n        }\n      />\n      <Route\n        path={pathnames['edit-group'].path}\n        element={\n          <EditGroup\n            pagination={pagination}\n            filters={filters}\n            postMethod={(config) => {\n              setFilterValue('');\n              fetchData({ ...config, orderBy });\n            }}\n            cancelRoute={getBackRoute('../', pagination, filters)}\n            submitRoute={getBackRoute('../', { ...pagination, offset: 0 }, filters)}\n          />\n        }\n      />\n      <Route\n        path={pathnames['remove-group'].path}\n        element={\n          <RemoveGroup\n            pagination={pagination}\n            filters={filters}\n            postMethod={(ids, config) => {\n              fetchData({ ...config, orderBy });\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n            }}\n            cancelRoute={getBackRoute('../', pagination, filters)}\n            submitRoute={getBackRoute('../', { ...pagination, offset: 0 }, filters)}\n            isModalOpen\n            groupsUuid={removeGroupsList}\n          />\n        }\n      />\n    </Routes>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => navigate(mergeToBasename(pathnames['edit-group'].link).replace(':groupId', group.uuid)),\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              navigate(mergeToBasename(pathnames['remove-group'].link));\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <AppLink to={pathnames['add-group'].link} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </AppLink>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => navigate(mergeToBasename(pathnames['add-group'].link)),\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => navigate(mergeToBasename(pathnames['edit-group'].link.replace(':groupId', selectedRows[0].uuid))),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              navigate(mergeToBasename(pathnames['remove-group'].link));\n            },\n          },\n        ]\n      : []),\n  ];\n  const data = groups.map((group) =>\n    group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n  );\n  const rows = createRows(isAdmin, data, selectedRows);\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id=\"tab-groups\">\n          <TableToolbarView\n            data={groups}\n            rows={rows}\n            sortBy={sortByState}\n            onSort={(e, index, direction) => {\n              const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - Number(isAdmin)].key}`;\n              setSortByState({ index, direction });\n              applyFiltersToUrl(location, navigate, { name: filterValue });\n              fetchData({ ...pagination, orderBy, filters: { name: filterValue } });\n            }}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ name, count, limit, offset, orderBy }) => {\n              applyFiltersToUrl(location, navigate, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n            textFilterRef={textFilterRef}\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Routes>\n      <Route\n        path={pathnames['group-detail-role-detail'].path}\n        element={\n          <PageActionRoute pageAction=\"role-detail\">\n            <Role />\n          </PageActionRoute>\n        }\n      />\n      <Route\n        path={pathnames['group-detail'].path}\n        element={\n          <PageActionRoute pageAction=\"group-detail\">\n            <Group\n              defaultUuid={systemGroup?.uuid}\n              onDelete={(uuid) => {\n                setFilterValue('');\n                setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n              }}\n            />\n          </PageActionRoute>\n        }\n      />\n      <Route path=\"/*\" element={<PageActionRoute pageAction=\"group-list\">{renderGroupsList()}</PageActionRoute>} />\n    </Routes>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","PropTypes","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","useContext","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","propTypes","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","intl","useIntl","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","formatMessage","messages","number","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","length","fetchGroups","limit","offset","filters","nameMatch","console","response","data","some","item","debouncedAsyncValidator","asyncDebounce","value","ReviewTemplate","formFields","AddGroupWizardContext","getState","useEffect","values","then","Bullseye","Spinner","className","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","props","input","useFieldApi","description","useState","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","label","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","SetRoles","selectedRoles","setSelectedRoles","TextContent","Text","fieldId","rolesExcluded","SetUsers","selectedUsers","setSelectedUsers","Form","linkDescription","Card","displayNarrow","SummaryContent","Grid","GridItem","md","component","TextVariants","map","role","index","key","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","Object","keys","AddGroupWizard","postMethod","pagination","orderBy","dispatch","useDispatch","schema","useRef","fields","isDynamic","inModal","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","navigate","useAppNavigate","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","addNotification","dismissDelay","pathname","paths","search","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","current","subscription","componentMapper","onSubmit","user_list","user","username","roles_list","uuid","addGroup","initialValues","EditGroupModal","cancelRoute","submitRoute","group","onClose","selectedGroup","setSelectedGroup","useNavigate","groupId","useParams","fetchGroup","payload","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","updateGroup","ModalFormTemplate","ModalProps","defaultProps","pathnames","hash","RemoveGroupModal","groupsUuid","isModalOpen","useSelector","groupReducer","isLoading","loaded","shallowEqual","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","removeGroups","b","count","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","classNames","AppTabs","tabItems","isHeader","useLocation","activeTab","find","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","to","Tab","AddGroupMembers","closeUrl","ouiaId","userList","addMembersToGroup","fetchMembersForGroup","usesMetaInURL","selector","members","meta","admin_default","platform_default","removeModalText","plural","filterValue","setFilterValue","selectedMembers","setSelectedMembers","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","PermissionsContext","userAccessAdministrator","orgAdmin","hasPermissions","columns","transforms","nowrap","fetchData","usernames","options","removeMembers","userNames","removeMembersFromGroup","rows","checkedRows","reduce","acc","isActive","is_active","email","firstName","first_name","lastName","last_name","cells","Label","selected","row","createRows","RemoveModal","confirmButtonLabel","Section","CardBody","isSelectable","routes","Routes","Route","path","element","actionResolver","_rowId","member","filterPlaceholder","toLowerCase","titlePlural","titleSingular","rowWrapper","UsersRow","setCheckedItems","newSelection","toolbarButtons","AppLink","multipleMembersSelected","removeText","emptyProps","tableId","Outlet","RemoveRoles","isDefault","isChanged","showConfirmModal","setShowConfirmModal","display_name","modified","replace","DateFormat","date","getDateFormat","Boolean","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","reducer","systemGroup","roles","defaultSettings","isPlatformDefault","isAdminDefault","system","disableAddRoles","addRoles","systemGroupUuid","GroupRoles","onDefaultGroupChanged","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","reloadWrapper","event","callback","fetchAddGroupRoles","fetchAddRolesForGroup","fetchGroupData","customId","fetchSystGroup","fetchSystemGroup","removeRoles","removeRolesFromGroup","fetchGroupRoles","config","fetchRolesForGroup","fetchUuid","removeRolesCallback","emptyFilters","multipleRolesSelected","afterSubmit","addRolesToGroup","searchFilter","defaultCompactSettings","Group","onDelete","location","chrome","useChrome","groupExists","BAD_UUID","isRecordLoading","isRecordRolesLoading","isFetching","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","currId","appObjectId","breadcrumbsList","getBackRoute","mergeToBasename","dropdownItems","DropdownItem","link","fetchId","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","isAdmin","textFilterRef","sortable","Number","direction","sortByState","setSortByState","adminGroup","match","RegExp","filter","defaultAdminSettings","redirected","selectedRows","setSelectedRows","removeGroupsList","setRemoveGroupsList","applyPaginationToUrl","syncDefaultPaginationWithUrl","syncDefaultFiltersWithUrl","insights","appNavClick","secondaryNav","fetchAdminGroup","removeQueryParams","isPaginationPresentInUrl","areFiltersPresentInUrl","principalCount","roleCount","state","pageAction","defaultUuid","paddingBottom","sortBy","onSort","e","applyFiltersToUrl","ids","GroupRowWrapper"],"sourceRoot":""}