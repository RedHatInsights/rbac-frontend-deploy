{"version":3,"file":"js/6171.d1e0922e8ecca4c08ab9.js","mappings":";yLAEO,MAAMA,EAAmC,CAC9CC,KAAM,6BACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,gvBACTC,QAAS,EACTC,QAAS,GAGEC,GAA6B,QAAWP,GAErD,4HCWYQ,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,KAAgBA,IAAAA,SACnDA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WACNA,IAAAA,KACKA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WAGZ,IAAMC,EAAoB,SAAC,GAA2F,IAAzFC,EAAyF,EAAzFA,iBAAkBC,EAAuE,EAAvEA,YAAaC,EAA0D,EAA1DA,WAA0D,IAA9CC,aAAgBC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,KAAQC,EAAc,EAAdA,QAChGC,GAAcC,EAAAA,EAAAA,WACpB,GAAuCC,EAAAA,EAAAA,YAAWH,GAA1CI,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,WACxB,OAAIF,QAA4B,IAAVC,GAAyBA,GAASC,EAC/C,KAIP,kBAAC,EAAAC,SAAD,KACGb,IACD,kBAAC,EAAAc,OAAD,CAAQC,KAAK,SAASC,QAAQ,YAAYC,WAAYhB,EAAaiB,QAAShB,GACzEG,GAEH,kBAAC,EAAAS,OAAD,CAAQC,KAAK,SAASC,QAAQ,OAAOE,QAASX,EAAYY,UACvDf,KAMTL,EAAkBqB,UAAY,CAC5BnB,YAAaH,IAAAA,KACbI,WAAYJ,IAAAA,KAAAA,WACZuB,WAAYvB,IAAAA,KAAAA,WACZwB,SAAUxB,IAAAA,UAAoB,CAC5BA,IAAAA,OACAA,IAAAA,MAAgB,CACdyB,KAAMzB,IAAAA,OAAAA,WACN0B,WAAY1B,IAAAA,OAAAA,aAEdA,IAAAA,OAEFK,aAAcL,IAAAA,MAAgB,CAC5B2B,OAAQ3B,IAAAA,KAAAA,WACRM,OAAQN,IAAAA,KAAAA,WACRO,KAAMP,IAAAA,KAAAA,WACN4B,KAAM5B,IAAAA,KAAAA,aACL6B,WACHrB,QAASR,IAAAA,OAAAA,WACTE,iBAAkBF,IAAAA,MAGpB,+ICnEM8B,EAAc,SAAC,GAA6B,IAA3BtB,EAA2B,EAA3BA,QAASuB,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC/BC,GAAOC,EAAAA,EAAAA,KACLC,GAAexB,EAAAA,EAAAA,YAAWyB,EAAAA,SAA1BD,WACAE,GAAmB1B,EAAAA,EAAAA,YAAWH,GAA9B6B,eACR,OACE,kBAAC,EAAAC,WAAD,CAAYpB,QAASqB,EAAAA,kBAAAA,OACnB,kBAAC,EAAAC,eAAD,CAAgBC,MAAM,MAAMC,KAAMC,EAAAA,KAClC,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3Bf,GAEH,kBAAC,EAAAgB,eAAD,KAAiBf,GACjB,kBAAC,EAAAhB,OAAD,CACEI,QAAS,WACPiB,OAAeW,GACfb,EAAW,IAEbjB,QAAQ,WAEPe,EAAKgB,cAAcC,EAAAA,EAAAA,mBAA6B,CAAEC,OAAQ,OAMnErB,EAAYR,UAAY,CACtBd,QAASR,IAAAA,OAAAA,WACT+B,MAAO/B,IAAAA,OAAAA,WACPgC,KAAMhC,IAAAA,OAAAA,YAGR,uZCrCA,oiGAAAoD,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAMO,IAAMC,EAAc,mCAAG,WAAOC,EAAWC,EAAOC,GAAzB,kFACtBC,GAAQC,EAAAA,EAAAA,MACRzB,GAAO0B,EAAAA,EAAAA,GAAW,CAAEC,OAAAA,EAAAA,OAAQV,SAAUW,GAAoBJ,GAC3DH,EAHuB,8CAInBN,GAJmB,YAOxBM,EAAUQ,OAAS,KAPK,sBAQpB7B,EAAKgB,cAAcC,EAAAA,EAAAA,qBAA+B,CAAEC,OAAQ,MARxC,wBAWLY,EAAAA,EAAAA,IAAY,CAAEC,MAAO,GAAIC,OAAQ,EAAGC,QAAS,CAAEzE,KAAM6D,GAAaa,UAAW,UAA7E,OAA8F,SAACtD,GACpHuD,QAAQvD,MAAMA,MAZY,UAWtBwD,EAXsB,SAgBxBb,EAAKa,MAAAA,GAAH,UAAGA,EAAUC,YAAb,aAAG,EAAgBC,MAAK,SAACC,GAAD,OAAUA,EAAKjB,KAAWC,MAAMa,MAAAA,GAAA,UAAAA,EAAUC,YAAV,eAAgBR,QAAS,GAhB3D,uBAiBpB7B,EAAKgB,cAAcC,EAAAA,EAAAA,kBAjBC,sCAoBrBF,GApBqB,4CAAH,0DAuBdyB,GAA0BC,EAAAA,EAAAA,IAAc,SAACC,EAAOpB,EAAOC,GAAf,OAAsBH,EAAesB,EAAOpB,EAAOC,slBCpBxG,IAAMoB,EAAiB,SAAC,GAAmB,MAAjBC,EAAiB,EAAjBA,WAClB5C,GAAOC,EAAAA,EAAAA,KACb,GAA8CvB,EAAAA,EAAAA,YAAWmE,IAAjDhE,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,MAAOwB,EAA3B,EAA2BA,eACnB0C,GAAarE,EAAAA,EAAAA,WAAbqE,SAQR,OAPAC,EAAAA,EAAAA,YAAU,WACR3C,OAAeW,GACfK,EAAe0B,IAAWE,OAAO,eAC9BC,MAAK,kBAAM7C,GAAe,MAD7B,OAES,kBAAMA,GAAe,QAC7B,SAEkB,IAAVxB,GAAyBC,EAEhC,kBAAC,EAAAqE,SAAD,KACE,kBAAC,EAAAC,QAAD,CAAStC,KAAK,SAKN,IAAVjC,EAEA,kBAAC,IAAD,CACEL,QAASsE,GACT/C,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,qBAC1BlB,KAAMC,EAAKgB,cAAcC,EAAAA,EAAAA,sBAM7B,kBAAC,aAAD,KACE,kBAAC,EAAAN,MAAD,CAAOC,aAAa,KAAKC,KAAK,KAAKuC,UAAU,cAC1CpD,EAAKgB,cAAcC,EAAAA,EAAAA,gBAErB,CAAC,CAAC,EAAD,GAAM2B,MAAAA,GAAN,UAAMA,EAAa,UAAnB,aAAM,EAAkB,QAKhCD,EAAetD,UAAY,CACzBuD,WAAY7E,IAAAA,OAGd,gFCzCMsF,EAAqB,SAAChC,EAAWiC,GAAZ,YAA8CvC,IAAdM,GAA2BiC,EAAiB,QAAU,WAC3GC,EAA4B,SAACC,GAAD,OAAuBA,MAAAA,OAAA,EAAAA,EAAkB3B,QAAS,IAAM,QAAU,WAE9F4B,EAAU,SAACC,GACf,IAAM1D,GAAOC,EAAAA,EAAAA,KACL0D,GAAUC,EAAAA,EAAAA,GAAYF,GAAtBC,MACFnF,GAAcC,EAAAA,EAAAA,WACpB,EAAiED,EAAYsE,WAAWE,OAAlExF,EAAtB,EAAQ,cAAyCqG,EAAjD,EAA4B,qBAC5B,GAAkCC,EAAAA,EAAAA,UAAStG,GAAQ,IAAnD,eAAO6D,EAAP,KAAkB0C,EAAlB,KACA,GAA4CD,EAAAA,EAAAA,YAA5C,eAAOR,EAAP,KAAuBU,EAAvB,KACA,GAAgDF,EAAAA,EAAAA,UAASD,GAAzD,eAAOL,EAAP,KAAyBS,EAAzB,KAEMC,EAAmB,SAACxB,GACxBiB,EAAMQ,cAASpD,GACfyB,EAAwBE,GACrBO,MAAK,WACJU,EAAMQ,SAASzB,GACfsB,OAAkBjD,MAHtB,OAKS,SAACnC,GACNoF,EAAkBpF,MAEtBmF,EAAarB,IAOf,OAJAK,EAAAA,EAAAA,YAAU,YACR1B,MAAAA,OAAA,EAAAA,EAAWQ,QAAS,GAAKqC,EAAiB7C,KACzC,IAGD,kBAAC,EAAA+C,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAWlB,UAAU,8BACnB,kBAACmB,EAAA,EAAD,CACEC,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,WAC1BwD,kBAAmBpD,EAAYiC,EAAiBtD,EAAKgB,cAAcC,EAAAA,EAAAA,UACnErB,YAAU,EACV8E,UAAWrB,EAAmBhC,EAAWiC,IAEzC,kBAACqB,EAAA,GAAD,CACEjC,MAAOrB,EACPrC,KAAK,OACL0F,UAAWrB,EAAmBhC,EAAWiC,GACzCsB,OAAQ,iBAAoB,KAAdvD,GAAoB0C,OAAahD,IAC/CoD,SAAU,SAACzB,GAAD,OAAWwB,EAAiBxB,IACtC,aAAW,iBAIjB,kBAAC,EAAA4B,UAAD,KACE,kBAACC,EAAA,EAAD,CACEC,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,kBAC1BwD,kBAAmBzE,EAAKgB,cAAcC,EAAAA,EAAAA,qBAA+B,CAAEC,OAAQ,MAC/EwD,UAAWnB,EAA0BC,IAErC,kBAACqB,EAAA,GAAD,CACEnC,MAAOc,EACPkB,UAAWnB,EAA0BC,GACrCW,SAAU,SAACzB,GACTuB,EAAoBvB,GACpBlE,EAAYsG,OAAO,oBAAqBpC,IAE1C,aAAW,oBACXqC,kBAAkB,iBAQ9BtB,EAAQpE,UAAY,CAClB7B,KAAMO,IAAAA,OACN8F,YAAa9F,IAAAA,OACbiH,OAAQjH,IAAAA,OAGV,yBC9EMkH,EAAW,SAACvB,GAChB,IAAM1D,GAAOC,EAAAA,EAAAA,KACb,GAA0C6D,EAAAA,EAAAA,UAAS,IAAnD,eAAOoB,EAAP,KAAsBC,EAAtB,KACQxB,GAAUC,EAAAA,EAAAA,GAAYF,GAAtBC,MACFnF,GAAcC,EAAAA,EAAAA,WAWpB,OATAsE,EAAAA,EAAAA,YAAU,WACRoC,EAAiB3G,EAAYsE,WAAWE,OAAO,eAAiB,MAC/D,KAEHD,EAAAA,EAAAA,YAAU,WACRY,EAAMQ,SAASe,GACf1G,EAAYsG,OAAO,aAAcI,KAChC,CAACA,IAGF,kBAAC,EAAApG,SAAD,KACE,kBAAC,EAAAsF,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAc,YAAD,KACE,kBAAC,EAAAC,KAAD,KAAOrF,EAAKgB,cAAcC,EAAAA,EAAAA,4BAG9B,kBAAC,EAAAqD,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWe,QAAQ,eACjB,kBAAC,IAAD,CAAWJ,cAAeA,EAAeC,iBAAkBA,EAAkBI,eAAe,SAQxGN,EAAS5F,UAAY,CACnB6F,cAAenH,IAAAA,MACfoH,iBAAkBpH,IAAAA,KAClB+B,MAAO/B,IAAAA,OACP8F,YAAa9F,IAAAA,QAGf,uCCvCMyH,GAAW,SAAC9B,GAChB,OAA0CI,EAAAA,EAAAA,UAAS,IAAnD,eAAO2B,EAAP,KAAsBC,EAAtB,KACQ/B,GAAUC,EAAAA,EAAAA,GAAYF,GAAtBC,MACF3D,GAAOC,EAAAA,EAAAA,KACPzB,GAAcC,EAAAA,EAAAA,WAWpB,OATAsE,EAAAA,EAAAA,YAAU,WACR2C,EAAiBlH,EAAYsE,WAAWE,OAAO,eAAiB,MAC/D,KAEHD,EAAAA,EAAAA,YAAU,WACRY,EAAMQ,SAASsB,GACfjH,EAAYsG,OAAO,aAAcW,KAChC,CAACA,IAGF,kBAAC,EAAA3G,SAAD,KACE,kBAAC,EAAA6G,KAAD,KACE,kBAAC,EAAAvB,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAc,YAAD,KACE,kBAAC,KAAD,CAAYQ,gBAAiB5F,EAAKgB,cAAcC,EAAAA,EAAAA,uBAGpD,kBAAC,EAAAqD,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWe,QAAQ,eACjB,kBAAC,EAAAO,KAAD,KACE,kBAAC,KAAD,CAAWJ,cAAeA,EAAeC,iBAAkBA,EAAkBI,SAAO,WAUpGN,GAASnG,UAAY,CACnBoG,cAAe1H,IAAAA,MACf2H,iBAAkB3H,IAAAA,KAClB+B,MAAO/B,IAAAA,OACP8F,YAAa9F,IAAAA,QAGf,YChDA,IAAMgI,GAAiB,WACrB,IAAM/F,GAAOC,EAAAA,EAAAA,KAEb,GADoBxB,EAAAA,EAAAA,WAMJqE,WAAWE,OAJXxF,EADhB,EACE,cACqBqG,EAFvB,EAEE,qBACc4B,EAHhB,EAGE,cACcP,EAJhB,EAIE,cAGF,OACE,yBAAK9B,UAAU,QACb,kBAAC,EAAAgB,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAF,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAWlB,UAAU,8BACnB,kBAAC,EAAA4C,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GAAiBhD,UAAU,kBACzCpD,EAAKgB,cAAcC,EAAAA,EAAAA,aAGxB,kBAAC,EAAAgF,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GAAiB5I,KAGtC,kBAAC,EAAAwI,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GAAiBhD,UAAU,kBACzCpD,EAAKgB,cAAcC,EAAAA,EAAAA,oBAGxB,kBAAC,EAAAgF,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GAAiBvC,KAGtC,kBAAC,EAAAmC,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GAAiBhD,UAAU,kBACzCpD,EAAKgB,cAAcC,EAAAA,EAAAA,SAGxB,kBAAC,EAAAgF,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GACdlB,EAAcmB,KAAI,SAACC,EAAMC,GAAP,OACjB,kBAAC,EAAAlB,KAAD,CAAMjC,UAAU,YAAYoD,IAAKD,GAC9BD,EAAK9B,aAMhB,kBAAC,EAAAwB,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GAAiBhD,UAAU,kBACzCpD,EAAKgB,cAAcC,EAAAA,EAAAA,WAGxB,kBAAC,EAAAgF,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAb,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,GACdX,EAAcY,KAAI,SAACC,EAAMC,GAAP,OACjB,kBAAC,EAAAlB,KAAD,CAAMjC,UAAU,YAAYoD,IAAKD,GAC9BD,EAAK9B,mBAc9BuB,GAAe1G,UAAY,CACzB7B,KAAMO,IAAAA,OACN8F,YAAa9F,IAAAA,OACbiH,OAAQjH,IAAAA,OAGV,+nBCrEO,IAAM8E,IAAwB4D,EAAAA,EAAAA,eAAc,CACjD9H,SAAS,EACTE,YAAY,EACZD,WAAOmC,IAGH2F,GAAe,SAAChD,GAAD,OAAW,kBAAC,MAAD,UAAqBA,EAArB,CAA4BiD,kBAAkB,MAExEC,GAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAYC,GAAf,oBAA0B,kBAACD,EAAYC,IAC3DF,GAAYvH,UAAY,CACtBwH,QAAS9I,IAAAA,YAAAA,YAGJ,IAAMgJ,GAAkB,CAC7BlD,YAAa+C,GACb,WAAYnD,EACZ,YAAawB,GACb,YAAaO,GACb,kBAAmBO,IAGR3G,GAAW,SAAC4H,EAAeC,EAAkBC,GAAlC,OAAmD,SAACC,GAC1ED,EAAaC,GACTC,OAAOC,KAAKF,GAAUtF,OAAS,EACjCoF,GAAiB,GAEjBD,MAIEM,GAAiB,SAAC,GAAiD,IAA/CC,EAA+C,EAA/CA,WAAYC,EAAmC,EAAnCA,WAAYvF,EAAuB,EAAvBA,QAASwF,EAAc,EAAdA,QACnDC,GAAWC,EAAAA,EAAAA,eACX3H,GAAOC,EAAAA,EAAAA,KACP2H,GAASC,EAAAA,EAAAA,QC1CY,WAC3B,IAAMrG,GAAQC,EAAAA,EAAAA,MACRzB,GAAO0B,EAAAA,EAAAA,GAAW,CAAEC,OAAAA,EAAAA,OAAQV,SAAUW,GAAoBJ,GAChE,MAAO,CACLsG,OAAQ,CACN,CACE3B,UAAW,SACX3I,KAAM,SACNuK,WAAW,EACXjC,SAAS,EACTkC,YAAY,EACZlI,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,aAC1B6G,OAAQ,CACN,CACEtK,KAAM,uBACN+B,SAAU,YACVO,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,oBAC1B6G,OAAQ,CACN,CACE3B,UAAW,WACX3I,KAAM,aACNyK,SAAU,CACR,CACEjJ,KAAMkJ,EAAAA,EAAAA,YAIZ,CACE/B,UAAWgC,EAAAA,EAAAA,SACX3K,KAAM,oBACN4K,WAAW,EACXH,SAAU,CACR,CACEjJ,KAAMkJ,EAAAA,EAAAA,WACNG,UAAW,SAMrB,CACE7K,KAAM,YACN+B,SAAU,YACVO,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,UAC1B6G,OAAQ,CACN,CACE3B,UAAW,YACX3I,KAAM,gBAIZ,CACEA,KAAM,YACN+B,SAAU,SACVO,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,YAC1B6G,OAAQ,CACN,CACE3B,UAAW,YACX3I,KAAM,gBAIZ,CACEA,KAAM,SACNsC,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,eAE1BqH,QAAS,SAAC5E,GAAD,OAAW,kBAAC,KAAD,UAAuBA,EAAvB,CAA8BnF,QAASsE,OAC3D0F,aAAc5F,EACdmF,OAAQ,CACN,CACE3B,UAAW,kBACX3I,KAAM,yBD7BEgL,IACdC,GAASC,EAAAA,EAAAA,cAATD,KACR,GAAwD3E,EAAAA,EAAAA,WAAS,GAAjE,eAAO6E,EAAP,KAA6BC,EAA7B,KACA,GAAkC9E,EAAAA,EAAAA,UAAS,IAA3C,eAAO+E,EAAP,KAAkB3B,EAAlB,KACA,GAAoDpD,EAAAA,EAAAA,UAAS,CAC3DnF,SAAS,EACTE,YAAY,EACZD,WAAOmC,EACP+H,UAAU,IAJZ,eAAOC,EAAP,KAA2BC,EAA3B,KAOMC,EAAmB,WACvBvB,GACEwB,EAAAA,EAAAA,iBAAgB,CACdjK,QAAS,UACTa,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,kBAC1BkI,aAAc,IACdtF,YAAa7D,EAAKgB,cAAcC,EAAAA,EAAAA,mCAGpCwH,EAAK,CACHW,SAAUC,GAAAA,EAAAA,OAAAA,KACVC,QAAQC,EAAAA,GAAAA,IAAkB,IAAEC,KAAM,EAAGC,SAAUjC,EAAWzF,OAAUE,OAiCxE,OAAO0G,EACL,kBAAC,IAAD,CACE3J,KAAK,QACL0K,OAAQf,EACRgB,cAAe,kBAAMf,GAAwB,IAC7CgB,gBAAiBX,IAGnB,kBAACpG,GAAsBgH,SAAvB,CAAgCnH,MAAK,SAAOqG,GAAP,IAA2B3I,eArC3C,SAACxB,GAAD,OAAWoK,GAAsB,SAACc,GAAD,UAAC,MAAeA,GAAhB,IAAsBlL,MAAAA,QAqCImL,iBApCzD,SAACpL,GAAD,OAAaqK,GAAsB,SAACc,GAAD,UAAC,MAAeA,GAAhB,IAAsBnL,QAAAA,QAoCkBqL,YAnChF,SAAClB,GAAD,OAAcE,GAAsB,SAACc,GAAD,UAAC,MAAeA,GAAhB,IAAsBhB,SAAAA,WAoC1E,kBAAC,IAAD,CACElB,OAAQA,EAAOqC,QACfC,aAAc,CAAElH,QAAQ,GACxB0D,aAAcA,GACdyD,gBAAe,SAAOA,EAAAA,IAAoBpD,IAC1CqD,SAvCW,SAACjD,GAChB,IAAM0B,EAAY,CAChBrL,KAAM2J,EAAS,cACftD,YAAasD,EAAS,qBACtBkD,UAAWlD,EAAS,cAAcd,KAAI,SAACiE,GAAD,MAAW,CAAEC,SAAUD,EAAK9F,UAClEgG,WAAYrD,EAAS,cAAcd,KAAI,SAACC,GAAD,OAAUA,EAAKmE,SAExDhC,EAAK,CACHW,SAAUC,GAAAA,EAAAA,OAAAA,KACVC,QAAQC,EAAAA,GAAAA,IAAkB,CAAEC,KAAM,EAAGC,SAAUjC,EAAWzF,UAE5D2F,GAASgD,EAAAA,EAAAA,IAAS7B,IACf5F,MAAK,kBAAMsE,EAAW,CAAExF,MAAOyF,EAAWzF,MAAOC,OAAQ,EAAGyF,QAAAA,EAASxF,QAAS,QAC9EgB,MAAK,WACJyE,GACEwB,EAAAA,EAAAA,iBAAgB,CACdjK,QAAS,UACTa,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,sBAC1BkI,aAAc,IACdtF,YAAa7D,EAAKgB,cAAcC,EAAAA,EAAAA,mCAqBpC0J,cAAe9B,EACfzJ,SAAUA,GAAS6J,EAAkBL,EAAyB1B,OAMtEI,GAAejI,UAAY,CACzBkI,WAAYxJ,IAAAA,KACZyJ,WAAYzJ,IAAAA,MAAgB,CAC1BgE,MAAOhE,IAAAA,OAAAA,aACN6B,WACHqC,QAASlE,IAAAA,OAAAA,WACT0J,QAAS1J,IAAAA,QAGX,inBE1HA,IAAM6M,GAAiB,SAAC,GAAgG,IAA9FrD,EAA8F,EAA9FA,WAAYC,EAAkF,EAAlFA,WAAYvF,EAAsE,EAAtEA,QAAS4I,EAA6D,EAA7DA,YAA6D,IAAhDC,YAAAA,OAAgD,MAAlCD,EAAkC,EAArBE,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAClGhL,GAAOC,EAAAA,EAAAA,KACb,GAA0C6D,EAAAA,EAAAA,eAAS/C,GAAnD,eAAOkK,EAAP,KAAsBC,EAAtB,KAEQzC,GAASC,EAAAA,EAAAA,cAATD,KACF0C,GAAQC,EAAAA,EAAAA,eAAc,oBAEtBlE,EAAe,SAAC2B,GACpBqC,EAAiBrC,IAUbnB,GAAWC,EAAAA,EAAAA,gBAEjB5E,EAAAA,EAAAA,YAAU,WARRoI,IACEE,EAAAA,EAAAA,IAAWF,EAAMG,OAAO/J,IACrBgK,QAAQtI,MAAK,SAACZ,GAAD,OAAU6E,EAAa7E,MADvC,OAES,kBAAM6E,OAAanG,QAO7B,KAEHgC,EAAAA,EAAAA,YAAU,WACRmI,EAAiBH,KAChB,CAACA,IAEJ,IAaM3L,EAAW,WACfsI,GACEwB,EAAAA,EAAAA,iBAAgB,CACdjK,QAAS,UACTkK,aAAc,IACdrJ,MAAOE,EAAKgB,cAAciK,EAAgBhK,EAAAA,EAAAA,kBAA6BA,EAAAA,EAAAA,kBACvE4C,YAAa7D,EAAKgB,cAAciK,EAAgBhK,EAAAA,EAAAA,6BAAwCA,EAAAA,EAAAA,mCAG5F+J,IACAvC,EAAKoC,IAGDjD,EAAS,CACbE,OAAQ,CAAC,OAELtK,KAAM,OACNgH,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,MAC1BkF,UAAW8E,EAAgB9C,EAAAA,EAAAA,WAA4B,YACnD8C,EAAgB,CAAEO,iBAAiB,GAAS,IAL5C,IAMJvD,SAAU,CACR,CAAEjJ,KAAM,sBAAuBuC,GAAI4J,EAAQA,EAAMG,OAAO/J,GAAKwJ,EAAMN,KAAMnJ,MAAO,QAChF,CACEtC,KAAMkJ,EAAAA,EAAAA,aAIZ,CACE1K,KAAM,cACNgH,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,aAC1BkF,UAAW8E,EAAgB9C,EAAAA,EAAAA,SAA0B,WACrDF,SAAU,CACR,CACEjJ,KAAMkJ,EAAAA,EAAAA,WACNG,UAAW,SAOfoD,EAAkB,CACtB,sBACE,gBAAGnK,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACA,SAACmB,GAAD,OACEF,EAAwBE,EAAOpB,EAAOC,MAG5C,OACE,kBAAC,KAAD,CACEqG,OAAQA,EACRuC,gBAAe,SACVA,EAAAA,IADU,IAEbuB,SAAUC,EAAAA,WAEZvM,SAAUA,EACVgL,SArEa,SAAC/H,GAChB,IAAMuJ,EAAY,CAChBnB,KAAMpI,EAAKoI,KACX5G,YAAaxB,EAAKwB,aAAe,KACjCrG,KAAM6E,EAAK7E,MAEb+J,EACIG,GAASmE,EAAAA,EAAAA,IAAYD,IAClB3I,MAAK,kBAAMsE,EAAW,CAAExF,MAAOyF,MAAAA,OAAF,EAAEA,EAAYzF,MAAOE,QAAAA,OAClDgB,KAAKwF,EAAKqC,IACbpD,GAASmE,EAAAA,EAAAA,IAAYD,IAAY3I,MAAK,kBAAMwF,EAAKqC,OA4DnDW,gBAAiBA,EACjBd,cAAa,MAAOM,GACpBvE,aAAc,SAAChD,GAAD,OACZ,kBAACoI,GAAA,GAAD,UACMpI,EADN,CAEEqI,WAAY,CAAEf,QAAS5L,EAAUsK,QAAQ,EAAMzK,QAAS,SAAUa,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,uBAOtG2J,GAAeoB,aAAe,CAC5BnB,YAAaoB,GAAAA,EAAAA,OAAAA,KACbjB,QAAS,kBAAM,OAGjBJ,GAAevL,UAAY,CACzBkI,WAAYxJ,IAAAA,KACZyJ,WAAYzJ,IAAAA,MAAgB,CAC1BgE,MAAOhE,IAAAA,OAAAA,aACN6B,WACHqC,QAASlE,IAAAA,OAAAA,WACT8M,YAAa9M,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdqL,SAAUrL,IAAAA,OAAAA,WACVuL,OAAQvL,IAAAA,OACRmO,KAAMnO,IAAAA,WAGV+M,YAAa/M,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdqL,SAAUrL,IAAAA,OAAAA,WACVuL,OAAQvL,IAAAA,OACRmO,KAAMnO,IAAAA,WAGVgN,MAAOhN,IAAAA,OACPiN,QAASjN,IAAAA,MAGX,oDCjJMoO,GAAmB,SAAC,GAAyG,IAAvGC,EAAuG,EAAvGA,WAAYC,EAA2F,EAA3FA,YAAa9E,EAA8E,EAA9EA,WAAYC,EAAkE,EAAlEA,WAAYvF,EAAsD,EAAtDA,QAAS4I,EAA6C,EAA7CA,YAA6C,IAAhCC,YAAAA,OAAgC,MAAlBD,EAAkB,EAC3H7K,GAAOC,EAAAA,EAAAA,KACb,GAA6BqM,EAAAA,EAAAA,cAC3B,gBAAmBrB,EAAnB,EAAGsB,aAAgBtB,cAAnB,MAA0C,CACxCF,MAAOE,EACPuB,WAAYvB,EAAcwB,UAE5BC,EAAAA,cALM3B,EAAR,EAAQA,MAAOyB,EAAf,EAAeA,UAOT9E,GAAWC,EAAAA,EAAAA,gBACjB5E,EAAAA,EAAAA,YAAU,WACkB,IAAtBqJ,EAAWvK,QACb6F,GAAS2D,EAAAA,EAAAA,IAAWe,EAAW,GAAG3B,SAEnC,IAEH,IAAQhC,GAASC,EAAAA,EAAAA,cAATD,KAER,GAA8B3E,EAAAA,EAAAA,WAAS,GAAvC,eAAO6I,EAAP,KAAgBC,EAAhB,KAEMC,EAAiBT,EAAWvK,OAAS,EASrCzC,EAAW,kBAAMqJ,EAAKoC,IAE5B,OACE,kBAAC,EAAAiC,MAAD,CACE1J,UAAU,OACVsG,OAAQ2C,EACRpN,QAAS8N,EAAAA,aAAAA,MACTjN,MACE,kBAAC,EAAAuF,KAAD,KACE,kBAAC,MAAD,CAAyBjC,UAAU,8BADrC,KAEUpD,EAAKgB,cAAc6L,EAAiB5L,EAAAA,EAAAA,qBAAgCA,EAAAA,EAAAA,sBAGhF+J,QAAS5L,EACT4N,QAAS,CACP,kBAAC,EAAAjO,OAAD,CAAQyH,IAAI,SAAStH,YAAayN,EAAS1N,QAAQ,SAASD,KAAK,SAASG,QAtB/D,WACf,IAAM8N,EAAQb,EAAW/F,KAAI,SAAC0E,GAAD,OAAWA,EAAMN,QAC9C/C,GAASwF,EAAAA,EAAAA,IAAaD,IACnBhK,MAAK,kBAAMsE,EAAW0F,EAAO,CAAElL,MAAOyF,MAAAA,OAAF,EAAEA,EAAYzF,MAAOE,QAAAA,OACzDgB,KAAKwF,EAAKqC,MAmBN9K,EAAKgB,cAAc6L,EAAiB5L,EAAAA,EAAAA,aAAwBA,EAAAA,EAAAA,cAE/D,kBAAC,EAAAlC,OAAD,CAAQyH,IAAI,SAASvH,QAAQ,OAAOD,KAAK,SAASG,QAASC,GACxDY,EAAKgB,cAAcC,EAAAA,EAAAA,WAIxB,kBAAC,EAAAmE,YAAD,KACGyH,EACC,kBAAC,EAAAxH,KAAD,KACE,kBAAC,MAAD,UACMpE,EAAAA,EAAAA,2BADN,CAEE+B,OAAQ,CACNmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,IACjBqN,MAAOhB,EAAWvK,YAItB2K,EACF,kBAAC,MAAD,MAEA,kBAAC,EAAAnH,KAAD,KACE,kBAAC,MAAD,UACMpE,EAAAA,EAAAA,0BADN,CAEE+B,OAAQ,CACNmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,IACjBvC,KAAMuN,EAAMvN,WAvCxB,IA8CE,kBAAC,EAAA6P,SAAD,CACEC,UAAWX,EACXxI,SAAU,kBAAMyI,GAAYD,IAC5BnI,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,8BAC1BM,GAAG,yBAMX4K,GAAiBH,aAAe,CAC9BI,WAAY,GACZC,aAAa,EACbkB,UAAWtB,GAAAA,EAAAA,OAAAA,MAGbE,GAAiB9M,UAAY,CAC3B+M,WAAYrO,IAAAA,MAAAA,WACZsO,YAAatO,IAAAA,KACbwJ,WAAYxJ,IAAAA,KACZyJ,WAAYzJ,IAAAA,MAAgB,CAC1BgE,MAAOhE,IAAAA,OAAAA,aACN6B,WACHqC,QAASlE,IAAAA,OAAAA,WACT8M,YAAa9M,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdqL,SAAUrL,IAAAA,OAAAA,WACVuL,OAAQvL,IAAAA,OACRmO,KAAMnO,IAAAA,WAGV+M,YAAa/M,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdqL,SAAUrL,IAAAA,OAAAA,WACVuL,OAAQvL,IAAAA,OACRmO,KAAMnO,IAAAA,YAKZ,2EC1HMyP,GAAyB,SAAC,GAA8B,IAA5BjM,EAA4B,EAA5BA,GAAIkJ,EAAwB,EAAxBA,KAAMgD,EAAkB,EAAlBA,YAC1C,GAA8C3J,EAAAA,EAAAA,WAAS,GAAvD,eAAO4J,EAAP,KAAyBC,EAAzB,KACMC,GAAiB/F,EAAAA,EAAAA,QAAO,MAE9B,OACE,0BAAMgG,IAAKD,EAAgBpH,IAAG,UAAKiE,EAAL,YAAqBlJ,GAAIA,GACrD,kBAAC,EAAAuM,QAAD,CACEC,OAAO,MACPC,SAAS,QACTC,UAAWP,EACXQ,YAAa,kBAAMP,GAAkB,IACrCQ,oBAAkB,EAClBV,YAAaA,EACbW,SAAUR,EAAe3D,SAEzB,kBAAC,MAAD,CACE9K,QAAS,kBAAMwO,GAAmBD,IAClCtK,UAAWiL,IAAAA,CAAW,4BAA6B,CAAE,cAAeX,SAO9EF,GAAuBnO,UAAY,CACjCkC,GAAIxD,IAAAA,OAAAA,WACJ0M,KAAM1M,IAAAA,OAAAA,WACN0P,YAAa1P,IAAAA,OAAAA,YAGR,gBCnCDuQ,GAAU,SAAC,GAAsE,IAAzD7F,EAAyD,EAApE8F,QAAW9F,KAAoBW,EAAqC,EAAjDoF,SAAYpF,SAAYqF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAChEC,EAAYF,EAASG,MAAK,gBAAGpR,EAAH,EAAGA,KAAH,OAAc4L,EAASyF,SAASrR,MAGhE,OACE,kBAAC,EAAAsR,KAAD,CAAM1L,UAAWsL,EAAW,yBAA2B,GAAIK,UAAWJ,EAAYA,EAAUK,SAAW,EAAGC,SAHrF,SAACC,EAAQC,GAAT,OAAsB1G,EAAKgG,EAASU,GAAU3R,QAIhEiR,EAASpI,KAAI,SAAC9D,GAAD,OACZ,kBAAC,EAAA6M,IAAD,CAAKtP,MAAOyC,EAAKzC,MAAO0G,IAAKjE,EAAKyM,SAAUA,SAAUzM,EAAKyM,SAAUxR,KAAM+E,EAAK/E,YAMxF8Q,GAAQjP,UAAY,CAClBmP,SAAUzQ,IAAAA,MAAgB,CACxBqL,SAAUrL,IAAAA,OAAAA,aAEZwQ,QAASxQ,IAAAA,MAAgB,CACvB0K,KAAM1K,IAAAA,KAAAA,aAER0Q,SAAU1Q,IAAAA,MAAAA,WACV2Q,SAAU3Q,IAAAA,MAGZ,UAAesR,EAAAA,EAAAA,YAAWf,oBClBpBgB,GAAkB,SAAC,GAAiB,IAAfC,EAAe,EAAfA,SACjB9E,GAAS+E,EAAAA,EAAAA,aAAT/E,KACAhC,GAASC,EAAAA,EAAAA,cAATD,KACFf,GAAWC,EAAAA,EAAAA,eACX3H,GAAOC,EAAAA,EAAAA,KAEb,GAA0C6D,EAAAA,EAAAA,UAAS,IAAnD,eAAO2B,EAAP,KAAsBC,EAAtB,KAqBMtG,EAAW,WACfsI,GACEwB,EAAAA,EAAAA,iBAAgB,CACdjK,QAAS,UACTa,MAAOE,EAAKgB,cAAcyE,EAAc5D,OAAS,EAAIZ,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACxFkI,aAAc,IACdtF,YAAa7D,EAAKgB,cAAcyE,EAAc5D,OAAS,EAAIZ,EAAAA,EAAAA,4BAAuCA,EAAAA,EAAAA,+BAGtGwH,EAAK8G,IAGP,OACE,kBAAC,EAAAzC,MAAD,CACEhN,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,YAC1BhC,QAAS8N,EAAAA,aAAAA,OACTrD,QAAM,EACNsD,QAAS,CACP,kBAAC,EAAAjO,OAAD,CAAQyH,IAAI,UAAUiJ,OAAO,yBAAyBvQ,WAAqC,IAAzBuG,EAAc5D,OAAc5C,QAAQ,UAAUE,QArCrG,WACf,IAAMuQ,EAAWjK,EAAcY,KAAI,SAACiE,GAAD,MAAW,CAAEC,SAAUD,EAAK9F,UAC3DkL,EAAS7N,OAAS,IACpB6F,GACEwB,EAAAA,EAAAA,iBAAgB,CACdjK,QAAS,OACTa,MAAOE,EAAKgB,cAAc0O,EAAS7N,OAAS,EAAIZ,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACnFkI,aAAc,IACdtF,YAAa7D,EAAKgB,cAAc0O,EAAS7N,OAAS,EAAIZ,EAAAA,EAAAA,8BAAyCA,EAAAA,EAAAA,iCAGnGyG,GAASiI,EAAAA,EAAAA,IAAkBlF,EAAMiF,IAAWzM,MAAK,WAC/CyE,GAASkI,EAAAA,EAAAA,IAAqBnF,IAC9B/C,GAAS5F,EAAAA,EAAAA,IAAY,CAAEgE,SAAS,SAGpC2C,EAAK8G,KAsBEvP,EAAKgB,cAAcC,EAAAA,EAAAA,aAEtB,kBAAC,EAAAlC,OAAD,CAAQwC,GAAG,oBAAoBkO,OAAO,0BAA0BjJ,IAAI,SAASvH,QAAQ,OAAOE,QAASC,GAClGY,EAAKgB,cAAcC,EAAAA,EAAAA,UAGxB+J,QAAS5L,GAET,kBAAC,EAAAgF,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAc,YAAD,KACE,kBAAC,KAAD,CAAYQ,gBAAiB5F,EAAKgB,cAAcC,EAAAA,EAAAA,uBAGpD,kBAAC,EAAAqD,UAAD,KACE,kBAAC,KAAD,CAAWmB,cAAeA,EAAeC,iBAAkBA,EAAkBI,SAAO,QAO9FwJ,GAAgBtD,aAAe,CAC7BuD,SAAU,WAGZD,GAAgBjQ,UAAY,CAC1BkQ,SAAUxR,IAAAA,QAGZ,woBCtEA,IAAM8R,GAAW,SAAC,GAAD,IAAmB5E,EAAnB,EAAGsB,aAAgBtB,cAAnB,MAA0C,CACzD6E,QAAS7E,EAAc6E,QAAQzN,KAC/BmF,WAAYyD,EAAc6E,QAAQC,KAClC1O,UAAW4J,EAAczN,KACzBwS,cAAe/E,EAAc+E,cAC7BC,iBAAkBhF,EAAcgF,iBAChCzD,UAAWvB,EAAc6E,QAAQtD,YAG7B0D,GAAkB,SAAC1S,EAAMuN,EAAOoF,GAAd,OACtB,kBAAC,MAAD,UACOA,EAASlP,EAAAA,EAAAA,kBAA6BA,EAAAA,EAAAA,iBAD7C,CAEE+B,OAAQ,CACNmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,IACjBvC,KAAAA,EACAuN,MAAAA,OAiLN,SA7KqB,WACnB,IAAM/K,GAAOC,EAAAA,EAAAA,KACb,GAAsC6D,EAAAA,EAAAA,UAAS,IAA/C,eAAOsM,EAAP,KAAoBC,EAApB,KACA,GAA8CvM,EAAAA,EAAAA,UAAS,IAAvD,eAAOwM,EAAP,KAAwBC,EAAxB,KACA,GAA8CzM,EAAAA,EAAAA,WAAS,GAAvD,eAAO0M,EAAP,KAAwBC,EAAxB,KACA,GAA0C3M,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAO4M,EAAP,KAAsBC,EAAtB,KACA,GAAoC7M,EAAAA,EAAAA,UAAS,IAA7C,eAAO8M,EAAP,KAAmBC,EAAnB,KAEQpG,GAAS+E,EAAAA,EAAAA,aAAT/E,KACR,GAAuF6B,EAAAA,EAAAA,aAAYuD,GAAUnD,EAAAA,cAArGoD,EAAR,EAAQA,QAAStI,EAAjB,EAAiBA,WAAYnG,EAA7B,EAA6BA,UAAWmL,EAAxC,EAAwCA,UAAWwD,EAAnD,EAAmDA,cAAeC,EAAlE,EAAkEA,iBAClE,GAA8CvR,EAAAA,EAAAA,YAAWoS,GAAAA,GAAjDC,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,SAC3BC,GAAiBpJ,EAAAA,EAAAA,QAAOmJ,GAAYD,GAEpCG,EAAU,CACd,CAAEpR,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,QAAkBkQ,WAAY,CAACC,EAAAA,SAC3D,CAAEtR,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,WAC5B,CAAEnB,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC5B,CAAEnB,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,WAC5B,CAAEnB,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,aAGxByG,GAAWC,EAAAA,EAAAA,eAEX0J,EAAY,SAACC,GAAoC,IAAzBC,EAAyB,uDAAf/J,EACtCE,GAASkI,EAAAA,EAAAA,IAAqBnF,EAAM6G,EAAWC,MAGjDxO,EAAAA,EAAAA,YAAU,WACRsO,MACC,KAEHtO,EAAAA,EAAAA,YAAU,WACRkO,EAAehH,QAAU+G,GAAYD,IACpC,CAACC,EAAUD,IAEd,IAIMS,EAAgB,SAACC,GACrB,OAAO/J,GAASgK,EAAAA,EAAAA,IAAuBjH,EAAMgH,IAAYxO,MAAK,WAC5DsN,EAAmB,IACnBc,OAAUtQ,EAAD,GAAC,MAAgByG,GAAjB,IAA6BxF,OAAQ,KAC9C0F,GAAS5F,EAAAA,EAAAA,IAAY,CAAEgE,SAAS,SA+B9ByI,GAAU7F,EAAAA,EAAAA,cAwCVrG,GAAQyN,GAAW,IAAIzJ,KAAI,SAACiE,GAAD,UAAC,MAAeA,GAAhB,IAAsBG,KAAMH,EAAKC,cAC5DoH,ECnJkB,SAACtP,GAA2B,IAArBuP,EAAqB,uDAAP,GACvC5R,GAAOC,EAAAA,EAAAA,KACb,OAAOoC,EAAKwP,QACV,SAACC,EAAD,OAAmBC,EAAnB,EAAQC,UAAqBzH,EAA7B,EAA6BA,SAAU0H,EAAvC,EAAuCA,MAAmBC,EAA1D,EAA8CC,WAAkCC,EAAhF,EAAqEC,UAArE,wBACKP,GADL,CAEE,CACErH,KAAMF,EACNA,SAAAA,EACA+H,MAAO,CACL,CACExS,MAAO,kBAAC,EAAAyS,MAAD,CAAO/R,MAAOuR,GAAY,SAAU/R,EAAKgB,cAAc+Q,EAAW9Q,EAAAA,EAAAA,OAAkBA,EAAAA,EAAAA,WAC3FyC,MAAO,CACLrB,KAAM,CAAE0P,SAAAA,KAGZxH,EACA0H,EACAG,EACAF,GAEFM,SAAUZ,EAAYhD,MAAK,SAAC6D,GAAD,OAASA,EAAIhI,OAASF,UAGrD,ID4HWmI,CAAWrQ,EAAMiO,GAE9B,OACE,kBAAC,EAAAxR,SAAD,KACE,kBAAC6T,GAAA,EAAD,CACE5S,KAAM6Q,EAAW7Q,KACjBD,MAAO8Q,EAAW9Q,MAClB8S,mBAAoBhC,EAAWgC,mBAC/BlJ,OAAQ8G,EACRxF,QAAS,kBAAMyF,GAAmB,IAClCrG,SAAU,WACRqG,GAAmB,GACnBC,OAGJ,kBAACmC,GAAA,EAAD,CAAS7T,KAAK,UAAUuC,GAAI,kBACzB0O,GAAoBD,EACnB,kBAAC,EAAAnK,KAAD,KACE,kBAAC,EAAAiN,SAAD,KACE,kBAAC,EAAA5P,SAAD,KACE,kBAAC,EAAAkC,YAAD,KACE,kBAAC,EAAAC,KAAD,CAAMc,UAAWC,EAAAA,aAAAA,IACdpG,EAAKgB,cAAcgP,EAAgB/O,EAAAA,EAAAA,uBAAkCA,EAAAA,EAAAA,yBAOhF,kBAAC,KAAD,CACEoB,KAAMA,EACN0Q,aAAc9B,EAAehH,QAC7B0H,KAAMA,EACNT,QAASA,EACT8B,OApFK,kBACb,kBAAC,EAAAlU,SAAD,KACE,kBAAC,EAAAmU,MAAD,CACEC,KAAM7J,GAAAA,EAAAA,qBAAAA,KACN8J,OAAQ,SAACC,GAAD,OAAU,kBAAC,IAAD,QAAiB/B,UAAWA,EAAW9B,SAAQ,yBAAoB9E,EAApB,aAAwC2I,SAiFrGC,eAvGa,kBACpBpC,EAAehH,QAEZ,CACE,CACEnK,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC1B9B,QAAS,SAAC+P,EAAQoE,EAAQC,GACxB5C,GAAiB,kBAAM,kBAAMa,EAAc,CAAC+B,EAAOhJ,SAASzK,YAC5D+Q,EAAc,CACZ/Q,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,sBAC1BlB,KAAMmQ,GAAgBqD,EAAOhJ,SAASzK,MAAOuB,GAAW,GACxDuR,mBAAoB5S,EAAKgB,cAAcC,EAAAA,EAAAA,gBAEzCwP,GAAmB,MAXzB,MAsGI+C,kBAAmBxT,EAAKgB,cAAcC,EAAAA,EAAAA,UAAmBwS,cACzDC,YAAa1T,EAAKgB,cAAcC,EAAAA,EAAAA,SAAkBwS,cAClDE,cAAe3T,EAAKgB,cAAcC,EAAAA,EAAAA,QAClCwO,OAAO,gBACPjI,WAAYA,EACZ4I,YAAaA,EACbiB,UAAW,gBAAGtP,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAQxE,EAAlB,EAAkBA,KAAlB,OAA6B6T,EAAU7T,EAAM,CAAEuE,MAAAA,EAAOC,OAAAA,KACjEqO,eAAgB,gBAAG7S,EAAH,EAAGA,KAAH,OAAc6S,EAAe7S,IAC7CoU,YAAatB,EACb9D,UAAWA,EACXoH,WAAYC,GAAAA,EACZC,gBA/HgB,SAACC,GACzBxD,GAAmB,SAACT,GAAD,OAAaiE,EAAajE,OA+HrCkE,eAvFa,yBACjB/C,EAAehH,QACf,CACE,kBAAC,EAAAgK,KAAD,CAAMC,GAAE,yBAAoBzJ,EAApB,wBAAgDjE,IAAI,oBAAoBpD,UAAU,qBACxF,kBAAC,EAAArE,OAAD,CAAQE,QAAQ,UAAU,aAAW,cAClCe,EAAKgB,cAAcC,EAAAA,EAAAA,aAGxB,CACEuD,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,WAC1ByC,MAAO,CACLN,UAAW,qBAEbjE,QAAS,WACPoP,EAAQ9F,KAAR,yBAA+BgC,EAA/B,2BAGJ,CACEjG,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC1ByC,MAAO,CACLxE,YAAaoR,IAAoBA,EAAgBzO,OAAS,EAC1D5C,QAAS,UAEXE,QAAS,WACP,IAAMgV,EAA0B7D,EAAgBzO,OAAS,EACnDuS,EAAapU,EAAKgB,cAAcmT,EAA0BlT,EAAAA,EAAAA,sBAAiCA,EAAAA,EAAAA,sBACjG0P,GAAiB,kBAAM,kBAAMa,EAAclB,EAAgBjK,KAAI,SAACiE,GAAD,OAAUA,EAAKG,aAC9EoG,EAAc,CACZ/Q,MAAOsU,EACPxB,mBAAoBwB,EACpBrU,KAAMmQ,GAAgBiE,EAA0B7D,EAAgBzO,OAASyO,EAAgB,GAAG7F,KAAMpJ,EAAW8S,KAE/G1D,GAAmB,MAIzB,KAoDI4D,WAAY,CAAEvU,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,gBAA0B4C,YAAa,CAAC7D,EAAKgB,cAAcC,EAAAA,EAAAA,oBAA8B,KACjIqT,QAAQ,6DErMdC,GAAc,SAAC,GAAyF,IAAvFzU,EAAuF,EAAvFA,MAAOC,EAAgF,EAAhFA,KAAMiL,EAA0E,EAA1EA,QAASZ,EAAiE,EAAjEA,SAAUV,EAAuD,EAAvDA,OAAQkJ,EAA+C,EAA/CA,mBAAoB4B,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAC5F,GAAgD3Q,EAAAA,EAAAA,WAAS,GAAzD,eAAO4Q,EAAP,KAAyBC,EAAzB,KAEA,OAAOH,IAAcC,GAAaC,EAChC,kBAAC,KAAD,CACEhL,OAAQgL,GAAoBhL,EAC5BsB,QAAS,WACPA,IACA2J,GAAoB,IAEtBvK,SAAU,WACRA,OAIJ,kBAACuI,GAAA,EAAD,CACE5S,KAAMA,EACND,MAAOA,EACP4J,OAAQA,EACRkJ,mBAAoBA,EACpB5H,QAAS,WACPA,KAEFZ,SAAU,WACRuK,GAAoB,KAClBH,GAAaC,IAAcrK,QAMrCmK,GAAYlV,UAAY,CACtBU,KAAMhC,IAAAA,KACN+B,MAAO/B,IAAAA,KACP6U,mBAAoB7U,IAAAA,OACpBqM,SAAUrM,IAAAA,KACViN,QAASjN,IAAAA,KACT2L,OAAQ3L,IAAAA,KACRyW,UAAWzW,IAAAA,KACX0W,UAAW1W,IAAAA,MAGbwW,GAAYvI,aAAe,CACzBwI,WAAW,EACXC,WAAW,GAGb,qlBC1BA,IAAM/B,GAAa,SAACkC,EAAWvS,GAAZ,IAAkBuP,EAAlB,uDAAgC,GAAhC,OACjBvP,MAAAA,OAAA,EAAAA,EAAMwP,QACJ,SAACC,EAAD,OAAQrH,EAAR,EAAQA,KAAMoK,EAAd,EAAcA,aAAcrX,EAA5B,EAA4BA,KAAMqG,EAAlC,EAAkCA,YAAaiR,EAA/C,EAA+CA,SAA/C,wBACKhD,GADL,CAEE,CACErH,KAAAA,EACA3K,MAAO+U,GAAgBrX,EACvB8U,MAAO,CACL,kBAAC,EAAAxT,SAAD,CAAU0H,IAAG,UAAKiE,EAAL,UACX,kBAAC,EAAAwJ,KAAD,CAAMC,GAAE,yBAAoBU,EAApB,yBAA8CnK,IAASoK,GAAgBrX,IAEjFqG,EACA,kBAAC,EAAA/E,SAAD,CAAU0H,IAAG,UAAKiE,EAAL,cACX,kBAACsK,GAAA,EAAD,CAAYC,KAAMF,EAAU9V,MAAMiW,EAAAA,GAAAA,IAAcH,OAGpDtC,SAAU0C,QAAQtD,GAAeA,EAAYhD,MAAK,SAAC6D,GAAD,OAASA,EAAIhI,OAASA,WAG5E,MACG,IAED0K,GAAiB,SAAC3X,GAEtB,OAAOA,EAAKiW,cAAc5E,SAAS,kBAAoB,sBAAwB,mBAG3EuG,GAAgB,SAAClW,EAAYuQ,EAAQ4F,GACzC,IAAMrV,GAAOC,EAAAA,EAAAA,KACPqV,EACJ,kBAAC,EAAAvW,OAAD,CAAQ0Q,OAAQA,EAAQxQ,QAAQ,UAAUmE,UAAU,oBAAoB,aAAW,WAAWmS,eAAgBrW,GAC3Gc,EAAKgB,cAAcC,EAAAA,EAAAA,UAIxB,OAAO/B,EACL,kBAAC,EAAAsW,QAAD,CAASC,QAASJ,GAAqBrV,EAAKgB,cAAcC,EAAAA,EAAAA,gBAA0BqU,GAEpFA,GAIEI,GAAU,SAAC,GAAD,QAAGnJ,aAAgBtB,EAAnB,EAAmBA,cAAe0K,EAAlC,EAAkCA,YAAlC,MAAuD,CACrEC,MAAO3K,EAAc2K,MACrBpO,WAAYyD,EAAczD,YAAd,SAAiCqO,GAAAA,IAAjC,IAAkDzI,OAAOnC,MAAAA,OAAA,EAAAA,EAAe2K,QAAS3K,EAAc2K,MAAM/T,SACjH2K,WAAYvB,EAAcwB,OAC1BjP,KAAMyN,EAAczN,KACpBsY,kBAAmB7K,EAAcgF,iBACjC8F,eAAgB9K,EAAc+E,cAC9ByE,WAAYxJ,EAAc+K,OAC1BC,kBAAmBhL,EAAciL,SAAS1O,YAAcyD,EAAciL,SAAS1O,WAAW4F,MAAQ,IAAQnC,EAAc+E,eACxHmG,gBAAiBR,MAAAA,OAAF,EAAEA,EAAalL,OAG1B2L,GAAa,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,sBACdrW,GAAOC,EAAAA,EAAAA,KACPyH,GAAWC,EAAAA,EAAAA,eACX4G,GAAU7F,EAAAA,EAAAA,cACR+B,GAAS+E,EAAAA,EAAAA,aAAT/E,KACR,GAAgD3G,EAAAA,EAAAA,UAAS,IAAzD,eAAOwS,EAAP,KAAyBC,EAAzB,KACA,GAAsCzS,EAAAA,EAAAA,UAAS,IAA/C,eAAOsM,EAAP,KAAoBC,EAApB,KACA,GAA0CvM,EAAAA,EAAAA,UAAS,IAAnD,eAAOoB,EAAP,KAAsBC,EAAtB,KACA,GAAgDrB,EAAAA,EAAAA,UAAS,IAAzD,eAAO0S,EAAP,KAAyBC,EAAzB,KACA,GAA8C3S,EAAAA,EAAAA,WAAS,GAAvD,eAAO0M,EAAP,KAAwBC,EAAxB,KACA,GAA0C3M,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAO4M,EAAP,KAAsBC,EAAtB,KACA,GAAoC7M,EAAAA,EAAAA,UAAS,IAA7C,eAAO8M,EAAP,KAAmBC,EAAnB,KACA,GAA8CnS,EAAAA,EAAAA,YAAWoS,GAAAA,GAAjDC,EAAR,EAAQA,wBAAyBC,EAAjC,EAAiCA,SAC3BC,GAAiBpJ,EAAAA,EAAAA,QAAOmJ,GAAYD,GAC1C,GAA+HzE,EAAAA,EAAAA,aAAYoJ,IAAnIE,EAAR,EAAQA,MAAOpO,EAAf,EAAeA,WAAYgF,EAA3B,EAA2BA,UAAWhP,EAAtC,EAAsCA,KAAMsY,EAA5C,EAA4CA,kBAAmBC,GAA/D,EAA+DA,eAAgBtB,GAA/E,EAA+EA,UAAWwB,GAA1F,EAA0FA,gBAAiBE,GAA3G,EAA2GA,gBAErGO,GAAgB,SAACC,EAAOC,GAE5B,OADAD,EAAMpL,QAAQtI,KAAK2T,GACZD,GAGHE,GAAqB,SAACC,GAAD,OAAapP,GAASqP,EAAAA,EAAAA,IAAsBD,EAAS,GAAI,MAC9EE,GAAiB,SAACC,GAAD,OAAcvP,GAAS2D,EAAAA,EAAAA,IAAW4L,MAAAA,EAAAA,EAAYxM,KAC/DyM,GAAiB,kBAAMxP,GAASyP,EAAAA,EAAAA,QAChCC,GAAc,SAACN,EAASlB,EAAOgB,GAAjB,OAA8BlP,EAASgP,IAAcW,EAAAA,EAAAA,IAAqBP,EAASlB,GAAQgB,KACzGU,GAAkB,SAACC,GAAD,OAAY,SAACT,EAASvF,GAAV,OAAsB7J,GAAS8P,EAAAA,EAAAA,IAAmBV,EAASS,EAAQhG,MAEjGL,GAAU,CACd,CAAEpR,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,MAAgBwG,QAAS,QACrD,CAAE3H,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,cAC5B,CAAEnB,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,iBAG9B8B,EAAAA,EAAAA,YAAU,WACK,mBAAT0H,EACF6M,GAAgB9P,EAAhB8P,CAA4B7M,GAE5B0L,IAAmBmB,GAAgB9P,EAAhB8P,CAA4BnB,MAEhD,CAACA,MAEJpT,EAAAA,EAAAA,YAAU,YACJ6S,MAAAA,OAAA,EAAAA,EAAO/T,QAAS,IACL,mBAAT4I,EACFoM,GAAmBpM,GAEnB0L,IAAmBU,GAAmBV,OAGzC,CAACP,KAEJ7S,EAAAA,EAAAA,YAAU,WACRkO,EAAehH,QAAU+G,GAAYD,IACpC,CAACC,EAAUD,IAEd,IAIMb,GAAkB,SAAC1S,EAAM8I,EAAM6J,GAAb,OACtB,2BACE,kBAAC,MAAD,UACOA,EAASlP,EAAAA,EAAAA,qBAAgCA,EAAAA,EAAAA,oBADhD,CAEE+B,OAAM,IACJmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,IACjBvC,KAAAA,GACI2S,EAAS,CAAEyF,MAAOtP,GAAS,CAAEA,KAAAA,SAMnCmR,GAAqB,mBAAThN,EAA4BA,EAAO0L,GAE/CuB,GAAsB,WACtB5B,EACFoB,KAAiBjU,MAAK,YAAyB,IAAbZ,EAAa,EAAtBK,MAASL,KAChCiV,GAAgB,SAAK9P,GAAN,IAAkBxF,OAAQ,IAAzCsV,CAA8CjV,EAAK,GAAGoI,SAGxD6M,GAAgB,SAAK9P,GAAN,IAAkBxF,OAAQ,IAAzCsV,CAA8C7M,IA0GlD,OACE,kBAAC,aAAD,KACE,kBAAC,GAAD,CACE1K,KAAM6Q,EAAW7Q,KACjBD,MAAO8Q,EAAW9Q,MAClB4J,OAAQ8G,EACRiE,UAAWA,GACXD,UAAWsB,GAAqBC,GAChCnD,mBAAoBhC,EAAWgC,mBAC/B5H,QAAS,kBAAMyF,GAAmB,IAClCrG,SAAU,WACRqG,GAAmB,GACnBC,IACAvL,EAAiB,IACjBkR,EAAsBP,IAAsBrB,OAIhD,kBAAC5B,GAAA,EAAD,CAAS7T,KAAK,UAAUuC,GAAG,aACzB,kBAAC,KAAD,CACE2P,QAASA,GACT6B,aAAc9B,EAAehH,UAAY8L,GACzCpE,KAAMe,GAAWjI,EAAMmL,EAAO1Q,GAC9B7C,KAAMuT,EACNxF,YAAaA,EACbiB,UAAW,SAACkG,GACVD,GAAgBC,EAAhBD,CAAwBG,KAE1BE,aAAc,CAAEna,KAAM,GAAIqG,YAAa,IACvCwM,eAAgB,YAA2B,IAAxB7S,EAAwB,EAAxBA,KAAMqG,EAAkB,EAAlBA,iBACP,IAATrG,GAAwB6S,EAAe7S,QACvB,IAAhBqG,GAA+B0S,EAAoB1S,IAE5D2I,UAAWA,EACXhF,WAAYA,EACZoK,YAAa1M,EACb4O,gBAvKgB,SAACC,GACvB5O,GAAiB,SAACyQ,GAAD,OAAW7B,EAAa6B,GAAOvP,KAAI,gBAAGoE,EAAH,EAAGA,KAAMjN,EAAT,EAASA,KAAT,MAA4B,CAAEiN,KAAAA,EAAMjG,MAApC,EAAeA,OAAqChH,UAuKlGkW,YAAa1T,EAAKgB,cAAcC,EAAAA,EAAAA,OAAgBwS,cAChDE,cAAe3T,EAAKgB,cAAcC,EAAAA,EAAAA,MAClC+S,eAzFe,yBACjB/C,EAAehH,UAAY8L,GAC3B,CACE,kBAAC,EAAA9B,KAAD,CACE7Q,UAAS,mDAA8C6S,IAAmB,aAC1E/B,GAAE,yBAAoBzJ,EAApB,oBACFjE,IAAI,gBAEH4O,GAAca,GAAiBd,GAAe3X,GAAQ,IAAKuY,IAAkB/V,EAAKgB,cAAcC,EAAAA,EAAAA,2BAEnG,CACEuD,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,SAC1ByC,MAAO,CACLxE,WAAY+W,GACZ7S,UAAW,qBAEbjE,QAAS,kBAAMoP,EAAQ9F,KAAR,yBAA+BgC,EAA/B,uBAEjB,CACEjG,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC1ByC,MAAO,CACLxE,YAAagG,IAAkBA,EAAcrD,OAAS,EACtD5C,QAAS,UAEXE,QAAS,WACP,IAAMyY,EAAwB1S,EAAcrD,OAAS,EACrD8O,GACE,kBAAM,kBACJyG,GACEK,GACAvS,EAAcmB,KAAI,SAACC,GAAD,OAAUA,EAAKmE,QACjCiN,QAGN7G,EAAc,CACZ/Q,MAAOE,EAAKgB,cAAc4W,EAAwB3W,EAAAA,EAAAA,oBAA+BA,EAAAA,EAAAA,oBACjF2R,mBAAoB5S,EAAKgB,cAAc4W,EAAwB3W,EAAAA,EAAAA,YAAuBA,EAAAA,EAAAA,YACtFlB,KAAMmQ,GACJ1S,EACAoa,EAAwB1S,EAAcrD,OAAS+T,EAAMhH,MAAK,SAACtI,GAAD,OAAUA,EAAKmE,OAASvF,EAAc,GAAGuF,QAAMjN,KACzGoa,KAIJnH,GAAmB,MAIzB,KA0CE4C,eA9Ie,yBACjBpC,EAAehH,UAAY8L,GAC3B,CACE,CACEjW,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC1B9B,QAAS,SAAC+P,EAAQoE,EAAQhN,GACxBqK,GAAiB,kBAAM,kBAAMyG,GAAYK,GAAW,CAACnR,EAAKmE,MAAOiN,QACjE7G,EAAc,CACZ/Q,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,oBAC1B2R,mBAAoB5S,EAAKgB,cAAcC,EAAAA,EAAAA,YACvClB,KAAMmQ,GAAgB1S,EAAM8I,EAAKxG,OAAO,KAE1C2Q,GAAmB,MAIzB,KA+HEuC,OA5HO,kBACb,kBAAC,EAAAlU,SAAD,KACE,kBAAC,EAAAmU,MAAD,CACEC,KAAM7J,GAAAA,EAAAA,mBAAAA,KACN8J,OAAQ,SAACC,GAAD,OACN,kBAAC,MAAD,QACEyE,YAAa,WACP/B,GAAqBC,GACvBmB,KAAiBjU,MAAK,YAAyB,IAAbZ,EAAa,EAAtBK,MAASL,KAChCiV,GAAgB9P,EAAhB8P,CAA4BjV,EAAK,GAAGoI,MACpCuM,GAAe3U,EAAK,GAAGoI,UAGzB6M,GAAgB9P,EAAhB8P,CAA4B7M,GAC5BuM,OAGJS,UAAWtB,GACXjR,cAAesR,EACfrR,iBAAkBsR,EAClBlH,SAAQ,yBAAoBuG,EAAoB,iBAAmBrL,EAA3D,UACRqN,gBAAiB,SAAChB,EAASlB,EAAOgB,GAAjB,OAA8BlP,EAASgP,IAAcoB,EAAAA,EAAAA,IAAgBhB,EAASlB,GAAQgB,KACvGvV,UAAW7D,EACXgX,UAAWsB,GAAqBC,GAChCtB,UAAWA,GACX4B,sBAAuBA,GACnBjD,SAmGN3D,OAAO,cACP4E,WAAY,CACVvU,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,cAC1B4C,YAAa,CAAC7D,EAAKgB,cAAc+U,GAAiB9U,EAAAA,EAAAA,2BAAsCA,EAAAA,EAAAA,0BAAoC,KAE9HgB,QAAS,CACP,CAAEuE,IAAK,OAAQ9D,MAAO0N,GACtB,CAAE5J,IAAK,cAAe9D,MAAO4T,IAE/BhC,QAAQ,mBAOlB8B,GAAW/W,UAAY,CACrB0Y,aAAcha,IAAAA,OACdmH,cAAenH,IAAAA,MACfyJ,WAAYzJ,IAAAA,MAAgB,CAC1BgE,MAAOhE,IAAAA,OAAAA,WACPiE,OAAQjE,IAAAA,OAAAA,WACRqP,MAAOrP,IAAAA,SAETsY,sBAAuBtY,IAAAA,MAGzBqY,GAAWpK,aAAe,CACxBxE,WAAYwQ,GAAAA,GACZ9S,cAAe,IAGjB,inBCjTA,IAAM+S,GAAQ,SAAC,GAKT,IAHQxN,EAGR,EAJJU,MACEG,OAAUb,KAEZyN,EACI,EADJA,SAEMlY,GAAOC,EAAAA,EAAAA,KACPyH,GAAWC,EAAAA,EAAAA,eACX4G,GAAU7F,EAAAA,EAAAA,cACV8F,GAAW2J,EAAAA,EAAAA,eACXC,GAASC,EAAAA,GAAAA,KACTvC,EAA6B,mBAATrL,EACpBgE,EAAW,CACf,CAAEO,SAAU,EAAGlP,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,OAAiBzD,KAAM,kBAAF,OAAoBiN,EAApB,WAC9D,CAAEuE,SAAU,EAAGlP,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,SAAmBzD,KAAM,kBAAF,OAAoBiN,EAApB,cAGlE,GAA8D6B,EAAAA,EAAAA,cAC5D,oBAAGC,aAAgBvH,EAAnB,EAAmBA,OAAQpG,EAA3B,EAA2BA,MAAO+W,EAAlC,EAAkCA,YAAlC,MAAuD,CACrDnO,WAAYxC,EAAOwC,YAAcxC,EAAO+K,KACxC9N,QAAS+C,EAAO/C,QAChBqW,YAAa1Z,IAAU2Z,GAAAA,GACvBpC,gBAAiBR,MAAAA,OAAF,EAAEA,EAAalL,QAEhCiC,EAAAA,cAPMlF,EAAR,EAAQA,WAAYvF,EAApB,EAAoBA,QAASqW,EAA7B,EAA6BA,YAAanC,EAA1C,EAA0CA,gBAU1C,GAA8B7J,EAAAA,EAAAA,cAC5B,oBAAGC,aAAgBtB,EAAnB,EAAmBA,cAAeuN,EAAlC,EAAkCA,gBAAiBC,EAAnD,EAAmDA,qBAAnD,MAAiF,CAC/E1N,MAAOE,EACPyN,WAAYF,GAAmBC,KAEjC/L,EAAAA,cALM3B,EAAR,EAAQA,MAAO2N,EAAf,EAAeA,WAQf,GAAwD5U,EAAAA,EAAAA,WAAS,GAAjE,eAAO6U,EAAP,KAA8BC,EAA9B,KACA,GAA0C9U,EAAAA,EAAAA,WAAS,GAAnD,eAAO+U,EAAP,KAAuBC,EAAvB,KACA,GAAsEhV,EAAAA,EAAAA,WAAS,GAA/E,eAAOiV,EAAP,KAAoCC,EAApC,MAEAjW,EAAAA,EAAAA,YAAU,WACR2E,GAASyP,EAAAA,EAAAA,OACT,IAAM8B,EAAYnD,EAA2BK,EAAP1L,EAKtC,OAJIwO,IACFvR,GAAS2D,EAAAA,EAAAA,IAAW4N,IACpBb,EAAOc,YAAYD,IAEd,kBAAMb,EAAOc,iBAAYnY,MAC/B,CAAC0J,EAAM0L,IAEV,IAUiC3Y,EAV3B2b,EAAkB,iBAAM,CAC5B,CACErZ,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC1BiT,IAAIkF,EAAAA,GAAAA,IAAanN,GAAAA,EAAAA,OAAAA,KAAuBzE,EAAYvF,IAEtDqW,EACI,CAAExY,MAAO4Y,OAAa3X,EAAYgK,EAAMvN,KAAMuU,UAAU,GACxD,CAAEjS,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,cAAwB8Q,UAAU,KA8C9DsH,EAAgB,CACpB,kBAAC,EAAAC,aAAD,CACEnT,UACE,kBAAC,EAAA8N,KAAD,CACE9U,QAAS,kBAAM2Z,GAAgB,IAC/B5E,IAAK1F,EAASpF,SAASyF,SAAS,WAAa5C,GAAAA,EAAAA,6BAAyCA,GAAAA,EAAAA,4BAAsCiH,KAAKqG,QAC/H,QACAzD,EAAoB,iBAAmBrL,IAGxCzK,EAAKgB,cAAcC,EAAAA,EAAAA,OAGxBuF,IAAI,eAEN,kBAAC,EAAA8S,aAAD,CACEnT,UACE,kBAAC,EAAA8N,KAAD,CACE9U,QAAS,kBAAM+Y,EAASzN,IACxByJ,GAAI,kBACD1F,EAASpF,SAASyF,SAAS,WAAa5C,GAAAA,EAAAA,+BAA2CA,GAAAA,EAAAA,8BAAwCiH,KAAKqG,QAC/H,QACA9O,KAIHzK,EAAKgB,cAAcC,EAAAA,EAAAA,SAGxBmC,UAAU,uBACVoD,IAAI,kBAIFiR,EAAY3B,EAAoBK,EAAkB1L,EAExD,OACE,kBAAC,EAAA3L,SAAD,KACG6Z,GACC,kBAAC,IAAD,CACE3Z,KAAK,QACL0K,OAAQiP,EACRa,YAAa,6BAAMxZ,EAAKgB,cAAcC,EAAAA,EAAAA,+BACtCwY,kBACE,kBAAC,MAAD,UACMxY,EAAAA,EAAAA,gCADN,CAEE+B,OAAQ,CACNmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,QAIvB2Z,yBAA0B1Z,EAAKgB,cAAcC,EAAAA,EAAAA,UAC7C0Y,2BAA4B3Z,EAAKgB,cAAcC,EAAAA,EAAAA,QAC/C0I,cAAe,kBAAMiP,GAAuB,IAC5ChP,gBAAiB,WACflC,GAASwF,EAAAA,EAAAA,IAAa,CAACiJ,KAAmBlT,MAAK,kBAC7CyE,GAASyP,EAAAA,EAAAA,OAAoBlU,MAAK,WAChC+V,GAA+B,SAGnCJ,GAAuB,GACvBrK,EAAQ9F,KAAK,0CAIlB6P,EACC,kBAAC,EAAAxZ,SAAD,KACE,kBAAC,KAAD,CAAY8a,YAAaT,KACvB,kBAAC,EAAAU,MAAD,CAAOxV,WAAS,GACd,kBAAC,EAAAyV,UAAD,CAAWC,UAAQ,GACjB,kBAAC,KAAD,CACEja,OACG4Y,GAAc3N,EACb,kBAAC,EAAAjM,SAAD,KAAWiM,EAAMkF,mBAAqBlF,EAAMiL,QApH/BxY,EAoHgEuN,EAAMvN,KAnHrG,yBAAKwc,MAAO,CAAEC,QAAS,gBACpBzc,EACD,yBAAK4F,UAAU,cACb,kBAAC,EAAA0K,QAAD,CACE,aAAW,qBACXL,YACE,kBAAC,MAAD,UACMxM,EAAAA,EAAAA,8BADN,CAEE+B,OAAQ,CACNmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,SAKvB,kBAAC,MAAD,CAA4BqD,UAAU,qCAqGiE2H,EAAMvN,WAC/FuD,EAEN8C,aAAc6U,GAAc3N,EAAQA,EAAMlH,iBAAc9C,KAG3DgK,EAAMkF,mBAAqBlF,EAAMiL,OAAS,kBAAC,EAAA8D,UAAD,KApGrD,yBAAK1W,UAAU,gCACb,kBAAC,EAAArE,OAAD,CAAQE,QAAQ,OAAOE,QAAS,kBAAMyZ,GAAuB,KAC1D5Y,EAAKgB,cAAcC,EAAAA,EAAAA,mBAEtB,kBAAC,EAAA6M,QAAD,CACE,aAAW,qBACXE,SAAUkM,EAAAA,gBAAAA,UACVzM,YACE,kBAAC,MAAD,UACMxM,EAAAA,EAAAA,yBADN,CAEE+B,OAAQ,CACNmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,SAKvB,kBAAC,MAAD,CAA4BqD,UAAU,+CAoF4D,KAC5F,kBAAC,EAAA0W,UAAD,KACG/O,EAAMkF,kBAAoBlF,EAAMiF,cAAgB,KAC/C,kBAAC,EAAAmK,SAAD,CACE1K,OAAO,+BACP2K,OAAQ,kBAAC,EAAAC,YAAD,CAAaC,SAAU,SAAC5Q,GAAD,OAAYoP,EAAgBpP,IAASnI,GAAG,2BACvEmI,OAAQmP,EACR0B,SAAO,EACPvM,SAAS,QACTqL,cAAeA,MAKtBN,EACC,kBAAC,EAAAyB,MAAD,CACEvb,QAAQ,OACRwb,UAAQ,EACR3a,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,2BAC1ByZ,OAAQ,kBAAC,EAAAC,uBAAD,CAAwB3P,QAAS,kBAAMgO,GAA+B,MAC9E5V,UAAU,yBAEV,kBAAC,MAAD,UACMnC,EAAAA,EAAAA,8BADN,CAEE+B,OAAQ,CACNmK,EAAG,SAACpN,GAAD,OAAU,2BAAIA,SAIrB,MAEN,kBAAC,GAAD,CAAS2O,UAAQ,EAACD,SAAUA,IAC5B,kBAAC,EAAAwE,MAAD,CACEC,KAAM,CAACjH,GAAAA,EAAAA,6BAAAA,KAA6CA,GAAAA,EAAAA,+BAAAA,MACpDkH,OAAQ,SAACzP,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEE6D,WAAY,WACVG,GAAS5F,EAAAA,EAAAA,IAAY,SAAK0F,GAAN,IAAkBxF,OAAQ,EAAGC,QAAAA,EAAS6D,SAAS,OAErE+E,YAAW,uBAAkBJ,GAC7BK,aAAasO,EAAAA,GAAAA,IAAanN,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4BzE,GAA7B,IAAyCxF,OAAQ,IAAKC,GAC/EoK,aAAW,EACXD,WAAY,CAACrB,SAInB,kBAAC,EAAAkI,MAAD,CACEC,KAAM,CAACjH,GAAAA,EAAAA,2BAAAA,KAA2CA,GAAAA,EAAAA,6BAAAA,MAClDkH,OAAQ,SAACzP,GAAD,OAAW,kBAAC,IAAD,UAAeA,EAAf,CAAsBqH,MAAOA,EAAOF,YAAW,uBAAkBJ,GAAQlD,WAAY,kBAAM8D,EAAAA,EAAAA,IAAWoM,UAE3H,kBAAC,EAAAxE,MAAD,CACEC,KAAMjH,GAAAA,EAAAA,sBAAAA,KACNkH,OAAQ,SAACzP,GAAD,OAAW,kBAAC,IAAD,UAAgBA,EAAhB,CAAuB2S,sBAAuB2C,QAEnE,kBAAC,EAAA/F,MAAD,CAAOC,KAAMjH,GAAAA,EAAAA,wBAAAA,KAAwC9F,UAAWyU,KAChE,kBAAC,EAAA3H,MAAD,CAAOE,OAAQ,kBAAM,kBAAC,EAAA0H,SAAD,CAAU3G,GAAE,yBAAoBzJ,EAApB,gBAC/BM,GAAS,kBAAC,MAAD,OAGb,kBAAC,EAAAjM,SAAD,KACE,6BAASsE,UAAU,yCACjB,kBAAC,KAAoB+V,MAEvB,kBAAC,KAAD,CACErZ,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,eAC1B4C,YAAa,CAAC7D,EAAKgB,cAAcC,EAAAA,EAAAA,kBAA4B,CAAEM,GAAIkJ,KACnEuC,QAAS,CACP,kBAAC,EAAAjO,OAAD,CACEyH,IAAI,cACJpD,UAAU,aACVqM,OAAO,cACPxQ,QAAQ,UACR,aAAW,wBACXE,QAAS,kBAAMoP,EAAQuM,WAEtB9a,EAAKgB,cAAcC,EAAAA,EAAAA,2BAUpCgX,GAAM5Y,UAAY,CAChB8L,MAAOpN,IAAAA,OACPma,SAAUna,IAAAA,MAGZ,yoBCTA,SA1Qe,WACb,IAAMiC,GAAOC,EAAAA,EAAAA,KACPyH,GAAWC,EAAAA,EAAAA,eACX4G,GAAU7F,EAAAA,EAAAA,cACV2I,EAAY,SAACE,GAAD,OAAa7J,GAAS5F,EAAAA,EAAAA,IAAY,SAAKyP,GAAN,IAAezL,SAAS,OAC3E,GAA8CpH,EAAAA,EAAAA,YAAWoS,GAAAA,GAAjDE,EAAR,EAAQA,SAAUD,EAAlB,EAAkBA,wBACZgK,EAAU/J,GAAYD,EACtBiK,GAAgBnT,EAAAA,EAAAA,QAAO,MAEvBqJ,EAAU,CACd,CAAEpR,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,MAAgBuF,IAAK,OAAQ2K,WAAY,CAAC8J,EAAAA,WACtE,CAAEnb,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC5B,CAAEnB,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,UAC5B,CAAEnB,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,cAAwBuF,IAAK,WAAY2K,WAAY,CAAC8J,EAAAA,YAIpF,GAAsCnX,EAAAA,EAAAA,UAAS,CAAEyC,MAAO2U,OAAOH,GAAUI,UAAW,QAApF,eAAOC,EAAP,KAAoBC,EAApB,KACM5T,EAAU,GAAH,OAAiC,UAA3B2T,MAAAA,OAAA,EAAAA,EAAaD,WAAuB,IAAM,IAAhD,OAAqDjK,GAAQkK,MAAAA,OAAA,EAAAA,EAAa7U,OAAQ2U,OAAOH,IAAUvU,KAEhH,GAA0D8F,EAAAA,EAAAA,cACxD,0BAAGC,aAAgBvH,EAAnB,EAAmBA,OAAQwH,EAA3B,EAA2BA,UAAW8O,EAAtC,EAAsCA,WAAY3F,EAAlD,EAAkDA,YAAlD,MAAuE,CACrE3Q,OAAQ,GAAF,eACAsW,MAAAA,GAAA,UAAAA,EAAY9d,YAAZ,SAAkB2N,MAAM,IAAIoQ,OAAOvW,EAAO/C,QAAQzE,KAAM,MAAQ,CAAC8d,GAAc,KAD/E,OAEA3F,MAAAA,GAAA,UAAAA,EAAanY,YAAb,SAAmB2N,MAAM,IAAIoQ,OAAOvW,EAAO/C,QAAQzE,KAAM,MAAQ,CAACmY,GAAe,KAFjF,QAGA3Q,MAAAA,GAAA,UAAAA,EAAQ3C,YAAR,eAAcmZ,QAAO,wEAAuC,GAApCvL,EAAH,EAAGA,iBAAkBD,EAArB,EAAqBA,cAArB,QAAgDC,GAAoBD,QAAmB,KAElHD,MAAM/K,MAAAA,OAAA,EAAAA,EAAQwC,cAAcxC,MAAAA,OAAtB,EAAsBA,EAAQ+K,MACpC9N,QAAS+C,MAAAA,OAAF,EAAEA,EAAQ/C,QACjBuK,UAAAA,EACAmJ,YAAAA,KAEFjJ,EAAAA,cAZM1H,EAAR,EAAQA,OAAQ+K,EAAhB,EAAgBA,KAAM9N,EAAtB,EAAsBA,QAASuK,EAA/B,EAA+BA,UAAWmJ,EAA1C,EAA0CA,YAe1C,GAAoC7R,EAAAA,EAAAA,UAAS,SAAMkN,EAAWyK,GAAAA,GAAuB5F,GAAAA,IAAqB9F,IAA1G,eAAOvI,EAAP,KAAmBkU,EAAnB,KACA,GAAsC5X,EAAAA,EAAAA,UAAS7B,EAAQzE,MAAQ,IAA/D,eAAO4S,EAAP,KAAoBC,EAApB,KACA,GAAwCvM,EAAAA,EAAAA,UAAS,IAAjD,eAAO6X,EAAP,KAAqBC,EAArB,KACA,GAAgD9X,EAAAA,EAAAA,UAAS,IAAzD,eAAO+X,EAAP,KAAyBC,EAAzB,MAEA/Y,EAAAA,EAAAA,YAAU,WACR,IAAMgZ,GAAmBC,EAAAA,GAAAA,IAA6BzN,EAAS/G,GAC/DkU,EAAcK,GACd,IAAQve,GAASye,EAAAA,GAAAA,IAA0B1N,EAAS,CAAC,QAAS,CAAE/Q,KAAM4S,IAA9D5S,KACR6S,EAAe7S,GACf0e,SAAS9D,OAAO+D,YAAY,CAAE5a,GAAI,SAAU6a,cAAc,IAC1D/K,EAAU,SAAK0K,GAAN,IAAwBtU,QAAAA,EAASxF,QAAS,CAAEzE,KAAAA,MACrDkK,GAAS2U,EAAAA,EAAAA,IAAgB7e,IACzBkK,GAASyP,EAAAA,EAAAA,IAAiB3Z,MACzB,KAEHuF,EAAAA,EAAAA,YAAU,YACRuZ,EAAAA,GAAAA,IAAyB/N,KAAYgO,EAAAA,GAAAA,IAAqBhO,EAAS/G,EAAWzF,MAAOyF,EAAWxF,SAChGoO,MAAAA,OAAA,EAAAA,EAAavO,QAAS,KAAM2a,EAAAA,GAAAA,IAAuBjO,EAAS,CAAC,WAAY0N,EAAAA,GAAAA,IAA0B1N,EAAS,CAAC,QAAS,CAAE/Q,KAAM4S,QAGhIrN,EAAAA,EAAAA,YAAU,WACRyE,EAAWiV,aAAcF,EAAAA,GAAAA,IAAqBhO,EAAS/G,EAAWzF,MAAOyF,EAAWxF,UACnF,CAACwF,EAAWiV,cAEf1Z,EAAAA,EAAAA,YAAU,WACRsN,EAAepO,EAAQzE,MACvBke,EAAc,SAAKlU,GAAeuI,MACjC,CAAC9N,EAAS8N,IAEb,IAAM+D,EAAkB,SAACC,GACvB6H,GAAgB,SAACjK,GAAD,OACdoC,EAAapC,GACV6J,QAAO,gBAAqB1F,EAArB,EAAG7F,iBAAoD8F,EAAvD,EAAwC/F,cAAxC,QAA8E8F,GAAqBC,MAC1G1P,KAAI,kBAAqB,CAAEoE,KAAvB,EAAGA,KAA0BjG,MAA7B,EAAShH,aAWdwV,EAAS,kBACb,kBAAC,EAAAlU,SAAD,KACE,kBAAC,EAAAmU,MAAD,CAAOyJ,OAAK,EAACxJ,KAAMjH,GAAAA,EAAAA,aAAAA,MACjB,kBAAC,GAAD,CACEzE,WAAYA,EACZvF,QAASA,EACTwF,QAASA,EACTF,WAAY,SAACgQ,GACXlG,EAAUkG,GACVlH,EAAe,QAIrB,kBAAC,EAAA4C,MAAD,CAAOyJ,OAAK,EAACxJ,KAAMjH,GAAAA,EAAAA,cAAAA,MACjB,kBAAC,GAAD,CACEzE,WAAYA,EACZvF,QAASA,EACTsF,WAAY,SAACgQ,GACXlG,EAAU,SAAKkG,GAAN,IAAc9P,QAAAA,MAEzBoD,aAAauO,EAAAA,GAAAA,IAAanN,GAAAA,EAAAA,OAAAA,KAAuBzE,EAAYvF,GAC7D6I,aAAasO,EAAAA,GAAAA,IAAanN,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4BzE,GAA7B,IAAyCxF,OAAQ,IAAKC,MAGnF,kBAAC,EAAAgR,MAAD,CAAOyJ,OAAK,EAACxJ,KAAMjH,GAAAA,EAAAA,gBAAAA,MACjB,kBAAC,GAAD,CACEzE,WAAYA,EACZvF,QAASA,EACTsF,WAAY,SAACoV,EAAKpF,GAChBlG,EAAU,SAAKkG,GAAN,IAAc9P,QAAAA,KACvBmU,EAAgBD,EAAaH,QAAO,SAAC/I,GAAD,OAAUkK,EAAI9N,SAAS4D,EAAIhI,WAEjEI,aAAauO,EAAAA,GAAAA,IAAanN,GAAAA,EAAAA,OAAAA,KAAuBzE,EAAYvF,GAC7D6I,aAAasO,EAAAA,GAAAA,IAAanN,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4BzE,GAA7B,IAAyCxF,OAAQ,IAAKC,GAC/EoK,aAAW,EACXD,WAAYyP,OAMdxI,EAAiB,SAAC,GAAD,IAAGyC,EAAH,EAAGA,kBAAmBC,EAAtB,EAAsBA,eAAtB,OACrBD,GAAqBC,IAAmBgF,EACpC,KACA,CACE,CACEjb,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,MAC1B9B,QAAS,SAAC+P,EAAQoE,EAAQvI,GACxBwD,EAAQ9F,KAAR,uBAA6BsC,EAAMN,SAGvC,CACE3K,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC1B9B,QAAS,SAAC+P,EAAQoE,EAAQvI,GACxB+Q,EAAoB,CAAC/Q,IACrBwD,EAAQ9F,KAAKwD,GAAAA,EAAAA,gBAAAA,UAMnB+H,EAAiB,yBACjB+G,EACA,CACE,kBAAC,EAAA9G,KAAD,CAAMC,GAAIjI,GAAAA,EAAAA,aAAAA,KAA6BzF,IAAI,YAAYpD,UAAU,qBAC/D,kBAAC,EAAArE,OAAD,CAAQ0Q,OAAO,sBAAsBxQ,QAAQ,UAAU,aAAW,gBAC/De,EAAKgB,cAAcC,EAAAA,EAAAA,eAGxB,CACEuD,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,aAC1ByC,MAAO,CACLN,UAAW,qBAEbjE,QAAS,WACPoP,EAAQ9F,KAAKwD,GAAAA,EAAAA,aAAAA,QAGjB,CACEzH,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,MAC1ByC,MAAO,CACLxE,aAAsC,IAAxByc,EAAa9Z,SAE7B1C,QAAS,kBAAMoP,EAAQ9F,KAAR,uBAA6BkT,EAAa,GAAGlR,SAE9D,CACEjG,MAAOxE,EAAKgB,cAAcC,EAAAA,EAAAA,QAC1ByC,MAAO,CACLxE,YAAayc,EAAa9Z,OAAS,GAErC1C,QAAS,WACP2c,EAAoBH,GACpBpN,EAAQ9F,KAAKwD,GAAAA,EAAAA,gBAAAA,SAInB,KAEA5J,GAAO2C,EAAOqB,KAAI,SAAC0E,GAAD,OACtBA,EAAMkF,kBAAoBlF,EAAMiF,cAAhC,SAAqDjF,GAArD,IAA4D6R,eAAgB,MAAF,OAAQ7R,EAAMiF,cAAgB,cAAgB,MAASjF,KAE7H4G,GR5KkB,SAACoJ,EAAS1Y,GAA4B,IAAtBsZ,EAAsB,uDAAP,GACjD3b,GAAOC,EAAAA,EAAAA,KACb,OAAOoC,EAAKwP,QACV,SAACC,EAAD,OAAQrH,EAAR,EAAQA,KAAMjN,EAAd,EAAcA,KAAMqf,EAApB,EAAoBA,UAAWD,EAA/B,EAA+BA,eAAgB9H,EAA/C,EAA+CA,SAA4BgB,EAA3E,EAAyD7F,iBAAoD8F,EAA7G,EAA8F/F,cAA9F,wBACK8B,GADL,CAEE,CACErH,KAAAA,EACAsL,eAAAA,EACAD,kBAAAA,EACAxD,MAAO,CACL,kBAAC,EAAAxT,SAAD,CAAU0H,IAAKiE,GACb,yBAAKrH,UAAU,oBACZ2X,EACC,kBAAC,EAAA9G,KAAD,CAAMzN,IAAG,UAAKiE,EAAL,SAAkBqS,MAAO,CAAErS,KAAAA,GAAQyJ,GAAI,CAAE9K,SAAU,kBAAF,OAAoB0M,EAAoB,iBAAmBrL,KAClHjN,GAGHA,GAEAsY,GAAqBC,IACrB,kBAACvI,GAAD,CACEjM,GAAE,iBAAYwU,EAAiB,SAAW,GAAxC,kBACFtL,KAAMA,EACNjE,IAAG,UAAKiE,EAAL,YACHgD,YAAazN,EAAKgB,cAAc+U,EAAiB9U,EAAAA,EAAAA,uBAAkCA,EAAAA,EAAAA,yBAK3F4b,EACAD,EACA,kBAAC,EAAA9d,SAAD,CAAU0H,IAAG,UAAKiE,EAAL,cACX,kBAACsK,GAAA,EAAD,CAAYC,KAAMF,EAAU9V,MAAMiW,EAAAA,GAAAA,IAAcH,OAGpDtC,SAAU0C,QAAQyG,GAAgBA,EAAa/M,MAAK,SAAC6D,GAAD,OAASA,EAAIhI,OAASA,WAG9E,IQsIWiI,CAAWqI,EAAS1Y,GAAMsZ,GA+DvC,OACE,kBAAC,EAAAoB,OAAD,KACE,kBAAC,KAAD,CAAiBC,WAAW,cAAc9J,KAAMjH,GAAAA,EAAAA,4BAAAA,KAA4CkH,OAAQ,SAACzP,GAAD,OAAW,kBAAC,KAASA,MACzH,kBAAC,KAAD,CACEsZ,WAAW,eACX9J,KAAMjH,GAAAA,EAAAA,gBAAAA,KACNkH,OAAQ,SAACzP,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEEuZ,YAAatH,MAAAA,OAAF,EAAEA,EAAalL,KAC1ByN,SAAU,SAACzN,GACT4F,EAAe,IACfuL,EAAgBD,EAAaH,QAAO,SAAC/I,GAAD,OAASA,EAAIhI,MAAQA,aAKjE,kBAAC,KAAD,CAAiBuS,WAAW,aAAa9J,KAAMjH,GAAAA,EAAAA,OAAAA,KAAuBkH,OAAQ,kBA9EhF,kBAAC,EAAA/O,MAAD,CAAOhB,UAAU,iBACf,kBAAC,EAAAkB,UAAD,KACE,kBAAC,KAAD,CAAY4Y,eAAa,GACvB,kBAAC,KAAD,CAAiBpd,MAAOE,EAAKgB,cAAcC,EAAAA,EAAAA,YAG/C,kBAAC,EAAAqD,UAAD,KACE,kBAACuO,GAAA,EAAD,CAAS7T,KAAK,UAAUuC,GAAG,cACzB,kBAAC,KAAD,CACEc,KAAM2C,EACN2M,KAAMA,GACNwL,OAAQ/B,EACRgC,OAAQ,SAACC,EAAG9W,EAAO4U,GACjB,IAAM1T,EAAU,GAAH,OAAoB,SAAd0T,EAAuB,IAAM,IAAnC,OAAwCjK,EAAQ3K,EAAQ2U,OAAOH,IAAUvU,KACtF6U,EAAe,CAAE9U,MAAAA,EAAO4U,UAAAA,IA5Hb,SAAC5D,GACtB,IAAQ/Z,EAAwC+Z,EAAxC/Z,KAAM4P,EAAkCmK,EAAlCnK,MAAOrL,EAA2BwV,EAA3BxV,MAAOC,EAAoBuV,EAApBvV,OAAQyF,EAAY8P,EAAZ9P,SACpC8U,EAAAA,GAAAA,IAAqBhO,EAASxM,EAAOC,IACrCsb,EAAAA,GAAAA,IAAkB/O,EAAS,CAAE/Q,KAAAA,IACtB6T,EAAU,CAAEjE,MAAAA,EAAOrL,MAAAA,EAAOC,OAAAA,EAAQyF,QAAAA,EAASxF,QAAS,CAAEzE,KAAAA,KAyHnD+f,CAAe,SACV/V,GADS,IAEZxF,OAAQ,EACRyF,QAAAA,IACIxF,MAAAA,OAAA,EAAAA,EAASJ,QAAS,EAAlB,MAEKI,EAAQ4P,QACT,SAACC,EAAK0L,GAAN,UAAC,MACI1L,GADL,cAEG0L,EAAKhX,IAAMgX,EAAK9a,UAEnB,KAGJ,CAAElF,KAAM4S,MAGhBc,QAASA,EACT6B,aAAcgI,EACdnJ,YAAa+J,EACb7H,gBAAiBA,EACjBd,OAAQA,EACRK,eAAgBA,EAChBK,YAAa1T,EAAKgB,cAAcC,EAAAA,EAAAA,QAAiBwS,cACjDE,cAAe3T,EAAKgB,cAAcC,EAAAA,EAAAA,OAAgBwS,cAClDhE,OAAO,eACPjI,WAAYA,EACZ4I,YAAaA,EACbiB,UAAW,SAACkG,GACV,IAAQ/Z,EAAwC+Z,EAAxC/Z,KAAM4P,EAAkCmK,EAAlCnK,MAAOrL,EAA2BwV,EAA3BxV,MAAOC,EAAoBuV,EAApBvV,OAAQyF,EAAY8P,EAAZ9P,QAGpC,OAFA8U,EAAAA,GAAAA,IAAqBhO,EAASxM,EAAOC,IACrCsb,EAAAA,GAAAA,IAAkB/O,EAAS,CAAE/Q,KAAAA,IACtB6T,EAAU,CAAEjE,MAAAA,EAAOrL,MAAAA,EAAOC,OAAAA,EAAQyF,QAAAA,EAASxF,QAAS,CAAEzE,KAAAA,MAE/D6S,eAAgB,oBAAG7S,KAAH,OAAmB6S,OAAnB,MAAU,GAAV,IAChB2D,eAAgBA,EAChBxH,WAAYA,GAAgC,KAAnBxH,MAAAA,OAAA,EAAAA,EAAQnD,SAAwC,KAAxBuO,MAAAA,OAAA,EAAAA,EAAavO,SAAsB2K,EACpFgH,kBAAmBxT,EAAKgB,cAAcC,EAAAA,EAAAA,MAAewS,cACrDG,WAAY6J,GAAAA,EACZnJ,QAAQ,SACR0G,cAAeA","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/member/add-group-members.js","webpack:///./src/smart-components/group/member/members.js","webpack:///./src/smart-components/group/member/member-table-helpers.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters, orderBy }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, orderBy, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  orderBy: PropTypes.string,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport { useDispatch } from 'react-redux';\n\nconst EditGroupModal = ({ postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute, group, onClose }) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? dispatch(updateGroup(user_data))\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : dispatch(updateGroup(user_data)).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        dismissDelay: 8000,\n        title: intl.formatMessage(selectedGroup ? messages.editingGroupTitle : messages.addingGroupTitle),\n        description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n      })\n    );\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n};\n\nEditGroupModal.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nexport default EditGroupModal;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({ groupsUuid, isModalOpen, postMethod, pagination, filters, cancelRoute, submitRoute = cancelRoute }) => {\n  const intl = useIntl();\n  const { group, isLoading } = useSelector(\n    ({ groupReducer: { selectedGroup } }) => ({\n      group: selectedGroup,\n      isLoading: !selectedGroup.loaded,\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      dispatch(fetchGroup(groupsUuid[0].uuid));\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    dispatch(removeGroups(uuids))\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  groupsUuid: [],\n  isModalOpen: false,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  groupsUuid: PropTypes.array.isRequired,\n  isModalOpen: PropTypes.bool,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default RemoveGroupModal;\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} state={{ uuid }} to={{ pathname: `/groups/detail/${isPlatformDefault ? 'default-access' : uuid}` }}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport UsersList from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst AddGroupMembers = ({ closeUrl }) => {\n  const { uuid } = useParams();\n  const { push } = useHistory();\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      dispatch(\n        addNotification({\n          variant: 'info',\n          title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n        })\n      );\n      dispatch(addMembersToGroup(uuid, userList)).then(() => {\n        dispatch(fetchMembersForGroup(uuid));\n        dispatch(fetchGroups({ inModal: false }));\n      });\n    }\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n      })\n    );\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  closeUrl: '/groups',\n};\n\nAddGroupMembers.propTypes = {\n  closeUrl: PropTypes.string,\n};\n\nexport default AddGroupMembers;\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './member-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  members: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupMembers = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedMembers, setSelectedMembers] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { members, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedMembers = (newSelection) => {\n    setSelectedMembers((members) => newSelection(members));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedMembers([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, member) => {\n              setConfirmDelete(() => () => removeMembers([member.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(member.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members'].path}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add-members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add-members`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedMembers || !selectedMembers.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedMembers.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedMembers.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(multipleMembersSelected ? selectedMembers.length : selectedMembers[0].uuid, groupName, multipleMembersSelected),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  const data = (members || []).map((user) => ({ ...user, uuid: user.username }));\n  const rows = createRows(data, selectedMembers);\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarView\n            data={data}\n            isSelectable={hasPermissions.current}\n            rows={rows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedMembers}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedMembers}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupMembers;\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport messages from '../../../Messages';\nimport './group-roles.scss';\n\nconst createRows = (groupUuid, data, checkedRows = []) =>\n  data?.reduce(\n    (acc, { uuid, display_name, name, description, modified }) => [\n      ...acc,\n      {\n        uuid,\n        title: display_name || name,\n        cells: [\n          <Fragment key={`${uuid}-name`}>\n            <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n          </Fragment>,\n          description,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  ) || [];\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst reducer = ({ groupReducer: { selectedGroup, systemGroup } }) => ({\n  roles: selectedGroup.roles,\n  pagination: selectedGroup.pagination || { ...defaultSettings, count: selectedGroup?.roles && selectedGroup.roles.length },\n  isLoading: !selectedGroup.loaded,\n  name: selectedGroup.name,\n  isPlatformDefault: selectedGroup.platform_default,\n  isAdminDefault: selectedGroup.admin_default,\n  isChanged: !selectedGroup.system,\n  disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default,\n  systemGroupUuid: systemGroup?.uuid,\n});\n\nconst GroupRoles = ({ onDefaultGroupChanged }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { uuid } = useParams();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n  const { roles, pagination, isLoading, name, isPlatformDefault, isAdminDefault, isChanged, disableAddRoles, systemGroupUuid } = useSelector(reducer);\n\n  const reloadWrapper = (event, callback) => {\n    event.payload.then(callback);\n    return event;\n  };\n\n  const fetchAddGroupRoles = (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {}));\n  const fetchGroupData = (customId) => dispatch(fetchGroup(customId ?? uuid));\n  const fetchSystGroup = () => dispatch(fetchSystemGroup());\n  const removeRoles = (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback));\n  const fetchGroupRoles = (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options));\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    if (uuid !== 'default-access') {\n      fetchGroupRoles(pagination)(uuid);\n    } else {\n      systemGroupUuid && fetchGroupRoles(pagination)(systemGroupUuid);\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    if (roles?.length > 0) {\n      if (uuid !== 'default-access') {\n        fetchAddGroupRoles(uuid);\n      } else {\n        systemGroupUuid && fetchAddGroupRoles(systemGroupUuid);\n      }\n    }\n  }, [roles]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n\n  const removeRolesCallback = () => {\n    if (isPlatformDefault) {\n      fetchSystGroup().then(({ value: { data } }) => {\n        fetchGroupRoles({ ...pagination, offset: 0 })(data[0].uuid);\n      });\n    } else {\n      fetchGroupRoles({ ...pagination, offset: 0 })(uuid);\n    }\n  };\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(fetchUuid, [role.uuid], removeRolesCallback));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles'].path}\n        render={(args) => (\n          <AddGroupRoles\n            afterSubmit={() => {\n              if (isPlatformDefault || isAdminDefault) {\n                fetchSystGroup().then(({ value: { data } }) => {\n                  fetchGroupRoles(pagination)(data[0].uuid);\n                  fetchGroupData(data[0].uuid);\n                });\n              } else {\n                fetchGroupRoles(pagination)(uuid);\n                fetchGroupData();\n              }\n            }}\n            fetchUuid={systemGroupUuid}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${isPlatformDefault ? 'default-access' : uuid}/roles`}\n            addRolesToGroup={(groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback))}\n            groupName={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add-roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => history.push(`/groups/detail/${uuid}/roles/add-roles`),\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    removeRolesCallback\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id=\"tab-roles\">\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          rows={createRows(uuid, roles, selectedRoles)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchGroupRoles(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nGroupRoles.propTypes = {\n  searchFilter: PropTypes.string,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  onDefaultGroupChanged: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default GroupRoles;\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupMembers from './member/members';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  onDelete,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const chrome = useChrome();\n  const isPlatformDefault = uuid === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: intl.formatMessage(messages.roles), name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: intl.formatMessage(messages.members), name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const { group, isFetching } = useSelector(\n    ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n      group: selectedGroup,\n      isFetching: isRecordLoading || isRecordRolesLoading,\n    }),\n    shallowEqual\n  );\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchSystemGroup());\n    const currUuid = !isPlatformDefault ? uuid : systemGroupUuid;\n    if (currUuid) {\n      dispatch(fetchGroup(currUuid));\n      chrome.appObjectId(currUuid);\n    }\n    return () => chrome.appObjectId(undefined);\n  }, [uuid, systemGroupUuid]);\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(pathnames.groups.path, pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).path.replace(\n            ':uuid',\n            isPlatformDefault ? 'default-access' : uuid\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).path.replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          {intl.formatMessage(messages.delete)}\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchUuid = isPlatformDefault ? systemGroupUuid : uuid;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            dispatch(removeGroups([systemGroupUuid])).then(() =>\n              dispatch(fetchSystemGroup()).then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            history.push('/groups/detail/default-access/roles');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'].path, pathnames['group-detail-members-remove'].path]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'].path, pathnames['group-detail-members-edit'].path]}\n            render={(props) => <EditGroup {...props} group={group} cancelRoute={`group/detail/${uuid}`} postMethod={() => fetchGroup(fetchUuid)} />}\n          />\n          <Route\n            path={pathnames['group-detail-roles'].path}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members'].path} component={GroupMembers} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: uuid })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nGroup.propTypes = {\n  match: PropTypes.object,\n  onDelete: PropTypes.func,\n};\n\nexport default Group;\n","import React, { Fragment, useContext, useEffect, useRef, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport {\n  applyPaginationToUrl,\n  defaultAdminSettings,\n  defaultSettings,\n  isPaginationPresentInUrl,\n  syncDefaultPaginationWithUrl,\n} from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n  const textFilterRef = useRef(null);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  // using 'isAdmin' (0 or 1) determines correct index for columns due to 'isSelectable' property on Table component\n  const [sortByState, setSortByState] = useState({ index: Number(isAdmin), direction: 'asc' });\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index - Number(isAdmin)].key}`;\n\n  const { groups, meta, filters, isLoading, systemGroup } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState({ ...(orgAdmin ? defaultAdminSettings : defaultSettings), ...meta });\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, orderBy, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination({ ...pagination, ...meta });\n  }, [filters, meta]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  const fetchTableData = (config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    applyPaginationToUrl(history, limit, offset);\n    applyFiltersToUrl(history, { name });\n    return fetchData({ count, limit, offset, orderBy, filters: { name } });\n  };\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group'].path}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          orderBy={orderBy}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData({ ...config, orderBy });\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group'].path}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData({ ...config, orderBy });\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group'].path} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group'].path);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ]\n      : []),\n  ];\n  const data = groups.map((group) =>\n    group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n  );\n  const rows = createRows(isAdmin, data, selectedRows);\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id=\"tab-groups\">\n          <TableToolbarView\n            data={groups}\n            rows={rows}\n            sortBy={sortByState}\n            onSort={(e, index, direction) => {\n              const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - Number(isAdmin)].key}`;\n              setSortByState({ index, direction });\n              fetchTableData({\n                ...pagination,\n                offset: 0,\n                orderBy,\n                ...(filters?.length > 0\n                  ? {\n                      ...filters.reduce(\n                        (acc, curr) => ({\n                          ...acc,\n                          [curr.key]: curr.value,\n                        }),\n                        {}\n                      ),\n                    }\n                  : { name: filterValue }),\n              });\n            }}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n            textFilterRef={textFilterRef}\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail'].path} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail'].path}\n        render={(props) => (\n          <Group\n            {...props}\n            defaultUuid={systemGroup?.uuid}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups.path} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","PropTypes","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","useContext","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","propTypes","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","intl","useIntl","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","formatMessage","messages","number","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","length","fetchGroups","limit","offset","filters","nameMatch","console","response","data","some","item","debouncedAsyncValidator","asyncDebounce","value","ReviewTemplate","formFields","AddGroupWizardContext","getState","useEffect","values","then","Bullseye","Spinner","className","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","props","input","useFieldApi","description","useState","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","label","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","SetRoles","selectedRoles","setSelectedRoles","TextContent","Text","fieldId","rolesExcluded","SetUsers","selectedUsers","setSelectedUsers","Form","linkDescription","Card","inModal","SummaryContent","Grid","GridItem","md","component","TextVariants","map","role","index","key","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","Object","keys","AddGroupWizard","postMethod","pagination","orderBy","dispatch","useDispatch","schema","useRef","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","push","useHistory","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","addNotification","dismissDelay","pathname","paths","search","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","current","subscription","componentMapper","onSubmit","user_list","user","username","roles_list","uuid","addGroup","initialValues","EditGroupModal","cancelRoute","submitRoute","group","onClose","selectedGroup","setSelectedGroup","match","useRouteMatch","fetchGroup","params","payload","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","updateGroup","ModalFormTemplate","ModalProps","defaultProps","pathnames","hash","RemoveGroupModal","groupsUuid","isModalOpen","useSelector","groupReducer","isLoading","loaded","shallowEqual","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","removeGroups","b","count","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","classNames","AppTabs","history","location","tabItems","isHeader","activeTab","find","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","AddGroupMembers","closeUrl","useParams","ouiaId","userList","addMembersToGroup","fetchMembersForGroup","selector","members","meta","admin_default","platform_default","removeModalText","plural","filterValue","setFilterValue","selectedMembers","setSelectedMembers","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","PermissionsContext","userAccessAdministrator","orgAdmin","hasPermissions","columns","transforms","nowrap","fetchData","usernames","options","removeMembers","userNames","removeMembersFromGroup","rows","checkedRows","reduce","acc","isActive","is_active","email","firstName","first_name","lastName","last_name","cells","Label","selected","row","createRows","RemoveModal","confirmButtonLabel","Section","CardBody","isSelectable","routes","Route","path","render","args","actionResolver","_rowId","member","filterPlaceholder","toLowerCase","titlePlural","titleSingular","rowWrapper","UsersRow","setCheckedItems","newSelection","toolbarButtons","Link","to","multipleMembersSelected","removeText","emptyProps","tableId","RemoveRoles","isDefault","isChanged","showConfirmModal","setShowConfirmModal","groupUuid","display_name","modified","DateFormat","date","getDateFormat","Boolean","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","reducer","systemGroup","roles","defaultSettings","isPlatformDefault","isAdminDefault","system","disableAddRoles","addRoles","systemGroupUuid","GroupRoles","onDefaultGroupChanged","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","reloadWrapper","event","callback","fetchAddGroupRoles","groupId","fetchAddRolesForGroup","fetchGroupData","customId","fetchSystGroup","fetchSystemGroup","removeRoles","removeRolesFromGroup","fetchGroupRoles","config","fetchRolesForGroup","fetchUuid","removeRolesCallback","emptyFilters","multipleRolesSelected","afterSubmit","addRolesToGroup","searchFilter","defaultCompactSettings","Group","onDelete","useLocation","chrome","useChrome","groupExists","BAD_UUID","isRecordLoading","isRecordRolesLoading","isFetching","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","currUuid","appObjectId","breadcrumbsList","getBackRoute","dropdownItems","DropdownItem","replace","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupMembers","Redirect","goBack","isAdmin","textFilterRef","sortable","Number","direction","sortByState","setSortByState","adminGroup","RegExp","filter","defaultAdminSettings","setPagination","selectedRows","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","syncDefaultPaginationWithUrl","syncDefaultFiltersWithUrl","insights","appNavClick","secondaryNav","fetchAdminGroup","isPaginationPresentInUrl","applyPaginationToUrl","areFiltersPresentInUrl","redirected","exact","ids","principalCount","roleCount","state","Switch","pageAction","defaultUuid","paddingBottom","sortBy","onSort","e","applyFiltersToUrl","fetchTableData","curr","GroupRowWrapper"],"sourceRoot":""}