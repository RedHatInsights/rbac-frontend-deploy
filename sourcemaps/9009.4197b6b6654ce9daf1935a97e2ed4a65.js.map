{"version":3,"file":"js/9009.62be5ae63ce5a2ac1595.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/deprecated/components/Dropdown/dropdownConstants.js","webpack:///./src/smart-components/group/add-group/service-accounts-list.tsx","webpack:///./src/redux/actions/service-account-actions.ts","webpack:///./src/smart-components/group/service-account/add-group-service-accounts.tsx"],"sourcesContent":["import * as React from 'react';\nexport var DropdownPosition;\n(function (DropdownPosition) {\n    DropdownPosition[\"right\"] = \"right\";\n    DropdownPosition[\"left\"] = \"left\";\n})(DropdownPosition || (DropdownPosition = {}));\nexport var DropdownDirection;\n(function (DropdownDirection) {\n    DropdownDirection[\"up\"] = \"up\";\n    DropdownDirection[\"down\"] = \"down\";\n})(DropdownDirection || (DropdownDirection = {}));\nexport const DropdownContext = React.createContext({\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onSelect: (event) => undefined,\n    id: '',\n    toggleIndicatorClass: '',\n    toggleIconClass: '',\n    toggleTextClass: '',\n    menuClass: '',\n    itemClass: '',\n    toggleClass: '',\n    baseClass: '',\n    baseComponent: 'div',\n    sectionClass: '',\n    sectionTitleClass: '',\n    sectionComponent: 'section',\n    disabledClass: '',\n    plainTextClass: '',\n    menuComponent: 'ul'\n});\nexport const DropdownArrowContext = React.createContext({\n    keyHandler: null,\n    sendRef: null\n});\n//# sourceMappingURL=dropdownConstants.js.map","import React, { Dispatch, Fragment, SetStateAction, useCallback, useEffect } from 'react';\nimport { ServiceAccountsState } from '../../../redux/reducers/service-account-reducer';\nimport { LAST_PAGE, ServiceAccount } from '../../../helpers/service-account/service-account-helper';\nimport { useIntl } from 'react-intl';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchServiceAccounts } from '../../../redux/actions/service-account-actions';\nimport { PaginationProps } from '../service-account/add-group-service-accounts';\nimport messages from '../../../Messages';\nimport './service-accounts-list.scss';\n\ninterface ServiceAccountsListProps {\n  selected: ServiceAccount[];\n  setSelected: Dispatch<SetStateAction<ServiceAccount[]>>;\n}\n\nconst reducer = ({ serviceAccountReducer }: { serviceAccountReducer: ServiceAccountsState }) => ({\n  serviceAccounts: serviceAccountReducer.serviceAccounts,\n  status: serviceAccountReducer.status,\n  isLoading: serviceAccountReducer.isLoading,\n  limit: serviceAccountReducer.limit,\n  offset: serviceAccountReducer.offset,\n});\n\nconst createRows = (data: ServiceAccount[], checkedRows: ServiceAccount[]) =>\n  data?.reduce(\n    (acc: unknown[], curr: ServiceAccount) => [\n      ...acc,\n      {\n        uuid: curr.uuid,\n        title: curr.name,\n        cells: [\n          curr.name,\n          curr.description,\n          curr.clientId,\n          curr.createdBy,\n          <Fragment key={`${curr.name}-modified`}>\n            <DateFormat date={curr.createdAt} type={getDateFormat(curr.createdAt)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row: ServiceAccount) => row.uuid === curr.uuid)),\n      },\n    ],\n    []\n  );\n\nexport const ServiceAccountsList: React.FunctionComponent<ServiceAccountsListProps> = ({ selected, setSelected }) => {\n  const { auth, getEnvironmentDetails } = useChrome();\n  const { serviceAccounts, status, limit, offset, isLoading } = useSelector(reducer);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const fetchAccounts = useCallback(\n    async (props?: PaginationProps) => {\n      const env = getEnvironmentDetails();\n      const token = await auth.getToken();\n      dispatch(fetchServiceAccounts({ limit: props?.limit ?? limit, offset: props?.offset ?? offset, token, sso: env?.sso }));\n    },\n    [limit, offset]\n  );\n\n  useEffect(() => {\n    fetchAccounts({ limit, offset: 0 });\n  }, []);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description), orderBy: 'description' },\n    { title: intl.formatMessage(messages.clientId), orderBy: 'clientId' },\n    { title: intl.formatMessage(messages.owner), orderBy: 'owner' },\n    { title: intl.formatMessage(messages.timeCreated), orderBy: 'timeCreated' },\n  ];\n\n  return (\n    <TableToolbarView\n      className=\"rbac-service-accounts-list\"\n      columns={columns}\n      isSelectable\n      rows={createRows(serviceAccounts, selected)}\n      data={serviceAccounts}\n      fetchData={fetchAccounts}\n      isLoading={isLoading}\n      pagination={{\n        limit,\n        offset,\n        ...(status === LAST_PAGE ? { count: offset + serviceAccounts.length } : {}),\n      }}\n      paginationProps={{\n        toggleTemplate: ({ firstIndex, lastIndex }) => (\n          <>\n            <b>\n              {firstIndex} - {lastIndex}\n            </b>{' '}\n            of <b>{status === LAST_PAGE ? offset + serviceAccounts.length : 'many'}</b>\n          </>\n        ),\n        isCompact: true,\n      }}\n      checkedRows={selected}\n      setCheckedItems={setSelected}\n      titlePlural={intl.formatMessage(messages.serviceAccounts).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.serviceAccount)}\n      emptyProps={{\n        title: intl.formatMessage(messages.noServiceAccountsFound),\n        description: [intl.formatMessage(messages.contactServiceTeamForAccounts), ''],\n      }}\n      tableId=\"group-add-accounts\"\n      ouiaId=\"group-add-accounts\"\n    />\n  );\n};\n\nexport default ServiceAccountsList;\n","import * as ActionTypes from '../action-types';\nimport * as ServiceAccountsHelper from '../../helpers/service-account/service-account-helper';\n\nexport const fetchServiceAccounts = (apiProps: Record<string, unknown>) => ({\n  type: ActionTypes.FETCH_SERVICE_ACCOUNTS,\n  payload: ServiceAccountsHelper.getServiceAccounts(apiProps),\n  meta: apiProps,\n});\n","import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert, Button, Modal, ModalVariant, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport { ServiceAccount } from '../../../helpers/service-account/service-account-helper';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport { ServiceAccountsList } from '../add-group/service-accounts-list';\nimport { ServiceAccountsState } from '../../../redux/reducers/service-account-reducer';\nimport { DEFAULT_ACCESS_GROUP_ID } from '../../../utilities/constants';\nimport { addServiceAccountsToGroup } from '../../../redux/actions/group-actions';\nimport messages from '../../../Messages';\nimport './group-service-accounts.scss';\n\ninterface AddGroupServiceAccountsProps {\n  postMethod: (promise?: Promise<unknown>) => void;\n}\n\nexport interface PaginationProps {\n  count?: number;\n  limit: number;\n  offset: number;\n}\n\nconst reducer = ({\n  serviceAccountReducer,\n  groupReducer: { systemGroup },\n}: {\n  serviceAccountReducer: ServiceAccountsState;\n  groupReducer: { systemGroup?: { uuid: string } };\n}) => ({\n  serviceAccounts: serviceAccountReducer.serviceAccounts,\n  status: serviceAccountReducer.status,\n  isLoading: serviceAccountReducer.isLoading,\n  limit: serviceAccountReducer.limit,\n  offset: serviceAccountReducer.offset,\n  systemGroupUuid: systemGroup?.uuid,\n});\n\nconst AddGroupServiceAccounts: React.FunctionComponent<AddGroupServiceAccountsProps> = ({ postMethod }: AddGroupServiceAccountsProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { groupId } = useParams();\n  const [selectedAccounts, setSelectedAccounts] = useState<ServiceAccount[]>([]);\n  const { systemGroupUuid } = useSelector(reducer);\n\n  const onCancel = () => {\n    postMethod();\n  };\n\n  const onSubmit = () => {\n    const action = addServiceAccountsToGroup(groupId === DEFAULT_ACCESS_GROUP_ID ? systemGroupUuid : groupId, selectedAccounts);\n    dispatch(action);\n    postMethod(action.payload);\n  };\n\n  return (\n    <Modal\n      isOpen\n      className=\"rbac\"\n      variant={ModalVariant.medium}\n      title={intl.formatMessage(messages.addServiceAccount)}\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedAccounts.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            {intl.formatMessage(messages.addServiceAccountsToGroupDescription)}\n            <Alert\n              className=\"pf-v5-u-mt-sm rbac-service-accounts-alert\"\n              variant=\"info\"\n              component=\"span\"\n              isInline\n              isPlain\n              title={intl.formatMessage(messages.visitServiceAccountsPage, {\n                link: (\n                  <AppLink to=\"/service-accounts\" linkBasename=\"/iam\">\n                    {intl.formatMessage(messages.serviceAccountsPage)}\n                  </AppLink>\n                ),\n              })}\n            />\n          </TextContent>\n        </StackItem>\n        <StackItem className=\"rbac-add-service-account-modal\">\n          <ServiceAccountsList selected={selectedAccounts} setSelected={setSelectedAccounts} />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nexport default AddGroupServiceAccounts;\n"],"names":["DropdownPosition","DropdownDirection","DropdownContext","onSelect","event","id","toggleIndicatorClass","toggleIconClass","toggleTextClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","menuComponent","DropdownArrowContext","keyHandler","sendRef","reducer","serviceAccountReducer","serviceAccounts","status","isLoading","limit","offset","ServiceAccountsList","selected","setSelected","auth","getEnvironmentDetails","useChrome","useSelector","dispatch","useDispatch","intl","fetchAccounts","useCallback","async","props","env","token","getToken","apiProps","sso","type","payload","meta","useEffect","columns","title","formatMessage","name","orderBy","description","clientId","owner","timeCreated","className","isSelectable","rows","data","checkedRows","reduce","acc","curr","uuid","cells","createdBy","Fragment","key","DateFormat","date","createdAt","Boolean","find","row","fetchData","pagination","count","length","paginationProps","toggleTemplate","firstIndex","lastIndex","isCompact","setCheckedItems","titlePlural","toLowerCase","titleSingular","serviceAccount","emptyProps","noServiceAccountsFound","contactServiceTeamForAccounts","tableId","ouiaId","groupReducer","systemGroup","systemGroupUuid","postMethod","groupId","useParams","selectedAccounts","setSelectedAccounts","useState","onCancel","Modal","isOpen","variant","ModalVariant","medium","addServiceAccount","actions","Button","isDisabled","onClick","action","addToGroup","cancel","onClose","Stack","hasGutter","StackItem","TextContent","addServiceAccountsToGroupDescription","Alert","component","isInline","isPlain","visitServiceAccountsPage","link","to","linkBasename","serviceAccountsPage"],"sourceRoot":""}