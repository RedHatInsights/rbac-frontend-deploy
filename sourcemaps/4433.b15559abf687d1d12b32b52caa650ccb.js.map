{"version":3,"file":"js/4433.edf2bd832941580d3442.js","mappings":"wIAGA,MAQA,EARwBA,IACtB,MAAMC,GAAW,IAAAC,eAEjB,MAAO,CAACC,EAAIC,IACHH,GAAS,OAAgBE,EAAIH,GAAeI,EACpD,C,wOCKH,MAAMC,EAAmB,EAAGC,aAAYC,aAAYC,cAAaC,cAAcD,MAC7E,MAAME,GAAO,UACPC,GAAW,IAAAC,eACXX,GAAW,UACX,QAAEY,IAAY,IAAAC,aACdC,EAAiBF,EAAQG,MAAM,KAC/BC,EAAiBF,EAAeG,OAAS,GAEzC,MAAEC,EAAK,UAAEC,IAAc,IAAAC,cAC3B,EAAGC,cAAgBC,qBAAsB,CACvCJ,MAAOI,EACPH,WAAYP,GAAqC,IAA1BE,EAAeG,UAAkBK,EAAcC,UAExE,EAAAC,eAGF,IAAAC,YAAU,KACkB,IAA1BX,EAAeG,QAAgBP,GAAS,QAAWI,EAAe,IAAI,GACrE,IAEH,MAAOY,EAASC,IAAc,IAAAC,WAAS,GAQjCC,EAAW,IAAM7B,EAASO,GAEhC,OACE,kBAAC,EAAAuB,MAAK,CACJC,UAAU,OACVC,QAAM,EACNC,QAAS,EAAAC,aAAaC,MACtBC,MACE,kBAAC,EAAAC,KAAI,KACH,kBAAC,IAAuB,CAACN,UAAU,8B,KAC3BtB,EAAK6B,cAActB,EAAiB,IAASuB,qBAAuB,IAASC,sBAGzFC,QAASZ,EACTa,QAAS,CACP,kBAAC,EAAAC,OAAM,CAACC,IAAI,SAASC,YAAanB,EAASO,QAAQ,SAASa,KAAK,SAASC,QArB/D,KACfrC,GAAS,QAAaI,IACnBkC,MAAK,IAAM3C,EAAWS,EAAgB,CAAEmC,MAAO3C,GAAY2C,UAC3DD,KAAKhD,EAASQ,GAAa,GAmBvBC,EAAK6B,cAActB,EAAiB,IAASkC,aAAe,IAASC,cAExE,kBAAC,EAAAR,OAAM,CAACC,IAAI,SAASX,QAAQ,OAAOa,KAAK,SAASC,QAASlB,GACxDpB,EAAK6B,cAAc,IAASc,WAIjC,kBAAC,EAAAC,YAAW,KACTrC,EACC,kBAAC,EAAAqB,KAAI,KACH,kBAAC,KAAgB,IACX,IAASiB,2BACbC,OAAQ,CACNC,EAAIC,GAAS,2BAAIA,GACjBC,MAAO5C,EAAeG,WAI1BE,EACF,kBAAC,KAAc,MAEf,kBAAC,EAAAkB,KAAI,KACH,kBAAC,KAAgB,IACX,IAASsB,0BACbJ,OAAQ,CACNC,EAAIC,GAAS,2BAAIA,GACjBG,KAAM1C,EAAM0C,U,IAOtB,kBAAC,EAAAC,SAAQ,CACPC,UAAWpC,EACXqC,SAAU,IAAMpC,GAAYD,GAC5BsC,MAAOvD,EAAK6B,cAAc,IAAS2B,8BACnCC,GAAG,uBAGR,EAGH9D,EAAiB+D,UAAY,CAC3B9D,WAAY,SACZC,WAAY,UAAgB,CAC1B2C,MAAO,WAAiBmB,aACvBA,WACHC,QAAS,WAAiBD,WAC1B7D,YAAa,cAAoB,CAC/B,WACA,UAAgB,CACd+D,SAAU,WAAiBF,WAC3BG,OAAQ,WACRC,KAAM,eAGVhE,YAAa,cAAoB,CAC/B,WACA,UAAgB,CACd8D,SAAU,WAAiBF,WAC3BG,OAAQ,WACRC,KAAM,gBAKZ,S","sources":["webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/smart-components/group/remove-group-modal.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport useAppNavigate from '../../hooks/useAppNavigate';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({ postMethod, pagination, cancelRoute, submitRoute = cancelRoute }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const groupsToRemove = groupId.split(',');\n  const multipleGroups = groupsToRemove.length > 1;\n\n  const { group, isLoading } = useSelector(\n    ({ groupReducer: { selectedGroup } }) => ({\n      group: selectedGroup,\n      isLoading: (groupId || groupsToRemove.length === 1) && !selectedGroup.loaded,\n    }),\n    shallowEqual\n  );\n\n  useEffect(() => {\n    groupsToRemove.length === 1 && dispatch(fetchGroup(groupsToRemove[0]));\n  }, []);\n\n  const [checked, setChecked] = useState(false);\n\n  const onSubmit = () => {\n    dispatch(removeGroups(groupsToRemove))\n      .then(() => postMethod(groupsToRemove, { limit: pagination?.limit }))\n      .then(navigate(submitRoute));\n  };\n\n  const onCancel = () => navigate(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsToRemove.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default RemoveGroupModal;\n"],"names":["linkBasename","navigate","useNavigate","to","options","RemoveGroupModal","postMethod","pagination","cancelRoute","submitRoute","intl","dispatch","useDispatch","groupId","useParams","groupsToRemove","split","multipleGroups","length","group","isLoading","useSelector","groupReducer","selectedGroup","loaded","shallowEqual","useEffect","checked","setChecked","useState","onCancel","Modal","className","isOpen","variant","ModalVariant","small","title","Text","formatMessage","deleteGroupsQuestion","deleteGroupQuestion","onClose","actions","Button","key","isDisabled","type","onClick","then","limit","deleteGroups","deleteGroup","cancel","TextContent","deletingGroupsRemovesRoles","values","b","text","count","deletingGroupRemovesRoles","name","Checkbox","isChecked","onChange","label","understandActionIrreversible","id","propTypes","isRequired","filters","pathname","search","hash"],"sourceRoot":""}