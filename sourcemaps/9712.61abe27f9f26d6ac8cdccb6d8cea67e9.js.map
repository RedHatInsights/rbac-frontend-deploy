{"version":3,"file":"js/9712.eb867b5ec0a0156886fb.js","mappings":"yLAEO,MAAMA,EAA4B,CACvCC,KAAM,sBACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,0VACTC,QAAS,EACTC,QAAS,GAGEC,GAAsB,QAAWP,GAE9C,K,wOCEMQ,EAAkB,SAAC,GAAoB,IAAlBC,EAAkB,EAAlBA,YACnBC,GAASC,EAAAA,EAAAA,KACTC,GAAOC,EAAAA,EAAAA,KACPC,GAAWC,EAAAA,EAAAA,KACTC,GAAYC,EAAAA,EAAAA,aAAZD,QACFE,GAAWC,EAAAA,EAAAA,eAEjB,GAA0CC,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KAqBMC,EAAW,WACfL,GACEM,EAAAA,EAAAA,iBAAgB,CACdC,QAAS,UACTC,MAAOd,EAAKe,cAAcN,EAAcO,OAAS,EAAIC,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACxFC,aAAc,IACdC,YAAanB,EAAKe,cAAcN,EAAcO,OAAS,EAAIC,EAAAA,EAAAA,4BAAuCA,EAAAA,EAAAA,+BAGtGf,EAASL,IAGX,OACE,kBAAC,EAAAuB,MAAD,CACEN,MAAOd,EAAKe,cAAcE,EAAAA,EAAAA,YAC1BJ,QAASQ,EAAAA,aAAAA,OACTC,QAAM,EACNC,QAAS,CACP,kBAAC,EAAAC,OAAD,CAAQC,IAAI,UAAUC,OAAO,yBAAyBC,WAAqC,IAAzBlB,EAAcO,OAAcH,QAAQ,UAAUe,QArCrG,WACf,IAAMC,EAAWpB,EAAcqB,KAAI,SAACC,GAAD,MAAW,CAAEC,SAAUD,EAAKE,UAC3DJ,EAASb,OAAS,IACpBV,GACEM,EAAAA,EAAAA,iBAAgB,CACdC,QAAS,OACTC,MAAOd,EAAKe,cAAcc,EAASb,OAAS,EAAIC,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACnFC,aAAc,IACdC,YAAanB,EAAKe,cAAcc,EAASb,OAAS,EAAIC,EAAAA,EAAAA,8BAAyCA,EAAAA,EAAAA,iCAGnGX,GAAS4B,EAAAA,EAAAA,IAAkB9B,EAASyB,IAAWM,MAAK,WAClD7B,GAAS8B,EAAAA,EAAAA,IAAqBhC,IAC9BE,GAAS+B,EAAAA,EAAAA,IAAY,CAAEC,eAAe,EAAMxC,OAAAA,SAGhDI,EAASL,KAsBFG,EAAKe,cAAcE,EAAAA,EAAAA,aAEtB,kBAAC,EAAAO,OAAD,CAAQe,GAAG,oBAAoBb,OAAO,0BAA0BD,IAAI,SAASZ,QAAQ,OAAOe,QAASjB,GAClGX,EAAKe,cAAcE,EAAAA,EAAAA,UAGxBuB,QAAS7B,GAET,kBAAC,EAAA8B,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAC,YAAD,KACE,kBAAC,IAAD,CAAYC,gBAAiB7C,EAAKe,cAAcE,EAAAA,EAAAA,uBAGpD,kBAAC,EAAA0B,UAAD,KACE,kBAAC,IAAD,CAAWlC,cAAeA,EAAeC,iBAAkBA,EAAkBoC,eAAa,QAOpGlD,EAAgBmD,aAAe,CAC7BlD,YAAamD,EAAAA,EAAAA,OAAAA,MAGfpD,EAAgBqD,UAAY,CAC1BpD,YAAaqD,IAAAA,QAGf","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/external-link-alt-icon.js","webpack:///./src/smart-components/group/member/add-group-members.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const ExternalLinkAltIconConfig = {\n  name: 'ExternalLinkAltIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M432,320H400a16,16,0,0,0-16,16V448H64V128H208a16,16,0,0,0,16-16V80a16,16,0,0,0-16-16H48A48,48,0,0,0,0,112V464a48,48,0,0,0,48,48H400a48,48,0,0,0,48-48V336A16,16,0,0,0,432,320ZM488,0h-128c-21.37,0-32.05,25.91-17,41l35.73,35.73L135,320.37a24,24,0,0,0,0,34L157.67,377a24,24,0,0,0,34,0L435.28,133.32,471,169c15,15,41,4.5,41-17V24A24,24,0,0,0,488,0Z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const ExternalLinkAltIcon = createIcon(ExternalLinkAltIconConfig);\n\nexport default ExternalLinkAltIcon;","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport UsersList from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport messages from '../../../Messages';\nimport pathnames from '../../../utilities/pathnames';\n\nconst AddGroupMembers = ({ cancelRoute }) => {\n  const chrome = useChrome();\n  const intl = useIntl();\n  const navigate = useAppNavigate();\n  const { groupId } = useParams();\n  const dispatch = useDispatch();\n\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      dispatch(\n        addNotification({\n          variant: 'info',\n          title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n          dismissDelay: 8000,\n          description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n        })\n      );\n      dispatch(addMembersToGroup(groupId, userList)).then(() => {\n        dispatch(fetchMembersForGroup(groupId));\n        dispatch(fetchGroups({ usesMetaInURL: true, chrome }));\n      });\n    }\n    navigate(cancelRoute);\n  };\n\n  const onCancel = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n      })\n    );\n    navigate(cancelRoute);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} displayNarrow />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  cancelRoute: pathnames.groups.link,\n};\n\nAddGroupMembers.propTypes = {\n  cancelRoute: PropTypes.string,\n};\n\nexport default AddGroupMembers;\n"],"names":["ExternalLinkAltIconConfig","name","height","width","svgPath","yOffset","xOffset","ExternalLinkAltIcon","AddGroupMembers","cancelRoute","chrome","useChrome","intl","useIntl","navigate","useAppNavigate","groupId","useParams","dispatch","useDispatch","useState","selectedUsers","setSelectedUsers","onCancel","addNotification","variant","title","formatMessage","length","messages","dismissDelay","description","Modal","ModalVariant","isOpen","actions","Button","key","ouiaId","isDisabled","onClick","userList","map","user","username","label","addMembersToGroup","then","fetchMembersForGroup","fetchGroups","usesMetaInURL","id","onClose","Stack","hasGutter","StackItem","TextContent","linkDescription","displayNarrow","defaultProps","pathnames","propTypes","PropTypes"],"sourceRoot":""}