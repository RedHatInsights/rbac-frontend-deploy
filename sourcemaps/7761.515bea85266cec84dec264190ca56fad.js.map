{"version":3,"file":"js/7761.2e41ee79cc96fb6ec83f.js","mappings":"0PAOaA,EAAS,KAgBtB,QAdsB,kBACpB,kBAAC,IAAD,CAAcA,OAAQA,EAAQC,SAAUA,EAASD,IAC/C,kBAAC,aAAD,CACEE,MAAO,CACLC,YAAa,kBAAMC,EAAAA,KAGrB,kBAAC,EAAAC,SAAD,CAAUC,MAAOF,EAAAA,EAAAA,YACf,kBAAC,IAAD,W,8OCCKG,GAAkBC,EAAAA,EAAAA,eAAc,CAC3CL,YAAa,eAGTM,EAAc,CAClBC,EAAAA,EACAC,KACAC,EAAAA,EAAAA,SAAwB,CACtBC,cAAe,CAAC,aAAc,UAAW,oBACzCC,oBAAqB,CAAC,mBAAoB,SAAU,WAEtDC,KACAC,QAAO,SAACC,GAAD,MAAsC,mBAAfA,KAE1Bb,EAAW,IAAIc,EAAAA,GAAgB,GAAIT,GAEzCL,EAASe,SAAS,CAChBC,aAAaC,EAAAA,EAAAA,IAAiBD,EAAAA,EAAaE,EAAAA,GAC3CC,cAAcF,EAAAA,EAAAA,IAAiBE,EAAAA,EAAcC,EAAAA,GAC7CC,eAAeJ,EAAAA,EAAAA,IAAiBI,EAAAA,EAAeC,EAAAA,GAC/CC,aAAaN,EAAAA,EAAAA,IAAiBM,EAAAA,EAAaC,EAAAA,GAC3CC,eAAeR,EAAAA,EAAAA,IAAiBQ,EAAAA,EAAeC,EAAAA,GAC/CC,mBAAmBV,EAAAA,EAAAA,IAAiBU,EAAAA,EAAmBC,EAAAA,GACvDC,kBAAkBZ,EAAAA,EAAAA,IAAiBY,EAAAA,EAAkBC,EAAAA,GACrDC,aAAad,EAAAA,EAAAA,IAAiBc,EAAAA,EAAaC,EAAAA,GAC3CC,cAAchB,EAAAA,EAAAA,IAAiBgB,EAAAA,GAC/BC,cAAeC,EAAAA,KAGjB,W,mUC1CA,E,QAAA,GAAS","sources":["webpack:///./src/entries/IamUserAccess.js","webpack:///./src/utilities/store.js","webpack:///./node_modules/react-redux/es/index.js"],"sourcesContent":["import React from 'react';\nimport { Provider } from 'react-redux';\nimport registry, { RegistryContext } from '../utilities/store';\nimport App from '../App';\nimport { IntlProvider } from 'react-intl';\nimport messages from '../locales/data.json';\n\nexport const locale = 'en';\n\nconst IamUserAccess = () => (\n  <IntlProvider locale={locale} messages={messages[locale]}>\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <App />\n      </Provider>\n    </RegistryContext.Provider>\n  </IntlProvider>\n);\n\nexport default IamUserAccess;\n","import { createContext } from 'react';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry, { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nimport reduxLogger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport userReducer, { usersInitialState } from '../redux/reducers/user-reducer';\nimport groupReducer, { groupsInitialState } from '../redux/reducers/group-reducer';\nimport policyReducer, { policiesInitialState } from '../redux/reducers/policy-reducer';\nimport roleReducer, { rolesInitialState } from '../redux/reducers/role-reducer';\nimport accessReducer, { accessInitialState } from '../redux/reducers/access-reducer';\nimport permissionReducer, { permissionInitialState } from '../redux/reducers/permission-reducer';\nimport costReducer, { costInitialState } from '../redux/reducers/cost-reducer';\nimport errorReducer from '../redux/reducers/errorReducer';\nimport inventoryReducer, { inventoryGroupsInitialState } from '../redux/reducers/inventory-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst middlewares = [\n  thunk,\n  promiseMiddleware,\n  notificationsMiddleware({\n    errorTitleKey: ['statusText', 'message', 'errors[0].status'],\n    errorDescriptionKey: ['errors[0].detail', 'errors', 'stack'],\n  }),\n  reduxLogger,\n].filter((middleware) => typeof middleware === 'function');\n\nconst registry = new ReducerRegistry({}, middlewares);\n\nregistry.register({\n  userReducer: applyReducerHash(userReducer, usersInitialState),\n  groupReducer: applyReducerHash(groupReducer, groupsInitialState),\n  policyReducer: applyReducerHash(policyReducer, policiesInitialState),\n  roleReducer: applyReducerHash(roleReducer, rolesInitialState),\n  accessReducer: applyReducerHash(accessReducer, accessInitialState),\n  permissionReducer: applyReducerHash(permissionReducer, permissionInitialState),\n  inventoryReducer: applyReducerHash(inventoryReducer, inventoryGroupsInitialState),\n  costReducer: applyReducerHash(costReducer, costInitialState),\n  errorReducer: applyReducerHash(errorReducer),\n  notifications: notificationsReducer,\n});\n\nexport default registry;\n","export * from './exports';\nimport { unstable_batchedUpdates as batch } from './utils/reactBatchedUpdates';\nimport { setBatch } from './utils/batch'; // Enable batched updates in our subscriptions for use\n// with standard React renderers (ReactDOM, React Native)\n\nsetBatch(batch);\nexport { batch };"],"names":["locale","messages","value","getRegistry","registry","Provider","store","RegistryContext","createContext","middlewares","thunk","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","reduxLogger","filter","middleware","ReducerRegistry","register","userReducer","applyReducerHash","usersInitialState","groupReducer","groupsInitialState","policyReducer","policiesInitialState","roleReducer","rolesInitialState","accessReducer","accessInitialState","permissionReducer","permissionInitialState","inventoryReducer","inventoryGroupsInitialState","costReducer","costInitialState","errorReducer","notifications","notificationsReducer"],"sourceRoot":""}