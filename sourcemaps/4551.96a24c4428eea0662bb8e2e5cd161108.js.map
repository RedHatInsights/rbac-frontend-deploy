{"version":3,"file":"js/4551.1656925394044.9b9a9b98157c8c9bfa57.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd() ? '' : `${env}.`;\n  const description = 'These are all of the users in your Red Hat organization. ';\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {description}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {description}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst WizardError = ({ context, title, text }) => {\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        Return to Step 1\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Label } from '@patternfly/react-core';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultCompactSettings,\n  defaultSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\n\nconst columns = [\n  { title: 'Org. Administrator', key: 'org-admin', transforms: [nowrap] },\n  { title: 'Username', key: 'username', transforms: [sortable] },\n  { title: 'Email' },\n  { title: 'First name', transforms: [nowrap] },\n  { title: 'Last name', transforms: [nowrap] },\n  { title: 'Status', transforms: [nowrap] },\n];\n\nconst createRows =\n  (userLinks) =>\n  (data, _expanded, checkedRows = []) => {\n    return data\n      ? data.reduce(\n          (acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => [\n            ...acc,\n            {\n              uuid: username,\n              cells: [\n                isOrgAdmin ? (\n                  <Fragment>\n                    <span>\n                      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n                      <span key=\"yes\">Yes</span>\n                    </span>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n                    <span key=\"no\">No</span>\n                  </Fragment>\n                ),\n                { title: userLinks ? <Link to={`/users/detail/${username}`}>{username.toString()}</Link> : username.toString() },\n                email.toString(),\n                firstName.toString(),\n                lastName.toString(),\n                {\n                  title: (\n                    <Label key=\"status\" color={isActive && 'green'}>\n                      {isActive ? 'Active' : 'Inactive'}\n                    </Label>\n                  ),\n                  props: {\n                    'data-is-active': isActive,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === username)),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\nconst UsersList = ({ users, fetchUsers, updateUsersFilters, isLoading, pagination, selectedUsers, setSelectedUsers, userLinks, inModal, props }) => {\n  const defaultPagination = useSelector(({ userReducer: { users } }) => ({\n    limit: inModal ? users.meta.limit : users.pagination.limit || defaultSettings.limit,\n    offset: inModal ? users.meta.offset : users.pagination.offset || defaultSettings.offset,\n    count: inModal ? users.meta.count : users.pagination.count,\n    redirected: !inModal && users.pagination.redirected,\n  }));\n\n  const history = useHistory();\n\n  let stateFilters = useSelector(\n    ({\n      userReducer: {\n        users: { filters },\n      },\n    }) => (history.location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] })\n  );\n\n  const [filters, setFilters] = useState(\n    inModal\n      ? {\n          username: '',\n          email: '',\n          status: ['Active'],\n        }\n      : stateFilters\n  );\n\n  useEffect(() => {\n    inModal || (defaultPagination.redirected && applyPaginationToUrl(history, defaultPagination.limit, defaultPagination.offset));\n  }, [defaultPagination.redirected]);\n\n  useEffect(() => {\n    const pagination = inModal ? defaultSettings : syncDefaultPaginationWithUrl(history, defaultPagination);\n    const newFilters = inModal ? { status: filters.status } : syncDefaultFiltersWithUrl(history, ['username', 'email', 'status'], filters);\n    setFilters(newFilters);\n    fetchUsers({ ...mappedProps({ ...pagination, filters: newFilters }), inModal });\n  }, []);\n\n  useEffect(() => {\n    if (!inModal) {\n      isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(history, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(history, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    inModal || updateUsersFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n\n  return (\n    <TableToolbarView\n      columns={columns}\n      isSelectable\n      isCompact={true}\n      borders={false}\n      createRows={createRows(userLinks)}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n        fetchUsers({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), inModal });\n        inModal || applyPaginationToUrl(history, limit, offset);\n        inModal || applyFiltersToUrl(history, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      sortBy={{\n        index: 1,\n        direction: 'asc',\n      }}\n      rowWrapper={UsersRow}\n      titlePlural=\"users\"\n      titleSingular=\"user\"\n      noDataDescription={[\n        'This filter criteria matches no users.',\n        'Make sure the beginning of your search input corresponds to the beginning of the value you are looking for, or try changing your filter settings.',\n      ]}\n      noData={users.length === 0 && !filters.username && !filters.email}\n      filters={[\n        { key: 'username', value: filters.username, placeholder: 'Filter by username' },\n        { key: 'email', value: filters.email, placeholder: 'Filter by email' },\n        {\n          key: 'status',\n          value: filters.status,\n          label: 'Status',\n          type: 'checkbox',\n          items: [\n            { label: 'Active', value: 'Active' },\n            { label: 'Inactive', value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nconst mapStateToProps = ({ userReducer: { users, isUserDataLoading } }) => {\n  return {\n    users: users.data && users.data.map((data) => ({ ...data, uuid: data.username })),\n    pagination: users.meta,\n    isLoading: isUserDataLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: (apiProps = defaultSettings) => {\n      dispatch(fetchUsers(apiProps));\n    },\n    updateUsersFilters: (filters) => {\n      dispatch(updateUsersFilters(filters));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    fetchUsers: (apiProps) => {\n      return propsFromDispatch.fetchUsers(apiProps ? apiProps : defaultCompactSettings);\n    },\n  };\n};\n\nUsersList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  users: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchUsers: PropTypes.func.isRequired,\n  updateUsersFilters: PropTypes.func.isRequired,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number,\n    count: PropTypes.number,\n  }),\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  inModal: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  inModal: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\nexport const CompactUsersList = connect(mapStateToProps, mapDispatchToProps, mergeProps)(UsersList);\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw 'Can have maximum of 150 characters.';\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw 'Name has already been taken.';\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title=\"Group name already taken\"\n        text=\"Please return to Step 1: Group information and choose a unique group name for your group.\"\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        Review details\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\n\nexport default {\n  fields: [\n    {\n      component: 'wizard',\n      name: 'wizard',\n      isDynamic: true,\n      inModal: true,\n      showTitles: true,\n      title: 'Create group',\n      fields: [\n        {\n          name: 'name-and-description',\n          nextStep: 'add-roles',\n          title: 'Name and Description',\n          fields: [\n            {\n              component: 'set-name',\n              name: 'group-name',\n              validate: [\n                {\n                  type: validatorTypes.REQUIRED,\n                },\n              ],\n            },\n            {\n              component: componentTypes.TEXTAREA,\n              name: 'group-description',\n              hideField: true,\n              validate: [\n                {\n                  type: validatorTypes.MAX_LENGTH,\n                  threshold: 150,\n                },\n              ],\n            },\n          ],\n        },\n        {\n          name: 'add-roles',\n          nextStep: 'add-users',\n          title: 'Add roles',\n          fields: [\n            {\n              component: 'set-roles',\n              name: 'roles-list',\n            },\n          ],\n        },\n        {\n          name: 'add-users',\n          nextStep: 'review',\n          title: 'Add members',\n          fields: [\n            {\n              component: 'set-users',\n              name: 'users-list',\n            },\n          ],\n        },\n        {\n          name: 'review',\n          title: 'Review details',\n          // eslint-disable-next-line react/display-name\n          buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n          StepTemplate: ReviewTemplate,\n          fields: [\n            {\n              component: 'summary-content',\n              name: 'summary-content',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label=\"Group name\"\n          helperTextInvalid={groupName ? groupNameError : 'Required'}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label=\"Group description\"\n          helperTextInvalid=\"Can have maximum of 150 characters.\"\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\n\nconst createRows = (data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ roles, fetchRoles, isLoading, pagination, selectedRoles, canSort, setSelectedRoles }) => {\n  const [filterValue, setFilterValue] = useState('');\n  const { current: columns } = useRef([\n    { title: 'Name', key: 'display_name', ...(canSort ? { transforms: [sortable] } : { orderBy: 'name' }) },\n    { title: 'Description' },\n  ]);\n\n  useEffect(() => {\n    fetchRoles({ orderBy: 'display_name' });\n  }, []);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  return (\n    <TableToolbarView\n      columns={columns}\n      isSelectable\n      isCompact\n      borders={false}\n      createRows={createRows}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder=\"role name\"\n      fetchData={(config) => fetchRoles(mappedProps({ ...config, filters: { display_name: config.name } }))}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural=\"roles\"\n      titleSingular=\"role\"\n      tableId=\"roles-list\"\n    />\n  );\n};\n\nconst mapStateToProps = ({ roleReducer: { roles, isLoading } }) => ({\n  roles: roles.data,\n  pagination: roles.meta,\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchRoles: (apiProps) => {\n      dispatch(fetchRolesWithPolicies(mappedProps(apiProps)));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nRolesList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRoles: PropTypes.func.isRequired,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  canSort: PropTypes.bool,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nconst mapStateToPropsGroup = ({ groupReducer: { selectedGroup } }) => {\n  const roles = selectedGroup.addRoles.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.addRoles.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.addRoles.loaded,\n    groupId: selectedGroup.uuid,\n  };\n};\n\nconst mapDispatchToPropsGroup = (dispatch) => {\n  return {\n    fetchRoles: (groupId, apiProps) => {\n      dispatch(fetchAddRolesForGroup(groupId, apiProps));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    canSort: false,\n    fetchRoles: (apiProps) => propsFromDispatch.fetchRoles(propsFromState.groupId, apiProps),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RolesList);\nexport const ExcludedRolesList = connect(mapStateToPropsGroup, mapDispatchToPropsGroup, mergeProps)(RolesList);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>Select one or more roles to add to this group.</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { CompactUsersList } from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={'To manage users, go to your'} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst SummaryContent = () => {\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Group name\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Group description\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Roles\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    Members\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport schema from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: 'Adding group',\n        dismissDelay: 8000,\n        dismissable: false,\n        description: 'Adding group was canceled by the user.',\n      })\n    );\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: 'Success adding group',\n            dismissDelay: 8000,\n            dismissable: false,\n            description: 'The group was added successfully.',\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n};\n\nexport default AddGroupWizard;\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({\n  addNotification,\n  updateGroup,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n  group,\n  onClose,\n}) => {\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? updateGroup(user_data)\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : updateGroup(user_data).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      dismissDelay: 8000,\n      dismissable: false,\n      title: selectedGroup ? 'Editing group' : 'Adding group',\n      description: selectedGroup ? 'Edit group was canceled by the user.' : 'Adding group was canceled by the user.',\n    });\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: 'Name',\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: 'Description',\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate {...props} ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: `Edit group's information` }} />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      updateGroup,\n      fetchGroup,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditGroupModal);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({\n  removeGroups,\n  group,\n  isLoading,\n  fetchGroup,\n  groupsUuid,\n  isModalOpen,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n}) => {\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      fetchGroup(groupsUuid[0].uuid);\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    removeGroups(uuids)\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {multipleGroups ? 'Delete groups?' : 'Delete group?'}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {multipleGroups ? 'Delete groups' : 'Delete group'}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            Deleting these <b>{groupsUuid.length}</b> groups removes all roles from the members inside the group.\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            Deleting the <b>{group.name}</b> group removes all roles from the members inside the group.\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label=\"I understand that this action cannot be undone.\"\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => ({\n  group: selectedGroup,\n  isLoading: !selectedGroup.loaded,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveGroupModal);\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, _opened, selectedRows = []) =>\n  data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} state={{ uuid }} to={{ pathname: `/groups/detail/${isPlatformDefault ? 'default-access' : uuid}` }}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  bodyContent={`This group contains the roles that all ${\n                    isAdminDefault ? 'org admin users' : 'users in your organization'\n                  } inherit by default.`}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{isActive ? 'Active' : 'Inactive'}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addGroup, addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { CompactUsersList } from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\n\nconst AddGroupMembers = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  addNotification,\n  closeUrl,\n  addMembersToGroup,\n  fetchMembersForGroup,\n  fetchGroups,\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      addNotification({\n        variant: 'info',\n        title: `Adding member${userList.length > 1 ? 's' : ''} to group`,\n        dismissDelay: 8000,\n        dismissable: false,\n        description: `Adding member${userList.length > 1 ? 's' : ''} to group initiated.`,\n      });\n      addMembersToGroup(uuid, userList).then(() => {\n        fetchMembersForGroup(uuid);\n        fetchGroups({ inModal: false });\n      });\n    }\n\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      title: `Adding member${selectedUsers.length > 1 ? 's' : ''} to group`,\n      dismissDelay: 8000,\n      dismissable: false,\n      description: `Adding member${selectedUsers.length > 1 ? 's' : ''} to group was canceled by the user.`,\n    });\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title=\"Add members\"\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          Add to group\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription=\"To manage users, go to your\" />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func,\n  }).isRequired,\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  match: PropTypes.object,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      addGroup,\n      addMembersToGroup,\n      fetchMembersForGroup,\n      fetchGroups,\n    },\n    dispatch\n  );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddGroupMembers));\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\n\nconst columns = [\n  { title: 'Status', transforms: [nowrap] },\n  { title: 'Username' },\n  { title: 'Email' },\n  { title: 'Last name' },\n  { title: 'First name' },\n];\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) =>\n  plural ? (\n    <p>\n      These <b> {`${name}`}</b> members will lose all the roles associated with the <b>{`${group}`}</b> group.\n    </p>\n  ) : (\n    <p>\n      <b>{`${name}`}</b> will lose all the roles associated with the <b> {`${group}`}</b> group.\n    </p>\n  );\n\nconst GroupPrincipals = () => {\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: 'Remove',\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: 'Remove member?',\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: 'Remove member',\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members'].path}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add_members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              Add member\n            </Button>\n          </Link>,\n          {\n            label: 'Add member',\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add_members`);\n            },\n          },\n          {\n            label: 'Remove',\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = multipleMembersSelected ? 'Remove members?' : 'Remove member?';\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>{`All ${\n                    admin_default ? 'organization administrators' : 'users'\n                  } in this organization are members of this group.`}</Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarView\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={hasPermissions.current}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder=\"username\"\n            titlePlural=\"members\"\n            titleSingular=\"member\"\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: 'There are no members in this group', description: ['Add a user to configure user access.', ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            Once you edit the <b>Default access</b> group, the system will no longer update it with new default access roles. The group name will\n            change to <b>Custom default access</b>.\n          </Text>\n        </TextContent>\n      }\n      title={'Warning'}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={'Continue'}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Modal, ModalVariant, Stack, StackItem, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport { ExcludedRolesList } from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport '../../../App.scss';\n\nconst AddGroupRoles = ({\n  history: { push },\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  name,\n  isDefault,\n  isChanged,\n  addNotification,\n  onDefaultGroupChanged,\n  fetchRolesForGroup,\n  fetchGroup,\n  fetchUuid,\n}) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    addNotification({\n      variant: 'warning',\n      title: 'Adding roles to group',\n      dismissDelay: 8000,\n      dismissable: false,\n      description: 'Adding roles to group was canceled by the user.',\n    });\n    push(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(fetchUuid, rolesList, () => {\n      fetchRolesForGroup();\n      fetchGroup();\n    });\n    if (isDefault && !isChanged) {\n      onDefaultGroupChanged(true);\n    }\n\n    return push(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      title=\"Add roles to group\"\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          Add to group\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          Cancel\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              This role list has been filtered to only show roles that are not currently in <b> {name}</b>.\n            </Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <Card>\n            <ExcludedRolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} />\n          </Card>\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.any,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  addNotification: PropTypes.func,\n  onDefaultGroupChanged: PropTypes.func,\n  fetchRolesForGroup: PropTypes.func,\n  fetchGroup: PropTypes.func,\n  fetchUuid: PropTypes.string,\n};\n\nexport default AddGroupRoles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory } from 'react-router-dom';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchGroup,\n  fetchSystemGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport './group-roles.scss';\n\nconst columns = [{ title: 'Name', orderBy: 'name' }, { title: 'Description' }, { title: 'Last modified' }];\n\nconst createRows = (groupUuid, data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description, modified }) => [\n          ...acc,\n          {\n            uuid,\n            title: display_name || name,\n            cells: [\n              <Fragment key={`${uuid}-name`}>\n                <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n              </Fragment>,\n              description,\n              <Fragment key={`${uuid}-modified`}>\n                <DateFormat date={modified} type={getDateFormat(modified)} />\n              </Fragment>,\n            ],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      Add role\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || 'All available roles have already been added to the group'}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst GroupRoles = ({\n  roles,\n  removeRoles,\n  addRoles,\n  fetchRolesForGroup,\n  isLoading,\n  pagination,\n  match: {\n    params: { uuid },\n  },\n  name,\n  isAdminDefault,\n  isPlatformDefault,\n  systemGroupUuid,\n  isChanged,\n  onDefaultGroupChanged,\n  fetchAddRolesForGroup,\n  disableAddRoles,\n  addNotification,\n  reloadGroup,\n  fetchSystemGroup,\n}) => {\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchRolesForGroup(pagination)(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchRolesForGroup(pagination)(systemGroupUuid);\n      } else {\n        fetchSystemGroup();\n      }\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchAddRolesForGroup(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchAddRolesForGroup(systemGroupUuid);\n      } else {\n        fetchSystemGroup();\n      }\n    }\n  }, [roles, systemGroupUuid]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      Members in the <b>{name}</b> group will lose the permissions in {plural ? 'these' : 'the'}\n      <b> {role}</b> role{plural ? `s` : ''}.\n    </p>\n  );\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: 'Remove',\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(uuid, [role.uuid], () => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)));\n              setDeleteInfo({\n                title: 'Remove role?',\n                confirmButtonLabel: 'Remove role',\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const fetchUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles'].path}\n        render={(args) => (\n          <AddGroupRoles\n            fetchUuid={fetchUuid}\n            fetchGroup={() => reloadGroup(fetchUuid)}\n            fetchRolesForGroup={() => fetchRolesForGroup({ ...pagination, offset: 0 })(fetchUuid)}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${uuid}/roles`}\n            addRolesToGroup={addRoles}\n            name={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            addNotification={addNotification}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add_roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(\n              disableAddRoles,\n              generateOuiaID(name || ''),\n              isAdminDefault && 'Default admin access group roles cannot be modified manually'\n            )}\n          </Link>,\n          {\n            label: 'Add role',\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/roles/add_roles`);\n            },\n          },\n          {\n            label: 'Remove',\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    uuid,\n                    selectedRoles.map((role) => role.uuid),\n                    () => fetchRolesForGroup({ ...pagination, offset: 0 })(uuid)\n                  )\n              );\n              setDeleteInfo({\n                title: multipleRolesSelected ? 'Remove roles?' : 'Remove role?',\n                confirmButtonLabel: selectedRoles.length > 1 ? 'Remove roles' : 'Remove role',\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id={'tab-roles'}>\n        <TableToolbarView\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          createRows={(...props) => createRows(uuid, ...props)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchRolesForGroup(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural=\"roles\"\n          titleSingular=\"role\"\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: 'There are no roles in this group',\n            description: [isAdminDefault ? 'Contact your platform service team to add roles.' : 'Add a role to configure user access.', ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nconst reloadWrapper = (event, callback) => {\n  event.payload.then(callback);\n  return event;\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, systemGroup } }) => {\n  const roles = selectedGroup.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.loaded,\n    name: selectedGroup.name,\n    isPlatformDefault: selectedGroup.platform_default,\n    isAdminDefault: selectedGroup.admin_default,\n    isChanged: !selectedGroup.system,\n    disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || selectedGroup.admin_default,\n    systemGroupUuid: systemGroup?.uuid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addRoles: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n    removeRoles: (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback)),\n    fetchRolesForGroup: (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options)),\n    fetchAddRolesForGroup: (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {})),\n    addNotification: (...props) => dispatch(addNotification(...props)),\n    reloadGroup: (apiProps) => dispatch(fetchGroup(apiProps)),\n    fetchSystemGroup: () => dispatch(fetchSystemGroup()),\n  };\n};\n\nGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRolesForGroup: PropTypes.func.isRequired,\n  fetchAddRolesForGroup: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  addRoles: PropTypes.func,\n  name: PropTypes.string,\n  removeRoles: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  isAdminDefault: PropTypes.bool,\n  isPlatformDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n  disableAddRoles: PropTypes.bool.isRequired,\n  addNotification: PropTypes.func,\n  reloadGroup: PropTypes.func,\n  systemGroupUuid: PropTypes.string,\n  fetchSystemGroup: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupRoles);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { fetchGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport { Alert, AlertActionCloseButton, Popover, Split, SplitItem, DropdownItem, Dropdown, KebabToggle, Button } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrubms';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  group,\n  fetchGroup,\n  isFetching,\n  onDelete,\n}) => {\n  const isPlatformDefault = uuid === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: 'Roles', name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: 'Members', name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  const history = useHistory();\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const breadcrumbsList = () => [\n    {\n      title: 'Groups',\n      to: getBackRoute(pathnames.groups.path, pagination, filters),\n    },\n    groupExists ? { title: isFetching ? undefined : group.name, isActive: true } : { title: 'Invalid group', isActive: true },\n  ];\n\n  const fetchData = (apiProps) => {\n    fetchGroup(apiProps);\n  };\n\n  const dispatch = useDispatch();\n  const location = useLocation();\n\n  useEffect(() => {\n    fetchSystemGroup();\n    const currUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n    fetchData(currUuid);\n    if (currUuid) {\n      insights.chrome.appObjectId(currUuid);\n      return () => insights.chrome.appObjectId(undefined);\n    }\n  }, [systemGroupUuid]);\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <div>\n              Now that you have edited the <b>Default access</b> group, the system will no longer update it with new default access roles. The group\n              name has changed to <b>Custom default access</b>.\n            </div>\n          }\n        >\n          <InfoCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).path.replace(\n            ':uuid',\n            isPlatformDefault ? 'default-access' : uuid\n          )}\n        >\n          Edit\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).path.replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          Delete\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchUuid = isPlatformDefault ? systemGroupUuid : uuid;\n\n  return (\n    <Fragment>\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title=\"Default access group has changed\"\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                Now that you have edited the <b>Default access</b> group, the system will no longer update it with new default access roles. The group\n                name has changed to <b>Custom default access</b>.\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'].path, pathnames['group-detail-members-remove'].path]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'].path, pathnames['group-detail-members-edit'].path]}\n            render={(props) => (\n              <EditGroup\n                {...props}\n                group={group}\n                cancelRoute={`group/detail/${uuid}`}\n                postMethod={() => {\n                  fetchData(fetchUuid);\n                }}\n              />\n            )}\n          />\n          <Route\n            path={pathnames['group-detail-roles'].path}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members'].path} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title=\"Group not found\"\n            description={[`Group with ID ${uuid} does not exist.`]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                Back to previous page\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n  group: selectedGroup,\n  isFetching: isRecordLoading || isRecordRolesLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n    },\n    dispatch\n  );\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    admin_default: PropTypes.bool,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  onDelete: PropTypes.func,\n  defaultUuid: PropTypes.string,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { Fragment, useContext, useEffect, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarView } from '../../presentational-components/shared/table-toolbar-view';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport { applyPaginationToUrl, isPaginationPresentInUrl, syncDefaultPaginationWithUrl } from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst columns = [\n  { title: 'Name', key: 'name', transforms: [sortable] },\n  { title: 'Roles' },\n  { title: 'Members' },\n  { title: 'Last modified', key: 'modified', transforms: [sortable] },\n];\n\nconst Groups = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n\n  const { groups, meta, filters, isLoading, systemGroup } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState(meta);\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination(meta);\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group'].path}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group'].path}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: 'Edit',\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: 'Delete',\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group'].path} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              Create group\n            </Button>\n          </Link>,\n          {\n            label: 'Create group',\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group'].path);\n            },\n          },\n          {\n            label: 'Edit',\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: 'Delete',\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title=\"Groups\" />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id={'tab-groups'}>\n          <TableToolbarView\n            data={groups.map((group) =>\n              group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n            )}\n            createRows={(...args) => createRows(isAdmin, ...args)}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural=\"groups\"\n            titleSingular=\"group\"\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder=\"name\"\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail'].path} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail'].path}\n        render={(props) => (\n          <Group\n            {...props}\n            defaultUuid={systemGroup?.uuid}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups.path} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","ActiveUser","linkDescription","linkTitle","env","insights","chrome","getEnvironment","prefix","isProd","description","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","columns","key","transforms","nowrap","sortable","createRows","userLinks","_expanded","checkedRows","reduce","acc","username","is_active","email","firstName","first_name","lastName","last_name","isOrgAdmin","is_org_admin","uuid","cells","Link","to","toString","Label","selected","Boolean","find","UsersList","users","fetchUsers","updateUsersFilters","isLoading","pagination","selectedUsers","setSelectedUsers","inModal","defaultPagination","useSelector","userReducer","limit","meta","defaultSettings","offset","count","redirected","history","useHistory","stateFilters","filters","location","search","length","Object","keys","useState","setFilters","useEffect","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","mappedProps","isPaginationPresentInUrl","values","some","filter","areFiltersPresentInUrl","isSelectable","isCompact","borders","ouiaId","fetchData","config","prototype","hasOwnProperty","call","orderBy","applyFiltersToUrl","emptyFilters","setFilterValue","payload","setCheckedItems","newSelection","map","label","sortBy","index","direction","rowWrapper","titlePlural","titleSingular","noDataDescription","noData","value","placeholder","items","tableId","mapStateToProps","isUserDataLoading","mapDispatchToProps","dispatch","apiProps","addNotification","goBack","push","searchFilter","connect","CompactUsersList","propsFromState","propsFromDispatch","ownProps","defaultCompactSettings","asyncValidator","groupName","idKey","id","fetchGroups","nameMatch","console","response","item","debouncedAsyncValidator","asyncDebounce","ReviewTemplate","formFields","AddGroupWizardContext","getState","then","Bullseye","Spinner","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","input","useFieldApi","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","expanded","display_name","RolesList","roles","fetchRoles","selectedRoles","canSort","setSelectedRoles","filterValue","useRef","current","filterPlaceholder","roleReducer","fetchRolesWithPolicies","ExcludedRolesList","selectedGroup","groupReducer","addRoles","loaded","groupId","fetchAddRolesForGroup","SetRoles","TextContent","fieldId","SetUsers","Form","Card","SummaryContent","Grid","GridItem","md","role","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","useDispatch","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","dismissDelay","dismissable","pathname","paths","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","schema","subscription","componentMapper","onSubmit","user_list","user","roles_list","addGroup","initialValues","EditGroupModal","updateGroup","cancelRoute","submitRoute","group","onClose","setSelectedGroup","match","useRouteMatch","fetchGroup","params","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","ModalFormTemplate","ModalProps","pathnames","inputValue","hash","bindActionCreators","RemoveGroupModal","removeGroups","groupsUuid","isModalOpen","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","isAdmin","_opened","selectedRows","roleCount","principalCount","modified","isPlatformDefault","platform_default","isAdminDefault","admin_default","state","DateFormat","date","getDateFormat","AppTabs","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","AddGroupMembers","closeUrl","addMembersToGroup","fetchMembersForGroup","userList","selector","principals","members","removeModalText","plural","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","useParams","shallowEqual","userAccessAdministrator","hasPermissions","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","routes","Route","path","render","args","actionResolver","_rowId","principal","toolbarButtons","multipleMembersSelected","removeText","emptyProps","DefaultGroupChange","withCheckbox","AddGroupRoles","addRolesToGroup","isDefault","isChanged","onDefaultGroupChanged","fetchRolesForGroup","fetchUuid","showConfirmModal","setShowConfirmModal","rolesList","RemoveRoles","groupUuid","generateOuiaID","toLowerCase","GroupRoles","removeRoles","systemGroupUuid","disableAddRoles","reloadGroup","fetchSystemGroup","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","multipleRolesSelected","reloadWrapper","event","callback","systemGroup","system","removeRolesFromGroup","Group","isFetching","onDelete","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","groupExists","BAD_UUID","breadcrumbsList","getBackRoute","useLocation","currUuid","appObjectId","dropdownItems","DropdownItem","replace","breadcrumbs","Split","SplitItem","isFilled","style","display","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","defaultUuid","isRecordLoading","isRecordRolesLoading","GroupRowWrapper","classnames","adminGroup","RegExp","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","appNavClick","secondaryNav","fetchAdminGroup","rows","exact","ids","Switch","pageAction","paddingBottom"],"sourceRoot":""}