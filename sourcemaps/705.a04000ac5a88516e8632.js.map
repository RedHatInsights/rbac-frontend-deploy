{"version":3,"sources":["webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js"],"names":["NextButton","nextStep","valid","handleNext","nextLabel","getState","handleSubmit","submitLabel","Button","variant","type","isDisabled","validating","onClick","string","function","values","stepMapper","get","when","selectNext","propTypes","PropTypes","ReviewStepButtons","disableBack","handlePrev","buttonLabels","cancel","submit","back","next","context","formOptions","useFormApi","useContext","success","error","submitting","Fragment","onCancel","isRequired","WizardError","title","text","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined"],"mappings":"6PAYMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,MAAOC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,UAAWC,EAA3C,EAA2CA,SAAUC,EAArD,EAAqDA,aAAcC,EAAnE,EAAmEA,YAAnE,OACjB,kBAAC,EAAAC,OAAD,CACEC,QAAQ,UACRC,KAAK,SACLC,YAAaT,GAASG,IAAWO,WACjCC,QAAS,kBAAOZ,EAAWE,EAXZ,SAACF,EAAUI,GAAX,eAChB,WACCS,OAAQb,EACRc,SAAUd,EAAS,CAAEe,OAAQX,IAAWW,iBAFzC,uBAGUf,OAHV,UAGuBA,EAASgB,kBAHhC,aAGuB,EAAsBC,IAAIb,IAAWW,OAAQf,EAASkB,QAOtCC,CAAWnB,EAAUI,IAAaC,MAEvEL,EAAWG,EAAYG,IAI5BP,EAAWqB,UAAY,CACrBpB,SAAUqB,cAAoB,CAACA,WAAkBA,SAAgBA,aACjEhB,aAAcgB,oBACdf,YAAae,oBACbpB,MAAOoB,SACPnB,WAAYmB,oBACZlB,UAAWkB,oBACXjB,SAAUiB,qBAGZ,IAAMC,EAAoB,SAAC,GAA6G,IAA3GC,EAA2G,EAA3GA,YAAaC,EAA8F,EAA9FA,WAAYxB,EAAkF,EAAlFA,SAAUE,EAAwE,EAAxEA,WAAwE,IAA5DuB,aAAgBC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAQC,EAAc,EAAdA,QAClHC,GAAcC,eACpB,GAAuCC,gBAAWH,GAA1CI,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,WACxB,OAAIF,QAA4B,IAAVC,GAAyBA,GAASC,EAC/C,KAIP,kBAAC,EAAAC,SAAD,KACE,kBAACtC,GAAD,UAAgBgC,EAAhB,CAA6B7B,WAAYA,EAAYF,SAAUA,EAAUG,UAAW0B,EAAMvB,YAAaqB,KACvG,kBAAC,EAAApB,OAAD,CAAQE,KAAK,SAASD,QAAQ,YAAYE,WAAYa,EAAaX,QAASY,GACzEI,GAEH,kBAAC,EAAArB,OAAD,CAAQE,KAAK,SAASD,QAAQ,OAAOI,QAASmB,EAAYO,UACvDZ,KAMTJ,EAAkBF,UAAY,CAC5BG,YAAaF,SACbG,WAAYH,oBACZnB,WAAYmB,oBACZrB,SAAUqB,cAAoB,CAC5BA,WACAA,UAAgB,CACdH,KAAMG,sBACNL,WAAYK,wBAEdA,WAEFI,aAAcJ,UAAgB,CAC5BM,OAAQN,oBACRK,OAAQL,oBACRO,KAAMP,oBACNQ,KAAMR,sBACLkB,WACHT,QAAST,uBAGX,W,2HCpEMmB,EAAc,SAAC,GAA6B,IAA3BV,EAA2B,EAA3BA,QAASW,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC7BC,GAAeV,gBAAWW,WAA1BD,WACAE,GAAmBZ,gBAAWH,GAA9Be,eACR,OACE,kBAAC,EAAAC,WAAD,CAAYtC,QAASuC,2BACnB,kBAAC,EAAAC,eAAD,CAAgBC,MAAM,MAAMC,KAAMC,OAClC,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3Bb,GAEH,kBAAC,EAAAc,eAAD,KAAiBb,GACjB,kBAAC,EAAAnC,OAAD,CACEK,QAAS,WACPiC,OAAeW,GACfb,EAAW,IAEbnC,QAAQ,WALV,sBAaNgC,EAAYpB,UAAY,CACtBU,QAAST,sBACToB,MAAOpB,sBACPqB,KAAMrB,uBAGR","file":"js/705.cfdf2ab8f5124c4f4d7c.js","sourcesContent":["import { Button } from '@patternfly/react-core';\nimport React, { Fragment, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ disableBack, handlePrev, nextStep, handleNext, buttonLabels: { cancel, submit, back, next }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      <NextButton {...formOptions} handleNext={handleNext} nextStep={nextStep} nextLabel={next} submitLabel={submit} />\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport PropTypes from 'prop-types';\n\nconst WizardError = ({ context, title, text }) => {\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        Return to Step 1\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n"],"sourceRoot":""}