{"version":3,"file":"js/5963.8d2748ba59a5a64e048e.js","mappings":"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","sources":["webpack:///./src/entries/MyUserAccess.js","webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/presentational-components/shared/AppLink.js","webpack:///./src/utilities/store.js","webpack:///./node_modules/react-redux/es/index.js"],"sourcesContent":["import React, { lazy, Suspense, useEffect } from 'react';\nimport { Route, Routes, useLocation } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport registry, { RegistryContext } from '../utilities/store';\nimport messages from '../locales/data.json';\nimport ErroReducerCatcher from '../presentational-components/shared/ErrorReducerCatcher';\nimport PermissionsContext from '../utilities/permissions-context';\nimport pathnames from '../utilities/pathnames';\nimport { AppPlaceholder } from '../presentational-components/shared/loader-placeholders';\nimport useAppNavigate from '../hooks/useAppNavigate';\nimport useUserData from '../hooks/useUserData';\n\nconst MyUserAccess = lazy(() => import('../smart-components/myUserAccess/MUAHome'));\n\nimport '../App.scss';\n\nexport const locale = 'en';\n\nconst MuaApp = () => {\n  const chrome = useChrome();\n  const location = useLocation();\n  const navigate = useAppNavigate('/iam');\n  const userData = useUserData();\n\n  useEffect(() => {\n    if (location?.pathname?.match(/\\/(iam)$/)) {\n      navigate(pathnames['my-user-access'].link);\n    }\n    // set correct title\n\n    chrome.updateDocumentTitle('My User Access');\n  }, []);\n\n  return (\n    <PermissionsContext.Provider value={{ ...userData }}>\n      <ErroReducerCatcher>\n        <section style={{ marginLeft: 0, padding: 0 }}>\n          <Suspense fallback={<AppPlaceholder />}>\n            <Routes>\n              <Route path=\"/\" element={<MyUserAccess />} />\n            </Routes>\n          </Suspense>\n        </section>\n      </ErroReducerCatcher>\n    </PermissionsContext.Provider>\n  );\n};\n\nconst SettingsMua = () => (\n  <IntlProvider locale={locale} messages={messages[locale]}>\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <MuaApp />\n      </Provider>\n    </RegistryContext.Provider>\n  </IntlProvider>\n);\n\nexport default SettingsMua;\n","import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const mergeToBasename = (to, basename = '/iam/user-access') => {\n  if (typeof to === 'string') {\n    // replace possible \"//\" after basename\n    return `${basename}/${to}`.replaceAll('//', '/');\n  }\n\n  return {\n    ...to,\n    pathname: `${basename}/${to.pathname}`.replaceAll('//', '/'),\n  };\n};\n\nconst AppLink = React.forwardRef((props, ref) => <Link {...props} ref={ref} to={mergeToBasename(props.to, props.linkBasename)} />);\nAppLink.displayName = 'AppLink';\n\nAppLink.propTypes = {\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  linkBasename: PropTypes.string,\n};\n\nexport default AppLink;\n","import { createContext } from 'react';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry, { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nimport reduxLogger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport userReducer, { usersInitialState } from '../redux/reducers/user-reducer';\nimport groupReducer, { groupsInitialState } from '../redux/reducers/group-reducer';\nimport policyReducer, { policiesInitialState } from '../redux/reducers/policy-reducer';\nimport roleReducer, { rolesInitialState } from '../redux/reducers/role-reducer';\nimport accessReducer, { accessInitialState } from '../redux/reducers/access-reducer';\nimport permissionReducer, { permissionInitialState } from '../redux/reducers/permission-reducer';\nimport costReducer, { costInitialState } from '../redux/reducers/cost-reducer';\nimport errorReducer from '../redux/reducers/errorReducer';\nimport inventoryReducer, { inventoryGroupsInitialState } from '../redux/reducers/inventory-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst middlewares = [\n  thunk,\n  promiseMiddleware,\n  notificationsMiddleware({\n    errorTitleKey: ['statusText', 'message', 'errors[0].status'],\n    errorDescriptionKey: ['errors[0].detail', 'errors', 'stack'],\n  }),\n  reduxLogger,\n].filter((middleware) => typeof middleware === 'function');\n\nconst registry = new ReducerRegistry({}, middlewares);\n\nregistry.register({\n  userReducer: applyReducerHash(userReducer, usersInitialState),\n  groupReducer: applyReducerHash(groupReducer, groupsInitialState),\n  policyReducer: applyReducerHash(policyReducer, policiesInitialState),\n  roleReducer: applyReducerHash(roleReducer, rolesInitialState),\n  accessReducer: applyReducerHash(accessReducer, accessInitialState),\n  permissionReducer: applyReducerHash(permissionReducer, permissionInitialState),\n  inventoryReducer: applyReducerHash(inventoryReducer, inventoryGroupsInitialState),\n  costReducer: applyReducerHash(costReducer, costInitialState),\n  errorReducer: applyReducerHash(errorReducer),\n  notifications: notificationsReducer,\n});\n\nexport default registry;\n","export * from './exports';\nimport { unstable_batchedUpdates as batch } from './utils/reactBatchedUpdates';\nimport { setBatch } from './utils/batch'; // Enable batched updates in our subscriptions for use\n// with standard React renderers (ReactDOM, React Native)\n\nsetBatch(batch);\nexport { batch };"],"names":["MyUserAccess","lazy","locale","MuaApp","chrome","useChrome","location","useLocation","navigate","useAppNavigate","userData","useUserData","useEffect","pathname","match","pathnames","updateDocumentTitle","value","style","marginLeft","padding","Suspense","fallback","Routes","Route","path","element","messages","getRegistry","registry","Provider","store","linkBasename","useNavigate","to","options","mergeToBasename","basename","replaceAll","AppLink","React","props","ref","Link","displayName","propTypes","PropTypes","RegistryContext","createContext","middlewares","thunk","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","reduxLogger","filter","middleware","ReducerRegistry","register","userReducer","applyReducerHash","usersInitialState","groupReducer","groupsInitialState","policyReducer","policiesInitialState","roleReducer","rolesInitialState","accessReducer","accessInitialState","permissionReducer","permissionInitialState","inventoryReducer","inventoryGroupsInitialState","costReducer","costInitialState","errorReducer","notifications","notificationsReducer"],"sourceRoot":""}