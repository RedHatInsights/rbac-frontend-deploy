{"version":3,"file":"js/6193.0ba9ecdcec052eaa50dc.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-core/dist/esm/deprecated/components/Dropdown/dropdownConstants.js","webpack:///./src/smart-components/group/service-account/add-group-service-accounts.tsx","webpack:///./src/redux/actions/service-account-actions.ts"],"sourcesContent":["import * as React from 'react';\nexport var DropdownPosition;\n(function (DropdownPosition) {\n    DropdownPosition[\"right\"] = \"right\";\n    DropdownPosition[\"left\"] = \"left\";\n})(DropdownPosition || (DropdownPosition = {}));\nexport var DropdownDirection;\n(function (DropdownDirection) {\n    DropdownDirection[\"up\"] = \"up\";\n    DropdownDirection[\"down\"] = \"down\";\n})(DropdownDirection || (DropdownDirection = {}));\nexport const DropdownContext = React.createContext({\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onSelect: (event) => undefined,\n    id: '',\n    toggleIndicatorClass: '',\n    toggleIconClass: '',\n    toggleTextClass: '',\n    menuClass: '',\n    itemClass: '',\n    toggleClass: '',\n    baseClass: '',\n    baseComponent: 'div',\n    sectionClass: '',\n    sectionTitleClass: '',\n    sectionComponent: 'section',\n    disabledClass: '',\n    plainTextClass: '',\n    menuComponent: 'ul'\n});\nexport const DropdownArrowContext = React.createContext({\n    keyHandler: null,\n    sendRef: null\n});\n//# sourceMappingURL=dropdownConstants.js.map","import React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert, Button, Modal, ModalVariant, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport { useParams } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchServiceAccounts } from '../../../redux/actions/service-account-actions';\nimport { ServiceAccountsState } from '../../../redux/reducers/service-account-reducer';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport { RowProps } from '../../user/user-table-helpers';\nimport { LAST_PAGE, ServiceAccount } from '../../../helpers/service-account/service-account-helper';\nimport { DEFAULT_ACCESS_GROUP_ID } from '../../../utilities/constants';\nimport { addServiceAccountsToGroup } from '../../../redux/actions/group-actions';\nimport messages from '../../../Messages';\nimport './group-service-accounts.scss';\n\ninterface AddGroupServiceAccountsProps {\n  postMethod: (promise?: Promise<unknown>) => void;\n}\n\nexport interface PaginationProps {\n  count?: number;\n  limit: number;\n  offset: number;\n}\n\nconst reducer = ({\n  serviceAccountReducer,\n  groupReducer: { systemGroup },\n}: {\n  serviceAccountReducer: ServiceAccountsState;\n  groupReducer: { systemGroup?: { uuid: string } };\n}) => ({\n  serviceAccounts: serviceAccountReducer.serviceAccounts,\n  status: serviceAccountReducer.status,\n  isLoading: serviceAccountReducer.isLoading,\n  limit: serviceAccountReducer.limit,\n  offset: serviceAccountReducer.offset,\n  systemGroupUuid: systemGroup?.uuid,\n});\n\nconst createRows = (data: ServiceAccount[], checkedRows = []) =>\n  data?.reduce(\n    (acc: unknown[], curr: ServiceAccount) => [\n      ...acc,\n      {\n        uuid: curr.uuid,\n        title: curr.name,\n        cells: [\n          curr.name,\n          curr.description,\n          curr.clientId,\n          curr.createdBy,\n          <Fragment key={`${curr.name}-modified`}>\n            <DateFormat date={curr.createdAt} type={getDateFormat(curr.createdAt)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row: RowProps) => row.uuid === curr.uuid)),\n      },\n    ],\n    []\n  );\n\nconst AddGroupServiceAccounts: React.FunctionComponent<AddGroupServiceAccountsProps> = ({ postMethod }: AddGroupServiceAccountsProps) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const { groupId } = useParams();\n  const { auth, getEnvironmentDetails } = useChrome();\n  const [selectedAccounts, setSelectedAccounts] = useState([]);\n  const { serviceAccounts, status, limit, offset, isLoading, systemGroupUuid } = useSelector(reducer);\n\n  const fetchAccounts = useCallback(\n    async (props?: PaginationProps) => {\n      const env = getEnvironmentDetails();\n      const token = await auth.getToken();\n      dispatch(fetchServiceAccounts({ limit: props?.limit ?? limit, offset: props?.offset ?? offset, token, sso: env?.sso }));\n    },\n    [limit, offset]\n  );\n\n  useEffect(() => {\n    fetchAccounts({ limit, offset: 0 });\n  }, []);\n\n  const onCancel = () => {\n    postMethod();\n  };\n\n  const onSubmit = () => {\n    const action = addServiceAccountsToGroup(groupId === DEFAULT_ACCESS_GROUP_ID ? systemGroupUuid : groupId, selectedAccounts);\n    dispatch(action);\n    postMethod(action.payload);\n  };\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description), orderBy: 'description' },\n    { title: intl.formatMessage(messages.clientId), orderBy: 'clientId' },\n    { title: intl.formatMessage(messages.owner), orderBy: 'owner' },\n    { title: intl.formatMessage(messages.timeCreated), orderBy: 'timeCreated' },\n  ];\n\n  return (\n    <Modal\n      isOpen\n      className=\"rbac\"\n      variant={ModalVariant.medium}\n      title={intl.formatMessage(messages.addServiceAccount)}\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedAccounts.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            {intl.formatMessage(messages.addServiceAccountsToGroupDescription)}\n            <Alert\n              className=\"pf-v5-u-mt-sm rbac-service-accounts-alert\"\n              variant=\"info\"\n              component=\"span\"\n              isInline\n              isPlain\n              title={intl.formatMessage(messages.visitServiceAccountsPage, {\n                link: (\n                  <AppLink to=\"/service-accounts\" linkBasename=\"/iam\">\n                    {intl.formatMessage(messages.serviceAccountsPage)}\n                  </AppLink>\n                ),\n              })}\n            />\n          </TextContent>\n        </StackItem>\n        <StackItem className=\"rbac-add-service-account-modal\">\n          <TableToolbarView\n            columns={columns}\n            isSelectable\n            rows={createRows(serviceAccounts, selectedAccounts)}\n            data={serviceAccounts}\n            fetchData={fetchAccounts}\n            isLoading={isLoading}\n            pagination={{\n              limit,\n              offset,\n              ...(status === LAST_PAGE ? { count: offset + serviceAccounts.length } : {}),\n            }}\n            paginationProps={{\n              toggleTemplate: ({ firstIndex, lastIndex }) => (\n                <>\n                  <b>\n                    {firstIndex} - {lastIndex}\n                  </b>{' '}\n                  of <b>{status === LAST_PAGE ? offset + serviceAccounts.length : 'many'}</b>\n                </>\n              ),\n              isCompact: true,\n            }}\n            checkedRows={selectedAccounts}\n            setCheckedItems={setSelectedAccounts}\n            titlePlural={intl.formatMessage(messages.serviceAccounts).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.serviceAccount)}\n            emptyProps={{\n              title: intl.formatMessage(messages.noServiceAccountsFound),\n              description: [intl.formatMessage(messages.contactServiceTeamForAccounts), ''],\n            }}\n            tableId=\"group-add-accounts\"\n            ouiaId=\"group-add-accounts\"\n          />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nexport default AddGroupServiceAccounts;\n","import * as ActionTypes from '../action-types';\nimport * as ServiceAccountsHelper from '../../helpers/service-account/service-account-helper';\n\nexport const fetchServiceAccounts = (apiProps: Record<string, unknown>) => ({\n  type: ActionTypes.FETCH_SERVICE_ACCOUNTS,\n  payload: ServiceAccountsHelper.getServiceAccounts(apiProps),\n  meta: apiProps,\n});\n"],"names":["DropdownPosition","DropdownDirection","DropdownContext","onSelect","event","id","toggleIndicatorClass","toggleIconClass","toggleTextClass","menuClass","itemClass","toggleClass","baseClass","baseComponent","sectionClass","sectionTitleClass","sectionComponent","disabledClass","plainTextClass","menuComponent","DropdownArrowContext","keyHandler","sendRef","reducer","serviceAccountReducer","groupReducer","systemGroup","serviceAccounts","status","isLoading","limit","offset","systemGroupUuid","uuid","createRows","data","checkedRows","reduce","acc","curr","title","name","cells","description","clientId","createdBy","Fragment","key","DateFormat","date","createdAt","type","selected","Boolean","find","row","postMethod","intl","dispatch","useDispatch","groupId","useParams","auth","getEnvironmentDetails","useChrome","selectedAccounts","setSelectedAccounts","useState","useSelector","fetchAccounts","useCallback","async","props","env","token","getToken","apiProps","sso","payload","meta","useEffect","onCancel","columns","formatMessage","orderBy","owner","timeCreated","Modal","isOpen","className","variant","ModalVariant","medium","addServiceAccount","actions","Button","ouiaId","isDisabled","length","onClick","action","addToGroup","cancel","onClose","Stack","hasGutter","StackItem","TextContent","addServiceAccountsToGroupDescription","Alert","component","isInline","isPlain","visitServiceAccountsPage","link","AppLink","to","linkBasename","serviceAccountsPage","isSelectable","rows","fetchData","pagination","count","paginationProps","toggleTemplate","firstIndex","lastIndex","isCompact","setCheckedItems","titlePlural","toLowerCase","titleSingular","serviceAccount","emptyProps","noServiceAccountsFound","contactServiceTeamForAccounts","tableId"],"sourceRoot":""}