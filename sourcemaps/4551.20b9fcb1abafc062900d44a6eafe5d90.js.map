{"version":3,"file":"js/4551.1666595214698.f953bcf7e99124ecbfa0.js","mappings":"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","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import React, { useEffect, Fragment, useState, useContext } from 'react';\nimport { connect, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Label } from '@patternfly/react-core';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultCompactSettings,\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport PermissionsContext from '../../../utilities/permissions-context';\nconst createRows =\n  (userLinks) =>\n  (data, _expanded, checkedRows = []) => {\n    const intl = useIntl();\n    return data\n      ? data.reduce(\n          (acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => [\n            ...acc,\n            {\n              uuid: username,\n              cells: [\n                isOrgAdmin ? (\n                  <Fragment>\n                    <span>\n                      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n                      <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n                    </span>\n                  </Fragment>\n                ) : (\n                  <Fragment>\n                    <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n                    <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n                  </Fragment>\n                ),\n                { title: userLinks ? <Link to={`/users/detail/${username}`}>{username.toString()}</Link> : username.toString() },\n                email.toString(),\n                firstName.toString(),\n                lastName.toString(),\n                {\n                  title: (\n                    <Label key=\"status\" color={isActive && 'green'}>\n                      {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n                    </Label>\n                  ),\n                  props: {\n                    'data-is-active': isActive,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === username)),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\nconst UsersList = ({ users, fetchUsers, updateUsersFilters, isLoading, pagination, selectedUsers, setSelectedUsers, userLinks, inModal, props }) => {\n  const { orgAdmin } = useContext(PermissionsContext);\n  const defaultPagination = useSelector(({ userReducer: { users } }) => ({\n    limit: inModal ? users.meta.limit : users.pagination.limit || (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: inModal ? users.meta.offset : users.pagination.offset || (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: inModal ? users.meta.count : users.pagination.count,\n    redirected: !inModal && users.pagination.redirected,\n  }));\n  const intl = useIntl();\n  const history = useHistory();\n\n  const columns = [\n    { title: intl.formatMessage(messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n\n  let stateFilters = useSelector(\n    ({\n      userReducer: {\n        users: { filters },\n      },\n    }) => (history.location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] })\n  );\n\n  const [filters, setFilters] = useState(\n    inModal\n      ? {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n      : stateFilters\n  );\n\n  useEffect(() => {\n    inModal || (defaultPagination.redirected && applyPaginationToUrl(history, defaultPagination.limit, defaultPagination.offset));\n  }, [defaultPagination.redirected]);\n\n  useEffect(() => {\n    const pagination = inModal ? defaultSettings : syncDefaultPaginationWithUrl(history, defaultPagination);\n    const newFilters = inModal ? { status: filters.status } : syncDefaultFiltersWithUrl(history, ['username', 'email', 'status'], filters);\n    setFilters(newFilters);\n    fetchUsers({ ...mappedProps({ ...pagination, filters: newFilters }), inModal });\n  }, []);\n\n  useEffect(() => {\n    if (!inModal) {\n      isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(history, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(history, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    inModal || updateUsersFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n\n  return (\n    <TableToolbarViewOld\n      columns={columns}\n      isSelectable\n      isCompact={true}\n      borders={false}\n      createRows={createRows(userLinks)}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n        fetchUsers({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), inModal });\n        inModal || applyPaginationToUrl(history, limit, offset);\n        inModal || applyFiltersToUrl(history, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      sortBy={{\n        index: 1,\n        direction: 'asc',\n      }}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      noDataDescription={[\n        intl.formatMessage(messages.filterMatchesNoItems, { items: intl.formatMessage(messages.users).toLowerCase() }),\n        intl.formatMessage(messages.checkFilterBeginning),\n      ]}\n      noData={users.length === 0 && !filters.username && !filters.email}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nconst mapStateToProps = ({ userReducer: { users, isUserDataLoading } }) => {\n  return {\n    users: users.data && users.data.map((data) => ({ ...data, uuid: data.username })),\n    pagination: users.meta,\n    isLoading: isUserDataLoading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchUsers: (apiProps = defaultSettings) => {\n      dispatch(fetchUsers(apiProps));\n    },\n    updateUsersFilters: (filters) => {\n      dispatch(updateUsersFilters(filters));\n    },\n    addNotification: (...props) => dispatch(addNotification(...props)),\n  };\n};\n\nconst mergeProps = (propsFromState, propsFromDispatch, ownProps) => {\n  return {\n    ...ownProps,\n    ...propsFromState,\n    ...propsFromDispatch,\n    fetchUsers: (apiProps) => {\n      return propsFromDispatch.fetchUsers(apiProps ? apiProps : defaultCompactSettings);\n    },\n  };\n};\n\nUsersList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  users: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchUsers: PropTypes.func.isRequired,\n  updateUsersFilters: PropTypes.func.isRequired,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number,\n    offset: PropTypes.number,\n    count: PropTypes.number,\n  }),\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  inModal: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  inModal: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\nexport const CompactUsersList = connect(mapStateToProps, mapDispatchToProps, mergeProps)(UsersList);\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defaultSettings, defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: { addRoles, uuid },\n    },\n  }) => ({\n    roles: addRoles.roles,\n    pagination: addRoles.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !addRoles.loaded,\n    groupId: uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) => (rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps(config)))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { CompactUsersList } from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({\n  addNotification,\n  updateGroup,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n  group,\n  onClose,\n}) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? updateGroup(user_data)\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : updateGroup(user_data).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      dismissDelay: 8000,\n      title: intl.formatMessage(selectedGroup ? messages.editingGroupTitle : messages.addingGroupTitle),\n      description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n    });\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      updateGroup,\n      fetchGroup,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditGroupModal);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({\n  removeGroups,\n  group,\n  isLoading,\n  fetchGroup,\n  groupsUuid,\n  isModalOpen,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n}) => {\n  const intl = useIntl();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      fetchGroup(groupsUuid[0].uuid);\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    removeGroups(uuids)\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => ({\n  group: selectedGroup,\n  isLoading: !selectedGroup.loaded,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveGroupModal);\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, _opened, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} state={{ uuid }} to={{ pathname: `/groups/detail/${isPlatformDefault ? 'default-access' : uuid}` }}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addGroup, addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { CompactUsersList } from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst AddGroupMembers = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  addNotification,\n  closeUrl,\n  addMembersToGroup,\n  fetchMembersForGroup,\n  fetchGroups,\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const intl = useIntl();\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      addNotification({\n        variant: 'info',\n        title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n      });\n      addMembersToGroup(uuid, userList).then(() => {\n        fetchMembersForGroup(uuid);\n        fetchGroups({ inModal: false });\n      });\n    }\n\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n    });\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <CompactUsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func,\n  }).isRequired,\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func.isRequired,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  match: PropTypes.object,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      addGroup,\n      addMembersToGroup,\n      fetchMembersForGroup,\n      fetchGroups,\n    },\n    dispatch\n  );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddGroupMembers));\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupPrincipals = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members'].path}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add_members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add_members`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarViewOld\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={hasPermissions.current}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  const intl = useIntl();\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            <FormattedMessage\n              {...messages.defaultAccessGroupEditWarning}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          </Text>\n        </TextContent>\n      }\n      title={intl.formatMessage(messages.warning)}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={intl.formatMessage(messages.continue)}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Modal, ModalVariant, Stack, StackItem, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport RolesList from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst AddGroupRoles = ({\n  history: { push },\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  name,\n  isDefault,\n  isChanged,\n  addNotification,\n  onDefaultGroupChanged,\n  fetchRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n  fetchUuid,\n}) => {\n  const intl = useIntl();\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(messages.addingGroupRolesTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(messages.addingGroupRolesCancelled),\n    });\n    push(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(fetchUuid, rolesList, () => {\n      if (isDefault) {\n        fetchSystemGroup().then(({ value: { data } }) => {\n          fetchRolesForGroup(data[0].uuid);\n          fetchGroup(data[0].uuid);\n        });\n      } else {\n        fetchRolesForGroup();\n        fetchGroup();\n      }\n      setSelectedRoles([]);\n    });\n    if (isDefault && !isChanged) {\n      onDefaultGroupChanged(true);\n    }\n\n    return push(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      title={intl.formatMessage(messages.addRolesToGroup)}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              <FormattedMessage\n                {...messages.onlyGroupRolesVisible}\n                values={{\n                  b: (text) => <b>{text}</b>,\n                  name: name,\n                }}\n              />\n            </Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <Card>\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={true} />\n          </Card>\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.any,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  addNotification: PropTypes.func,\n  onDefaultGroupChanged: PropTypes.func,\n  fetchRolesForGroup: PropTypes.func,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  fetchUuid: PropTypes.string,\n};\n\nexport default AddGroupRoles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory } from 'react-router-dom';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchGroup,\n  fetchSystemGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './group-roles.scss';\n\nconst createRows = (groupUuid, data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description, modified }) => [\n          ...acc,\n          {\n            uuid,\n            title: display_name || name,\n            cells: [\n              <Fragment key={`${uuid}-name`}>\n                <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n              </Fragment>,\n              description,\n              <Fragment key={`${uuid}-modified`}>\n                <DateFormat date={modified} type={getDateFormat(modified)} />\n              </Fragment>,\n            ],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst GroupRoles = ({\n  roles,\n  removeRoles,\n  addRoles,\n  fetchRolesForGroup,\n  isLoading,\n  pagination,\n  match: {\n    params: { uuid },\n  },\n  name,\n  isAdminDefault,\n  isPlatformDefault,\n  systemGroupUuid,\n  isChanged,\n  onDefaultGroupChanged,\n  fetchAddRolesForGroup,\n  disableAddRoles,\n  addNotification,\n  reloadGroup,\n  fetchSystemGroup,\n}) => {\n  const intl = useIntl();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchRolesForGroup(pagination)(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchRolesForGroup(pagination)(systemGroupUuid);\n      }\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchAddRolesForGroup(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchAddRolesForGroup(systemGroupUuid);\n      }\n    }\n  }, [roles, systemGroupUuid]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(fetchUuid, [role.uuid], () => {\n                    if (isPlatformDefault) {\n                      fetchSystemGroup().then(({ value: { data } }) => {\n                        fetchRolesForGroup({ ...pagination, offset: 0 })(data[0].uuid);\n                      });\n                    } else {\n                      fetchRolesForGroup({ ...pagination, offset: 0 })(uuid);\n                    }\n                  })\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles'].path}\n        render={(args) => (\n          <AddGroupRoles\n            fetchUuid={fetchUuid}\n            fetchGroup={(customId) => reloadGroup(customId ?? fetchUuid)}\n            fetchRolesForGroup={(customId) => fetchRolesForGroup({ ...pagination, offset: 0 })(customId ?? fetchUuid)}\n            fetchSystemGroup={fetchSystemGroup}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${isPlatformDefault ? 'default-access' : uuid}/roles`}\n            addRolesToGroup={addRoles}\n            name={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            addNotification={addNotification}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add_roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/roles/add_roles`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    () => {\n                      fetchSystemGroup().then(({ value: { data } }) => {\n                        fetchRolesForGroup({ ...pagination, offset: 0 })(data[0].uuid);\n                      });\n                    }\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id={'tab-roles'}>\n        <TableToolbarViewOld\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          createRows={(...props) => createRows(uuid, ...props)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchRolesForGroup(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nconst reloadWrapper = (event, callback) => {\n  event.payload.then(callback);\n  return event;\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, systemGroup } }) => {\n  const roles = selectedGroup.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.loaded,\n    name: selectedGroup.name,\n    isPlatformDefault: selectedGroup.platform_default,\n    isAdminDefault: selectedGroup.admin_default,\n    isChanged: !selectedGroup.system,\n    disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default,\n    systemGroupUuid: systemGroup?.uuid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addRoles: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n    removeRoles: (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback)),\n    fetchRolesForGroup: (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options)),\n    fetchAddRolesForGroup: (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {})),\n    addNotification: (...props) => dispatch(addNotification(...props)),\n    reloadGroup: (apiProps) => dispatch(fetchGroup(apiProps)),\n    fetchSystemGroup: () => dispatch(fetchSystemGroup()),\n  };\n};\n\nGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRolesForGroup: PropTypes.func.isRequired,\n  fetchAddRolesForGroup: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  addRoles: PropTypes.func,\n  name: PropTypes.string,\n  removeRoles: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  isAdminDefault: PropTypes.bool,\n  isPlatformDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n  disableAddRoles: PropTypes.bool.isRequired,\n  addNotification: PropTypes.func,\n  reloadGroup: PropTypes.func,\n  systemGroupUuid: PropTypes.string,\n  fetchSystemGroup: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupRoles);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  group,\n  fetchGroup,\n  fetchSystemGroup,\n  removeGroups,\n  isFetching,\n  onDelete,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const isPlatformDefault = uuid === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: intl.formatMessage(messages.roles), name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: intl.formatMessage(messages.members), name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    const currUuid = !isPlatformDefault ? uuid : systemGroupUuid;\n    fetchGroup(currUuid);\n    insights.chrome.appObjectId(currUuid);\n    return () => insights.chrome.appObjectId(undefined);\n  }, [uuid, systemGroupUuid]);\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(pathnames.groups.path, pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).path.replace(\n            ':uuid',\n            isPlatformDefault ? 'default-access' : uuid\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).path.replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          {intl.formatMessage(messages.delete)}\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchUuid = isPlatformDefault ? systemGroupUuid : uuid;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            removeGroups([systemGroupUuid]).then(() =>\n              fetchSystemGroup().then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            history.push('/groups/detail/default-access/roles');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'].path, pathnames['group-detail-members-remove'].path]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'].path, pathnames['group-detail-members-edit'].path]}\n            render={(props) => <EditGroup {...props} group={group} cancelRoute={`group/detail/${uuid}`} postMethod={() => fetchGroup(fetchUuid)} />}\n          />\n          <Route\n            path={pathnames['group-detail-roles'].path}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members'].path} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: uuid })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n  group: selectedGroup,\n  isFetching: isRecordLoading || isRecordRolesLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      fetchSystemGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    admin_default: PropTypes.bool,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  removeGroups: PropTypes.func,\n  onDelete: PropTypes.func,\n  defaultUuid: PropTypes.string,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { Fragment, useContext, useEffect, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarViewOld } from '../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport {\n  applyPaginationToUrl,\n  defaultAdminSettings,\n  defaultSettings,\n  isPaginationPresentInUrl,\n  syncDefaultPaginationWithUrl,\n} from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  const { groups, meta, filters, isLoading, systemGroup } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState({ ...(orgAdmin ? defaultAdminSettings : defaultSettings), ...meta });\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination(meta);\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group'].path}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group'].path}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group'].path} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group'].path);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id={'tab-groups'}>\n          <TableToolbarViewOld\n            data={groups.map((group) =>\n              group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n            )}\n            createRows={(...args) => createRows(isAdmin, ...args)}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail'].path} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail'].path}\n        render={(props) => (\n          <Group\n            {...props}\n            defaultUuid={systemGroup?.uuid}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups.path} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","ActiveUser","linkDescription","linkTitle","intl","useIntl","env","insights","chrome","getEnvironment","prefix","isProd","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","formatMessage","messages","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","number","createRows","userLinks","_expanded","checkedRows","reduce","acc","username","is_active","email","firstName","first_name","lastName","last_name","isOrgAdmin","is_org_admin","uuid","cells","key","Link","to","toString","Label","selected","Boolean","find","UsersList","users","fetchUsers","updateUsersFilters","isLoading","pagination","selectedUsers","setSelectedUsers","inModal","defaultPagination","useSelector","userReducer","limit","meta","defaultAdminSettings","defaultSettings","offset","count","redirected","history","useHistory","columns","transforms","nowrap","sortable","stateFilters","filters","location","search","length","Object","keys","useState","setFilters","useEffect","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","mappedProps","isPaginationPresentInUrl","values","some","filter","areFiltersPresentInUrl","isSelectable","isCompact","borders","ouiaId","fetchData","config","prototype","hasOwnProperty","call","orderBy","applyFiltersToUrl","emptyFilters","setFilterValue","payload","setCheckedItems","newSelection","map","label","sortBy","index","direction","rowWrapper","titlePlural","toLowerCase","titleSingular","noDataDescription","items","noData","value","placeholder","tableId","mapStateToProps","isUserDataLoading","mapDispatchToProps","dispatch","apiProps","addNotification","goBack","push","searchFilter","connect","CompactUsersList","propsFromState","propsFromDispatch","ownProps","defaultCompactSettings","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","fetchGroups","nameMatch","console","response","item","debouncedAsyncValidator","asyncDebounce","ReviewTemplate","formFields","AddGroupWizardContext","getState","then","Bullseye","Spinner","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","input","useFieldApi","description","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","RolesList","selectedRoles","setSelectedRoles","rolesExcluded","useDispatch","groupReducer","selectedGroup","addRoles","roles","loaded","groupId","roleReducer","shallowEqual","useRef","current","filterValue","sortByState","setSortByState","fetchRoles","useCallback","fetchAddRolesForGroup","fetchRolesWithPolicies","rows","display_name","onSort","e","fetchTableData","curr","filterPlaceholder","canSort","SetRoles","TextContent","fieldId","SetUsers","Form","Card","SummaryContent","Grid","GridItem","md","role","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","schema","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","dismissDelay","pathname","paths","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","subscription","componentMapper","onSubmit","user_list","user","roles_list","addGroup","initialValues","EditGroupModal","updateGroup","cancelRoute","submitRoute","group","onClose","setSelectedGroup","match","useRouteMatch","fetchGroup","params","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","ModalFormTemplate","ModalProps","pathnames","inputValue","hash","bindActionCreators","RemoveGroupModal","removeGroups","groupsUuid","isModalOpen","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","b","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","isAdmin","_opened","selectedRows","roleCount","principalCount","modified","isPlatformDefault","platform_default","isAdminDefault","admin_default","state","DateFormat","date","getDateFormat","AppTabs","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","AddGroupMembers","closeUrl","addMembersToGroup","fetchMembersForGroup","userList","selector","principals","members","removeModalText","plural","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","useParams","userAccessAdministrator","hasPermissions","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","routes","Route","path","render","args","actionResolver","_rowId","principal","toolbarButtons","multipleMembersSelected","removeText","emptyProps","DefaultGroupChange","withCheckbox","AddGroupRoles","addRolesToGroup","isDefault","isChanged","onDefaultGroupChanged","fetchRolesForGroup","fetchSystemGroup","fetchUuid","showConfirmModal","setShowConfirmModal","rolesList","RemoveRoles","groupUuid","expanded","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","GroupRoles","removeRoles","systemGroupUuid","disableAddRoles","reloadGroup","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","multipleRolesSelected","customId","reloadWrapper","event","callback","systemGroup","system","removeRolesFromGroup","Group","isFetching","onDelete","useLocation","groupExists","BAD_UUID","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","currUuid","appObjectId","breadcrumbsList","getBackRoute","dropdownItems","DropdownItem","replace","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","defaultUuid","isRecordLoading","isRecordRolesLoading","GroupRowWrapper","classnames","adminGroup","RegExp","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","appNavClick","secondaryNav","fetchAdminGroup","exact","ids","Switch","pageAction","paddingBottom"],"sourceRoot":""}