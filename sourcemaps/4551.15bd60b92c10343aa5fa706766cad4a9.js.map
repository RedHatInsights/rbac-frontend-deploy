{"version":3,"file":"js/4551.1676452167262.8b1ad692a360ad2f6571.js","mappings":";yLAEO,MAAMA,EAAmC,CAC9CC,KAAM,6BACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,gvBACTC,QAAS,EACTC,QAAS,GAGEC,GAA6B,QAAWP,GAErD,yICLMQ,EAAa,SAAC,GAAmC,IAAjCC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,UAC/BC,GAAOC,EAAAA,EAAAA,KACPC,EAAMC,SAASC,OAAOC,iBACtBC,EAASH,SAASC,OAAOG,SAAW,GAA3B,UAAmCL,EAAnC,KAEf,OADqBM,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBC,SAEN,kBAAC,EAAAC,KAAD,CAAMC,UAAU,YAAYC,UAAWC,EAAAA,aAAAA,IAAvC,UACMd,EAAKe,cAAcC,EAAAA,EAAAA,kBADzB,KAEGlB,EACD,kBAAC,EAAAa,KAAD,CACEE,UAAWC,EAAAA,aAAAA,EACXG,KAAI,sBAAiBX,EAAjB,wDACJY,OAAO,SACPC,IAAI,uBAEHpB,EACD,kBAAC,KAAD,OAVJ,KAeA,kBAAC,EAAAY,KAAD,CAAMC,UAAU,YAAYC,UAAWC,EAAAA,aAAAA,IAAvC,UACMd,EAAKe,cAAcC,EAAAA,EAAAA,kBADzB,OAMJnB,EAAWuB,UAAY,CACrBtB,gBAAiBuB,IAAAA,KACjBtB,UAAWsB,IAAAA,MAGbxB,EAAWyB,aAAe,CACxBxB,gBAAiB,GACjBC,UAAW,0BAGb,sJCxCMwB,EAAW,SAAC,GAAsB,MAApBC,EAAoB,EAApBA,IAAQC,GAAY,YAC9BC,EAAWF,EAAXE,OACFC,EAAWD,MAAAA,GAAH,UAAGA,EAAQD,aAAX,aAAG,EAAgB,kBACjC,OAAO,kBAAC,EAAAG,YAAD,QAAYhB,UAAWiB,GAAAA,CAAW,iBAAkB,CAAE,kBAAmBF,IAAaH,IAAKA,GAASC,KAG7GF,EAASH,UAAY,CACnBI,IAAKH,IAAAA,MAAgB,CACnBK,OAAQL,IAAAA,MAAgB,CACtBI,MAAOJ,IAAAA,MAAgB,CACrB,iBAAkBA,IAAAA,KAClBS,KAAMT,IAAAA,MAAgB,CACpBM,SAAUN,IAAAA,cAOpB,kICAYA,IAAAA,UAAoB,CAACA,IAAAA,OAAkBA,IAAAA,KAAgBA,IAAAA,SACnDA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WACNA,IAAAA,KACKA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WACDA,IAAAA,KAAAA,WAGZ,IAAMU,EAAoB,SAAC,GAA2F,IAAzFC,EAAyF,EAAzFA,iBAAkBC,EAAuE,EAAvEA,YAAaC,EAA0D,EAA1DA,WAA0D,IAA9CC,aAAgBC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,KAAQC,EAAc,EAAdA,QAChGC,GAAcC,EAAAA,EAAAA,WACpB,GAAuChC,EAAAA,EAAAA,YAAW8B,GAA1CG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,WACxB,OAAIF,QAA4B,IAAVC,GAAyBA,GAASC,EAC/C,KAIP,kBAAC,EAAAC,SAAD,KACGZ,IACD,kBAAC,EAAAa,OAAD,CAAQC,KAAK,SAASC,QAAQ,YAAYC,WAAYf,EAAagB,QAASf,GACzEG,GAEH,kBAAC,EAAAQ,OAAD,CAAQC,KAAK,SAASC,QAAQ,OAAOE,QAASV,EAAYW,UACvDd,KAMTL,EAAkBX,UAAY,CAC5Ba,YAAaZ,IAAAA,KACba,WAAYb,IAAAA,KAAAA,WACZ8B,WAAY9B,IAAAA,KAAAA,WACZ+B,SAAU/B,IAAAA,UAAoB,CAC5BA,IAAAA,OACAA,IAAAA,MAAgB,CACdgC,KAAMhC,IAAAA,OAAAA,WACNiC,WAAYjC,IAAAA,OAAAA,aAEdA,IAAAA,OAEFc,aAAcd,IAAAA,MAAgB,CAC5BkC,OAAQlC,IAAAA,KAAAA,WACRe,OAAQf,IAAAA,KAAAA,WACRgB,KAAMhB,IAAAA,KAAAA,WACNmC,KAAMnC,IAAAA,KAAAA,aACLoC,WACHnB,QAASjB,IAAAA,OAAAA,WACTW,iBAAkBX,IAAAA,MAGpB,+ICnEMqC,EAAc,SAAC,GAA6B,IAA3BpB,EAA2B,EAA3BA,QAASqB,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC/B5D,GAAOC,EAAAA,EAAAA,KACL4D,GAAerD,EAAAA,EAAAA,YAAWsD,EAAAA,SAA1BD,WACAE,GAAmBvD,EAAAA,EAAAA,YAAW8B,GAA9ByB,eACR,OACE,kBAAC,EAAAC,WAAD,CAAYjB,QAASkB,EAAAA,kBAAAA,OACnB,kBAAC,EAAAC,eAAD,CAAgBC,MAAM,MAAMC,KAAMC,EAAAA,KAClC,kBAAC,EAAAC,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3Bb,GAEH,kBAAC,EAAAc,eAAD,KAAiBb,GACjB,kBAAC,EAAAf,OAAD,CACEI,QAAS,WACPc,OAAeW,GACfb,EAAW,IAEbd,QAAQ,WAEP/C,EAAKe,cAAcC,EAAAA,EAAAA,mBAA6B,CAAE2D,OAAQ,OAMnEjB,EAAYtC,UAAY,CACtBkB,QAASjB,IAAAA,OAAAA,WACTsC,MAAOtC,IAAAA,OAAAA,WACPuC,KAAMvC,IAAAA,OAAAA,YAGR,02BCfA,IAuCMuD,EAAY,SAAC,GAAmE,IAAjEC,EAAiE,EAAjEA,cAAeC,EAAkD,EAAlDA,iBAAkBC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,QAASvD,EAAY,EAAZA,MAClEzB,GAAOC,EAAAA,EAAAA,KACPgF,GAAUC,EAAAA,EAAAA,cACVC,GAAWC,EAAAA,EAAAA,eACT1E,GAAaF,EAAAA,EAAAA,YAAWC,EAAAA,GAAxBC,SAEF2E,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAAoBC,EAAAA,EAAAA,cAAY,gBAAkBC,EAAlB,EAAGC,YAAeD,MAAlB,MAAiC,CACrEE,MAAOX,EAAUS,EAAMG,KAAKD,MAAQF,EAAMI,WAAWF,QAAUjF,EAAWoF,EAAAA,GAAuBC,EAAAA,IAAiBJ,MAClHK,OAAQhB,EAAUS,EAAMG,KAAKI,OAASP,EAAMI,WAAWG,SAAWtF,EAAWoF,EAAAA,GAAuBC,EAAAA,IAAiBC,OACrHC,MAAOjB,EAAUS,EAAMG,KAAKK,MAAQR,EAAMI,WAAWI,MACrDC,YAAalB,GAAWS,EAAMI,WAAWK,eAGrCT,GAAQD,EAAAA,EAAAA,cAAY,oBAAkBC,EAAlB,EAAGC,YAAeD,MAAlB,OAAgCA,MAAAA,GAAhC,UAAgCA,EAAO3D,YAAvC,iBAAgC,EAAaqE,WAA7C,aAAgC,UAAmB,SAACrE,GAAD,cAAgBA,GAAhB,IAAsBsE,KAAMtE,EAAKuE,iBACxGR,GAAaL,EAAAA,EAAAA,cACjB,qBACEE,YACED,MAASG,QAITU,GAAYd,EAAAA,EAAAA,cAAY,qBAAGE,YAAea,qBAE1CC,GAAehB,EAAAA,EAAAA,cACnB,gBAEaiB,EAFb,EACEf,YACED,MAASgB,QAFb,OAIOxB,EAAQyB,SAASC,OAAOC,OAAS,GAAKC,OAAOC,KAAKL,GAASG,OAAS,EAAIH,EAAU,CAAE/E,OAAQ,CAAC,cAGhGqF,GAAYC,EAAAA,EAAAA,cAChB,SAACC,GACC,OAAO9B,GAAS+B,EAAAA,EAAAA,GAAWD,MAE7B,CAAC9B,IAGGgC,GAAoBH,EAAAA,EAAAA,cACxB,SAACP,GACC,OAAOtB,GAASiC,EAAAA,EAAAA,GAAmBX,MAErC,CAACtB,IAGGkC,EArFW,SAACtC,EAAWjD,GAAZ,MAAkBwF,EAAlB,uDAAgC,GAAItH,EAApC,8CACjB8B,MAAAA,GADiB,UACjBA,EAAMyF,cADW,aACjB,OAAAzF,GACE,SAAC0F,EAAD,SAAQnB,EAAR,EAAQA,SAAqB1E,EAA7B,EAAkB8F,UAAqBC,EAAvC,EAAuCA,MAAmBC,EAA1D,EAA8CC,WAAkCC,EAAhF,EAAqEC,UAAmCC,EAAxG,EAA0FC,aAA1F,wBACKR,GADL,CAEE,CACEpB,KAAMC,EACN4B,MAAO,CACLF,EACE,kBAAC,EAAAnF,SAAD,KACE,kBAAC,KAAD,CAAWsF,IAAI,WAAWtH,UAAU,eACpC,0BAAMsH,IAAI,OAAOlI,EAAKe,cAAcC,EAAAA,EAAAA,OAGtC,kBAAC,EAAA4B,SAAD,KACE,kBAAC,KAAD,CAAWsF,IAAI,UAAUtH,UAAU,eACnC,0BAAMsH,IAAI,MAAMlI,EAAKe,cAAcC,EAAAA,EAAAA,MAGvC,CAAE2C,MAAOoB,EAAY,kBAAC,EAAAoD,KAAD,CAAMC,GAAE,wBAAmB/B,IAAaA,EAASgC,YAAqBhC,EAASgC,YACpGX,EACAC,EACAE,EACA,CACElE,MACE,kBAAC,EAAA2E,MAAD,CAAOJ,IAAI,SAAS/D,MAAOxC,EAAW,QAAU,QAC7C3B,EAAKe,cAAcY,EAAWX,EAAAA,EAAAA,OAAkBA,EAAAA,EAAAA,WAGrDS,MAAO,CACL,iBAAkBE,KAIxB4G,SAAUC,QAAQlB,MAAAA,GAAD,UAACA,EAAamB,YAAd,aAAC,OAAAnB,GAAoB,qBAAGlB,OAAoBC,WAGjE,IAiDWqC,CAAW3D,EAAWU,EAAOZ,EAAe7E,GACnD2I,EAAU,CACd,CAAEhF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,kBAA4BkH,IAAK,YAAaU,WAAY,CAACC,EAAAA,SACvF,CAAElF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAAoBkH,IAAK,WAAYU,WAAY,CAACE,EAAAA,WAC9E,CAAEnF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,WAAqB4H,WAAY,CAACC,EAAAA,SAC9D,CAAElF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAAoB4H,WAAY,CAACC,EAAAA,SAC7D,CAAElF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAAkB4H,WAAY,CAACC,EAAAA,UAE7D,GAAsCE,EAAAA,EAAAA,UAAS,CAAEC,MAAO,EAAGC,UAAW,QAAtE,eAAOC,EAAP,KAAoBC,EAApB,KAEA,GAA8BJ,EAAAA,EAAAA,UAC5B/D,EACI,CACEqB,SAAU,GACVqB,MAAO,GACPhG,OAAQ,CAAC1B,EAAKe,cAAcC,EAAAA,EAAAA,UAE9BwF,GAPN,eAAOC,EAAP,KAAgB2C,EAAhB,KAyCA,OA/BAC,EAAAA,EAAAA,YAAU,WACRrE,GAAYO,EAAkBW,aAAcoD,EAAAA,EAAAA,IAAqBrE,EAASM,EAAkBI,MAAOJ,EAAkBS,UACpH,CAACT,EAAkBW,cAEtBmD,EAAAA,EAAAA,YAAU,WACR,IAAMxD,EAAab,EAAUe,EAAAA,IAAkBwD,EAAAA,EAAAA,IAA6BtE,EAASM,GAC/EiE,EAAaxE,EAAU,CAAEtD,OAAQ+E,EAAQ/E,SAAW+H,EAAAA,EAAAA,IAA0BxE,EAAS,CAAC,WAAY,QAAS,UAAWwB,GAC9H2C,EAAWI,GACXzC,EAAU,EAAD,MAAM2C,EAAAA,EAAAA,IAAY,EAAD,KAAM7D,GAAN,IAAkBY,QAAS+C,MAA5C,IAA2DxE,QAAAA,OACnE,KAEHqE,EAAAA,EAAAA,YAAU,WACHrE,KACH2E,EAAAA,EAAAA,IAAyB1E,KAAYqE,EAAAA,EAAAA,IAAqBrE,EAASY,EAAWF,MAAOE,EAAWG,QAChGa,OAAO+C,OAAOnD,GAASoD,MAAK,SAACC,GAAD,OAAYA,MAAAA,OAAA,EAAAA,EAAQlD,QAAS,QACtDmD,EAAAA,EAAAA,IAAuB9E,EAAS4B,OAAOC,KAAKL,MAC7CgD,EAAAA,EAAAA,IAA0BxE,EAAS4B,OAAOC,KAAKL,GAAUA,OAgB7D,kBAAC,KAAD,QACEuD,WAAS,EACTC,cAAY,EACZC,SAAS,EACTvB,QAASA,EACTtB,KAAMA,EACN8C,OAAQjB,EACRkB,OAAQ,SAACC,EAAGrB,EAAOC,GACjB,IAAMqB,EAAU,GAAH,OAAoB,SAAdrB,EAAuB,IAAM,IAAnC,OAAwCN,EAAQK,GAAOd,KACpEiB,EAAe,CAAEH,MAAAA,EAAOC,UAAAA,IACxBlC,EAAU,EAAD,KAAMlB,GAAN,IAAkBY,QAAAA,EAASzB,QAAAA,EAASsF,QAAAA,MAE/CxI,KAAM2D,EACN8E,OAAO,cACPxD,UAAW,SAACyD,GACV,IAAM9I,EAASmF,OAAO4D,UAAUC,eAAeC,KAAKH,EAAQ,UAAYA,EAAO9I,OAAS+E,EAAQ/E,OACxF2E,EAAmDmE,EAAnDnE,SAAUqB,EAAyC8C,EAAzC9C,MAAOzB,EAAkCuE,EAAlCvE,MAAON,EAA2B6E,EAA3B7E,MAAOK,EAAoBwE,EAApBxE,OAAQsE,EAAYE,EAAZF,QAE/CvD,EAAU,EAAD,MAAM2C,EAAAA,EAAAA,IAAY,CAAEzD,MAAAA,EAAON,MAAAA,EAAOK,OAAAA,EAAQsE,QAAAA,EAAS7D,QAAS,CAAEJ,SAAAA,EAAUqB,MAAAA,EAAOhG,OAAAA,MAA/E,IAA4FsD,QAAAA,KAAW4F,MAAK,WAAM,MACzHvF,MAAAA,GAAA,UAAAA,EAAUwF,eAAV,SAAmBC,WAErB9F,IAAWsE,EAAAA,EAAAA,IAAqBrE,EAASU,EAAOK,GAChDhB,IAAW+F,EAAAA,EAAAA,IAAkB9F,EAAS,CAAEoB,SAAAA,EAAUqB,MAAAA,EAAOhG,OAAAA,KAE3DsJ,aAAc,CAAE3E,SAAU,GAAIqB,MAAO,GAAIhG,OAAQ,IACjDuJ,eAAgB,YAAiC,IA/B9BC,EA+BA7E,EAA8B,EAA9BA,SAAUqB,EAAoB,EAApBA,MAAOhG,EAAa,EAAbA,OA/BjBwJ,EAgCH,CACZ7E,cAA8B,IAAbA,EAA2BI,EAAQJ,SAAWA,EAC/DqB,WAAwB,IAAVA,EAAwBjB,EAAQiB,MAAQA,EACtDhG,YAA0B,IAAXA,GAA0BA,IAAW+E,EAAQ/E,OAAS+E,EAAQ/E,OAASA,GAlC5FsD,GAAWmC,EAAkB+D,GAC7B9B,EAAW,EAAD,CAAG/C,SAAU,IAAO6E,KAoC5B5E,UAAWA,EACXT,WAAYA,EACZyB,YAAazC,EACbsG,gBA/CoB,SAACC,GACvBtG,GAAiB,SAACW,GAChB,OAAO2F,EAAa3F,GAAOU,KAAI,gBAAGC,EAAH,EAAGA,KAAH,MAAyB,CAAEA,KAAAA,EAAMiF,MAAjC,EAAShF,UAA2CD,UA8CnFkF,WAAY/J,EAAAA,EACZgK,YAAavL,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwK,cAChDC,cAAezL,EAAKe,cAAcC,EAAAA,EAAAA,MAClCyF,QAAS,CACP,CACEyB,IAAK,WACLwD,MAAOjF,EAAQJ,SACfsF,YAAa3L,EAAKe,cAAcC,EAAAA,EAAAA,YAAsB,CAAEkH,IAAKlI,EAAKe,cAAcC,EAAAA,EAAAA,UAAmBwK,gBACnGnG,SAAAA,GAEF,CACE6C,IAAK,QACLwD,MAAOjF,EAAQiB,MACfiE,YAAa3L,EAAKe,cAAcC,EAAAA,EAAAA,YAAsB,CAAEkH,IAAKlI,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwK,gBAChGnG,SAAAA,GAEF,CACE6C,IAAK,SACLwD,MAAOjF,EAAQ/E,OACf2J,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,QAC1B8B,KAAM,WACN8I,MAAO,CACL,CAAEP,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,QAAkB0K,MAAO,UACrD,CAAEL,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,UAAoB0K,MAAO,eAI7DG,QAAQ,cACJpK,KAKVmD,EAAUxD,UAAY,CACpB6D,QAAS5D,IAAAA,MAAgB,CACvByK,OAAQzK,IAAAA,KAAAA,WACR0K,KAAM1K,IAAAA,KAAAA,aAERoE,MAAOpE,IAAAA,MACP2K,aAAc3K,IAAAA,OACdyD,iBAAkBzD,IAAAA,KAAAA,WAClBwD,cAAexD,IAAAA,MACf0D,UAAW1D,IAAAA,KACXI,MAAOJ,IAAAA,OACP2D,QAAS3D,IAAAA,MAGXuD,EAAUtD,aAAe,CACvBmE,MAAO,GACPZ,cAAe,GACfC,iBAAkB,aAClBC,WAAW,EACXC,SAAS,GAGX,uZC3PA,oiGAAAiH,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAMO,IAAMC,EAAc,mCAAG,WAAOC,EAAWC,EAAOC,GAAzB,kFACtBC,GAAQC,EAAAA,EAAAA,MACRvM,GAAOwM,EAAAA,EAAAA,GAAW,CAAEC,OAAAA,EAAAA,OAAQzL,SAAU0L,GAAoBJ,GAC3DH,EAHuB,8CAInBzH,GAJmB,YAOxByH,EAAUvF,OAAS,KAPK,sBAQpB5G,EAAKe,cAAcC,EAAAA,EAAAA,qBAA+B,CAAE2D,OAAQ,MARxC,wBAWLgI,EAAAA,EAAAA,IAAY,CAAEhH,MAAO,GAAIK,OAAQ,EAAGS,QAAS,CAAEnH,KAAM6M,GAAaS,UAAW,UAA7E,OAA8F,SAAClK,GACpHmK,QAAQnK,MAAMA,MAZY,UAWtBoK,EAXsB,SAgBxBT,EAAKS,MAAAA,GAAH,UAAGA,EAAUhL,YAAb,aAAG,EAAgB+H,MAAK,SAACkD,GAAD,OAAUA,EAAKX,KAAWC,MAAMS,MAAAA,GAAA,UAAAA,EAAUhL,YAAV,eAAgB8E,QAAS,GAhB3D,uBAiBpB5G,EAAKe,cAAcC,EAAAA,EAAAA,kBAjBC,sCAoBrB0D,GApBqB,4CAAH,0DAuBdsI,GAA0BC,EAAAA,EAAAA,IAAc,SAACvB,EAAOU,EAAOC,GAAf,OAAsBH,EAAeR,EAAOU,EAAOC,slBCpBxG,IAAMa,EAAiB,SAAC,GAAmB,MAAjBC,EAAiB,EAAjBA,WAClBnN,GAAOC,EAAAA,EAAAA,KACb,GAA8CO,EAAAA,EAAAA,YAAW4M,IAAjDzK,EAAR,EAAQA,WAAYD,EAApB,EAAoBA,MAAOqB,EAA3B,EAA2BA,eACnBsJ,GAAa7K,EAAAA,EAAAA,WAAb6K,SAQR,OAPAhE,EAAAA,EAAAA,YAAU,WACRtF,OAAeW,GACfwH,EAAemB,IAAWzD,OAAO,eAC9BgB,MAAK,kBAAM7G,GAAe,MAD7B,OAES,kBAAMA,GAAe,QAC7B,SAEkB,IAAVrB,GAAyBC,EAEhC,kBAAC,EAAA2K,SAAD,KACE,kBAAC,EAAAC,QAAD,CAAS/I,KAAK,SAKN,IAAV9B,EAEA,kBAAC,IAAD,CACEJ,QAAS8K,GACTzJ,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,qBAC1B4C,KAAM5D,EAAKe,cAAcC,EAAAA,EAAAA,sBAM7B,kBAAC,aAAD,KACE,kBAAC,EAAAsD,MAAD,CAAOC,aAAa,KAAKC,KAAK,KAAK5D,UAAU,cAC1CZ,EAAKe,cAAcC,EAAAA,EAAAA,gBAErB,CAAC,CAAC,EAAD,GAAMmM,MAAAA,GAAN,UAAMA,EAAa,UAAnB,aAAM,EAAkB,QAKhCD,EAAe9L,UAAY,CACzB+L,WAAY9L,IAAAA,OAGd,gFCzCMmM,EAAqB,SAACrB,EAAWsB,GAAZ,YAA8C/I,IAAdyH,GAA2BsB,EAAiB,QAAU,WAC3GC,EAA4B,SAACC,GAAD,OAAuBA,MAAAA,OAAA,EAAAA,EAAkB/G,QAAS,IAAM,QAAU,WAE9FgH,EAAU,SAACnM,GACf,IAAMzB,GAAOC,EAAAA,EAAAA,KACL4N,GAAUC,EAAAA,EAAAA,GAAYrM,GAAtBoM,MACFtL,GAAcC,EAAAA,EAAAA,WACpB,EAAiED,EAAY8K,WAAWzD,OAAlEtK,EAAtB,EAAQ,cAAyCyO,EAAjD,EAA4B,qBAC5B,GAAkChF,EAAAA,EAAAA,UAASzJ,GAAQ,IAAnD,eAAO6M,EAAP,KAAkB6B,EAAlB,KACA,GAA4CjF,EAAAA,EAAAA,YAA5C,eAAO0E,EAAP,KAAuBQ,EAAvB,KACA,GAAgDlF,EAAAA,EAAAA,UAASgF,GAAzD,eAAOJ,EAAP,KAAyBO,EAAzB,KAEMC,EAAmB,SAACzC,GACxBmC,EAAMO,cAAS1J,GACfsI,EAAwBtB,GACrBd,MAAK,WACJiD,EAAMO,SAAS1C,GACfuC,OAAkBvJ,MAHtB,OAKS,SAAChC,GACNuL,EAAkBvL,MAEtBsL,EAAatC,IAOf,OAJArC,EAAAA,EAAAA,YAAU,YACR8C,MAAAA,OAAA,EAAAA,EAAWvF,QAAS,GAAKuH,EAAiBhC,KACzC,IAGD,kBAAC,EAAAkC,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAW3N,UAAU,8BACnB,kBAAC4N,EAAA,EAAD,CACEnD,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,WAC1ByN,kBAAmBtC,EAAYsB,EAAiBzN,EAAKe,cAAcC,EAAAA,EAAAA,UACnEyC,YAAU,EACViL,UAAWlB,EAAmBrB,EAAWsB,IAEzC,kBAACkB,EAAA,GAAD,CACEjD,MAAOS,EACPrJ,KAAK,OACL4L,UAAWlB,EAAmBrB,EAAWsB,GACzCmB,OAAQ,iBAAoB,KAAdzC,GAAoB6B,OAAatJ,IAC/C0J,SAAU,SAAC1C,GAAD,OAAWyC,EAAiBzC,IACtC,aAAW,iBAIjB,kBAAC,EAAA6C,UAAD,KACE,kBAACC,EAAA,EAAD,CACEnD,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,kBAC1ByN,kBAAmBzO,EAAKe,cAAcC,EAAAA,EAAAA,qBAA+B,CAAE2D,OAAQ,MAC/E+J,UAAWhB,EAA0BC,IAErC,kBAACkB,EAAA,GAAD,CACEnD,MAAOiC,EACPe,UAAWhB,EAA0BC,GACrCS,SAAU,SAAC1C,GACTwC,EAAoBxC,GACpBnJ,EAAYuM,OAAO,oBAAqBpD,IAE1C,aAAW,oBACXqD,kBAAkB,iBAQ9BnB,EAAQxM,UAAY,CAClB9B,KAAM+B,IAAAA,OACN0M,YAAa1M,IAAAA,OACb2N,OAAQ3N,IAAAA,OAGV,qoBC5EA,IAgBM4N,GAAY,SAAC,GAAuD,IAArDC,EAAqD,EAArDA,cAAeC,EAAsC,EAAtCA,iBAAkBC,EAAoB,EAApBA,cAC9CpP,GAAOC,EAAAA,EAAAA,KACPkF,GAAWC,EAAAA,EAAAA,eACXiK,GAAgB/J,EAAAA,EAAAA,QAAO,MAiB7B,GAA2DE,EAAAA,EAAAA,aAAY4J,EAV1C,SAAC,GAAD,QAC3BE,aACEC,cAAiBC,EAFQ,EAERA,SAAUpJ,EAFF,EAEEA,KAFF,MAItB,CACLqJ,MAAOD,EAASC,MAChB5J,WAAY2J,EAAS3J,YAAT,SAA4BE,EAAAA,IAA5B,IAA6CE,MAAOwJ,GAASA,EAAM7I,SAC/EN,WAAYkJ,EAASE,OACrBC,QAASvJ,IAdM,SAAC,GAAD,QAAGwJ,YAAeH,EAAlB,EAAkBA,MAAOnJ,EAAzB,EAAyBA,UAAzB,MAA4C,CAC3DmJ,MAAOA,EAAM3N,KACb+D,WAAY4J,EAAM7J,KAClBU,UAAWA,EACXG,QAASgJ,EAAMhJ,UAYuGoJ,EAAAA,cAAhHJ,EAAR,EAAQA,MAAO5J,EAAf,EAAeA,WAAYS,EAA3B,EAA2BA,UAAWqJ,EAAtC,EAAsCA,QAASlJ,EAA/C,EAA+CA,QAE9BkC,GAAYrD,EAAAA,EAAAA,QAAO,CAAC,IACjC3B,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAAgBkH,IAAK,gBAAoBkH,EAAgB,CAAE9E,QAAS,QAAW,CAAE1B,WAAY,CAACE,EAAAA,YAC1H,CAAEnF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,gBAFtB6J,QAKR,GAAsC9B,EAAAA,EAAAA,UAAS,IAA/C,eAAO+G,EAAP,KAAoB7E,EAApB,KACA,GAAsClC,EAAAA,EAAAA,UAAS,CAAEC,MAAO,EAAGC,UAAW,QAAtE,eAAOC,EAAP,KAAoBC,EAApB,KAQM4G,GAAa/I,EAAAA,EAAAA,cACjB,SAAC2I,EAASnF,GAAV,OAAsCrF,EAAhBiK,GAAyBY,EAAAA,EAAAA,IAAsBL,EAASnF,IAAoByF,EAAAA,GAAAA,KAAuBvG,EAAAA,EAAAA,IAAYc,OACrI,CAAC4E,IAMG9E,EAAU,GAAH,OAAiC,UAA3BpB,MAAAA,OAAA,EAAAA,EAAaD,WAAuB,IAAM,IAAhD,OAAqDN,EAAQO,MAAAA,OAAD,EAACA,EAAaF,OAAOd,KACxFb,EA7DW,SAACvF,GAA2B,IAArBwF,EAAqB,uDAAP,GACtC,OAAOxF,EACHA,EAAKyF,QACH,SAACC,EAAD,OAAQpB,EAAR,EAAQA,KAAM8J,EAAd,EAAcA,aAAc5Q,EAA5B,EAA4BA,KAAMyO,EAAlC,EAAkCA,YAAlC,wBACKvG,GADL,CAEE,CACEpB,KAAAA,EACA6B,MAAO,CAACiI,GAAgB5Q,EAAMyO,GAC9BxF,SAAUC,QAAQlB,GAAeA,EAAYmB,MAAK,SAACjH,GAAD,OAASA,EAAI4E,OAASA,WAG5E,IAEF,GAgDSsC,CAAW+G,EAAOP,GAM/B,OAJA7F,EAAAA,EAAAA,YAAU,WACR0G,EAAWJ,EAAD,GAAC,MAAc9J,GAAf,IAA2ByE,QAAAA,OACpC,IAGD,kBAAC,KAAD,CACEL,cAAY,EACZD,WAAS,EACTE,SAAS,EACTvB,QAASA,EACTtB,KAAMA,EACN8C,OAAQjB,EACRkB,OAAQ,SAACC,EAAGrB,EAAOC,EAAWgB,GAC5B,IAAMK,EAAU,GAAH,OAAoB,SAAdrB,EAAuB,IAAM,IAAnC,OAAwCN,EAAQsB,EAAejB,EAAQ,EAAIA,GAAOd,KAC/FiB,EAAe,CAAEH,MAAAA,EAAOC,UAAAA,IArBP,SAAC0G,EAASnF,GAC/B,IAAQlL,EAAwCkL,EAAxClL,KAAM2G,EAAkCuE,EAAlCvE,MAAON,EAA2B6E,EAA3B7E,MAAOK,EAAoBwE,EAApBxE,OAAQsE,EAAYE,EAAZF,QAC7ByF,EAAWJ,GAASjG,EAAAA,EAAAA,IAAY,CAAEzD,MAAAA,EAAON,MAAAA,EAAOK,OAAAA,EAAQsE,QAAAA,EAAS7D,QAAS,CAAEyJ,aAAc5Q,MAoB7F6Q,CAAeR,EAAD,GAAC,MACV9J,GADS,IAEZG,OAAQ,EACRsE,QAAAA,IACI7D,MAAAA,OAAA,EAAAA,EAASG,QAAS,EAAlB,MAEKH,EAAQc,QACT,SAACC,EAAK4I,GAAN,UAAC,MACI5I,GADL,cAEG4I,EAAKlI,IAAMkI,EAAK1E,UAEnB,KAGJ,CAAEpM,KAAMwQ,MAGhBhO,KAAM2N,EACNK,YAAaA,EACbO,kBAAmBrQ,EAAKe,cAAcC,EAAAA,EAAAA,UAAmBwK,cACzDzE,UAAW,SAACyD,GAAD,OAAYuF,EAAWJ,EAAD,GAAC,MAAcnF,GAAf,IAAuB/D,QAAS,CAAEyJ,aAAc1F,EAAOlL,UACxF2L,eAAgB,gBAAG3L,EAAH,EAAGA,KAAH,OAAc2L,EAAe3L,IAC7CgH,UAAWA,EACXiE,OAAO,cACP1E,WAAYA,EACZyB,YAAa4H,EACb/D,gBA1DoB,SAACC,GACvB+D,GAAiB,SAACM,GAChB,OAAOrE,EAAaqE,GAAOtJ,KAAI,gBAAGC,EAAH,EAAGA,KAAM9G,EAAT,EAASA,KAAT,MAA4B,CAAE8G,KAAAA,EAAMiF,MAApC,EAAeA,OAAqC/L,UAyDnFiM,YAAavL,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwK,cAChDC,cAAezL,EAAKe,cAAcC,EAAAA,EAAAA,MAClC6K,QAAQ,aACRwD,cAAeA,KAKrBJ,GAAU7N,UAAY,CACpBkP,QAASjP,IAAAA,KACT8N,iBAAkB9N,IAAAA,KAAAA,WAClB6N,cAAe7N,IAAAA,MACf+N,cAAe/N,IAAAA,KAAAA,YAGjB4N,GAAU3N,aAAe,CACvBmO,MAAO,GACP5J,WAAY0K,EAAAA,GACZD,SAAS,GAGX,YChIA,IAAME,GAAW,SAAC/O,GAChB,IAAMzB,GAAOC,EAAAA,EAAAA,KACb,GAA0C8I,EAAAA,EAAAA,UAAS,IAAnD,eAAOmG,EAAP,KAAsBC,EAAtB,KACQtB,GAAUC,EAAAA,EAAAA,GAAYrM,GAAtBoM,MACFtL,GAAcC,EAAAA,EAAAA,WAWpB,OATA6G,EAAAA,EAAAA,YAAU,WACR8F,EAAiB5M,EAAY8K,WAAWzD,OAAO,eAAiB,MAC/D,KAEHP,EAAAA,EAAAA,YAAU,WACRwE,EAAMO,SAASc,GACf3M,EAAYuM,OAAO,aAAcI,KAChC,CAACA,IAGF,kBAAC,EAAAtM,SAAD,KACE,kBAAC,EAAAyL,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAkC,YAAD,KACE,kBAAC,EAAA9P,KAAD,KAAOX,EAAKe,cAAcC,EAAAA,EAAAA,4BAG9B,kBAAC,EAAAuN,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWkC,QAAQ,eACjB,kBAAC,GAAD,CAAWxB,cAAeA,EAAeC,iBAAkBA,EAAkBC,eAAe,SAQxGoB,GAASpP,UAAY,CACnB8N,cAAe7N,IAAAA,MACf8N,iBAAkB9N,IAAAA,KAClBsC,MAAOtC,IAAAA,OACP0M,YAAa1M,IAAAA,QAGf,wCCvCMsP,GAAW,SAAClP,GAChB,OAA0CsH,EAAAA,EAAAA,UAAS,IAAnD,eAAOlE,EAAP,KAAsBC,EAAtB,KACQ+I,GAAUC,EAAAA,EAAAA,GAAYrM,GAAtBoM,MACF7N,GAAOC,EAAAA,EAAAA,KACPsC,GAAcC,EAAAA,EAAAA,WAWpB,OATA6G,EAAAA,EAAAA,YAAU,WACRvE,EAAiBvC,EAAY8K,WAAWzD,OAAO,eAAiB,MAC/D,KAEHP,EAAAA,EAAAA,YAAU,WACRwE,EAAMO,SAASvJ,GACftC,EAAYuM,OAAO,aAAcjK,KAChC,CAACA,IAGF,kBAAC,EAAAjC,SAAD,KACE,kBAAC,EAAAgO,KAAD,KACE,kBAAC,EAAAvC,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAkC,YAAD,KACE,kBAAC,KAAD,CAAY3Q,gBAAiBE,EAAKe,cAAcC,EAAAA,EAAAA,uBAGpD,kBAAC,EAAAuN,UAAD,KACE,kBAAC,EAAAC,UAAD,CAAWkC,QAAQ,eACjB,kBAAC,EAAAG,KAAD,KACE,kBAAC,KAAD,CAAWhM,cAAeA,EAAeC,iBAAkBA,EAAkBE,SAAO,WAUpG2L,GAASvP,UAAY,CACnByD,cAAexD,IAAAA,MACfyD,iBAAkBzD,IAAAA,KAClBsC,MAAOtC,IAAAA,OACP0M,YAAa1M,IAAAA,QAGf,YChDA,IAAMyP,GAAiB,WACrB,IAAM9Q,GAAOC,EAAAA,EAAAA,KAEb,GADoBuC,EAAAA,EAAAA,WAMJ6K,WAAWzD,OAJXtK,EADhB,EACE,cACqByO,EAFvB,EAEE,qBACclJ,EAHhB,EAGE,cACcqK,EAJhB,EAIE,cAGF,OACE,yBAAKtO,UAAU,QACb,kBAAC,EAAAyN,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAF,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,CAAW3N,UAAU,8BACnB,kBAAC,EAAAmQ,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,aAGxB,kBAAC,EAAAgQ,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBxB,KAGtC,kBAAC,EAAAyR,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,oBAGxB,kBAAC,EAAAgQ,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBiN,KAGtC,kBAAC,EAAAgD,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,SAGxB,kBAAC,EAAAgQ,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GACdoO,EAAc/I,KAAI,SAAC+K,EAAMlI,GAAP,OACjB,kBAAC,EAAArI,KAAD,CAAMC,UAAU,YAAYsH,IAAKc,GAC9BkI,EAAK7F,aAMhB,kBAAC,EAAA0F,KAAD,KACE,kBAAC,EAAAC,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GAAiBF,UAAU,kBACzCZ,EAAKe,cAAcC,EAAAA,EAAAA,WAGxB,kBAAC,EAAAgQ,SAAD,CAAUC,GAAI,GACZ,kBAAC,EAAAtQ,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GACd+D,EAAcsB,KAAI,SAAC+K,EAAMlI,GAAP,OACjB,kBAAC,EAAArI,KAAD,CAAMC,UAAU,YAAYsH,IAAKc,GAC9BkI,EAAK7F,mBAc9ByF,GAAe1P,UAAY,CACzB9B,KAAM+B,IAAAA,OACN0M,YAAa1M,IAAAA,OACb2N,OAAQ3N,IAAAA,OAGV,mnBCrEO,IAAM+L,IAAwB+D,EAAAA,EAAAA,eAAc,CACjD1O,SAAS,EACTE,YAAY,EACZD,WAAOgC,IAGH0M,GAAe,SAAC3P,GAAD,OAAW,kBAAC,MAAD,UAAqBA,EAArB,CAA4B4P,kBAAkB,MAExEC,GAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAYC,GAAf,oBAA0B,kBAACD,EAAYC,IAC3DF,GAAYlQ,UAAY,CACtBmQ,QAASlQ,IAAAA,YAAAA,YAGJ,IAAMoQ,GAAkB,CAC7B1D,YAAauD,GACb,WAAY1D,EACZ,YAAa4C,GACb,YAAaG,GACb,kBAAmBG,IAGR5N,GAAW,SAACwO,EAAeC,EAAkBC,GAAlC,OAAmD,SAACC,GAC1ED,EAAaC,GACThL,OAAOC,KAAK+K,GAAUjL,OAAS,EACjC+K,GAAiB,GAEjBD,MAIEI,GAAiB,SAAC,GAAwC,IAAtCC,EAAsC,EAAtCA,WAAYlM,EAA0B,EAA1BA,WAAYY,EAAc,EAAdA,QAC1CtB,GAAWC,EAAAA,EAAAA,eACXpF,GAAOC,EAAAA,EAAAA,KACP+R,GAAS1M,EAAAA,EAAAA,QC1CY,WAC3B,IAAMgH,GAAQC,EAAAA,EAAAA,MACRvM,GAAOwM,EAAAA,EAAAA,GAAW,CAAEC,OAAAA,EAAAA,OAAQzL,SAAU0L,GAAoBJ,GAChE,MAAO,CACL2F,OAAQ,CACN,CACEpR,UAAW,SACXvB,KAAM,SACN4S,WAAW,EACXlN,SAAS,EACTmN,YAAY,EACZxO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,aAC1BiR,OAAQ,CACN,CACE3S,KAAM,uBACN8D,SAAU,YACVO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,oBAC1BiR,OAAQ,CACN,CACEpR,UAAW,WACXvB,KAAM,aACN8S,SAAU,CACR,CACEtP,KAAMuP,EAAAA,EAAAA,YAIZ,CACExR,UAAWyR,EAAAA,EAAAA,SACXhT,KAAM,oBACNiT,WAAW,EACXH,SAAU,CACR,CACEtP,KAAMuP,EAAAA,EAAAA,WACNG,UAAW,SAMrB,CACElT,KAAM,YACN8D,SAAU,YACVO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAC1BiR,OAAQ,CACN,CACEpR,UAAW,YACXvB,KAAM,gBAIZ,CACEA,KAAM,YACN8D,SAAU,SACVO,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,YAC1BiR,OAAQ,CACN,CACEpR,UAAW,YACXvB,KAAM,gBAIZ,CACEA,KAAM,SACNqE,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,eAE1ByR,QAAS,SAAChR,GAAD,OAAW,kBAAC,KAAD,UAAuBA,EAAvB,CAA8Ba,QAAS8K,OAC3DsF,aAAcxF,EACd+E,OAAQ,CACN,CACEpR,UAAW,kBACXvB,KAAM,yBD7BEqT,IACd5G,GAAS7G,EAAAA,EAAAA,cAAT6G,KACR,GAAwDhD,EAAAA,EAAAA,WAAS,GAAjE,eAAO6J,EAAP,KAA6BC,EAA7B,KACA,GAAkC9J,EAAAA,EAAAA,UAAS,IAA3C,eAAO+J,EAAP,KAAkBlB,EAAlB,KACA,GAAoD7I,EAAAA,EAAAA,UAAS,CAC3DtG,SAAS,EACTE,YAAY,EACZD,WAAOgC,EACPqO,UAAU,IAJZ,eAAOC,EAAP,KAA2BC,EAA3B,KAOMC,EAAmB,WACvB/N,GACEgO,EAAAA,EAAAA,iBAAgB,CACdpQ,QAAS,UACTY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,kBAC1BoS,aAAc,IACdrF,YAAa/N,EAAKe,cAAcC,EAAAA,EAAAA,mCAGpC+K,EAAK,CACHsH,SAAUC,GAAAA,EAAAA,OAAAA,KACV3M,QAAQ4M,EAAAA,EAAAA,IAAkB,IAAEC,KAAM,EAAGC,SAAU5N,EAAWF,OAAUc,OAiCxE,OAAOmM,EACL,kBAAC,IAAD,CACE9P,KAAK,QACL4Q,OAAQd,EACRe,cAAe,kBAAMd,GAAwB,IAC7Ce,gBAAiBV,IAGnB,kBAAC9F,GAAsByG,SAAvB,CAAgCnI,MAAK,SAAOsH,GAAP,IAA2BjP,eArC3C,SAACrB,GAAD,OAAWuQ,GAAsB,SAACa,GAAD,UAAC,MAAeA,GAAhB,IAAsBpR,MAAAA,QAqCIqR,iBApCzD,SAACtR,GAAD,OAAawQ,GAAsB,SAACa,GAAD,UAAC,MAAeA,GAAhB,IAAsBrR,QAAAA,QAoCkBuR,YAnChF,SAACjB,GAAD,OAAcE,GAAsB,SAACa,GAAD,UAAC,MAAeA,GAAhB,IAAsBf,SAAAA,WAoC1E,kBAAC,IAAD,CACEf,OAAQA,EAAOnH,QACfoJ,aAAc,CAAErK,QAAQ,GACxBwH,aAAcA,GACd8C,gBAAe,SAAOA,EAAAA,IAAoBzC,IAC1C0C,SAvCW,SAACtC,GAChB,IAAMiB,EAAY,CAChBxT,KAAMuS,EAAS,cACf9D,YAAa8D,EAAS,qBACtBuC,UAAWvC,EAAS,cAAc1L,KAAI,SAACkO,GAAD,MAAW,CAAEhO,SAAUgO,EAAKhJ,UAClEiJ,WAAYzC,EAAS,cAAc1L,KAAI,SAAC+K,GAAD,OAAUA,EAAK9K,SAExD2F,EAAK,CACHsH,SAAUC,GAAAA,EAAAA,OAAAA,KACV3M,QAAQ4M,EAAAA,EAAAA,IAAkB,CAAEC,KAAM,EAAGC,SAAU5N,EAAWF,UAE5DR,GAASoP,EAAAA,EAAAA,IAASzB,IACflI,MAAK,kBAAMmH,EAAW,CAAEpM,MAAOE,EAAWF,MAAOK,OAAQ,EAAGS,QAAS,QACrEmE,MAAK,WACJzF,GACEgO,EAAAA,EAAAA,iBAAgB,CACdpQ,QAAS,UACTY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,sBAC1BoS,aAAc,IACdrF,YAAa/N,EAAKe,cAAcC,EAAAA,EAAAA,mCAqBpCwT,cAAe1B,EACf5P,SAAUA,GAASgQ,EAAkBL,EAAyBjB,OAMtEE,GAAe1Q,UAAY,CACzB2Q,WAAY1Q,IAAAA,KACZwE,WAAYxE,IAAAA,MAAgB,CAC1BsE,MAAOtE,IAAAA,OAAAA,aACNoC,WACHgD,QAASpF,IAAAA,OAAAA,YAGX,6nBExHA,IAAMoT,GAAiB,SAAC,GAUlB,IATJtB,EASI,EATJA,gBACAuB,EAQI,EARJA,YACA3C,EAOI,EAPJA,WACAlM,EAMI,EANJA,WACAY,EAKI,EALJA,QACAkO,EAII,EAJJA,YAII,IAHJC,YAAAA,OAGI,MAHUD,EAGV,EAFJE,EAEI,EAFJA,MACAC,EACI,EADJA,QAEM9U,GAAOC,EAAAA,EAAAA,KACb,GAA0C8I,EAAAA,EAAAA,eAASrE,GAAnD,eAAO6K,EAAP,KAAsBwF,EAAtB,KAEQhJ,GAAS7G,EAAAA,EAAAA,cAAT6G,KACFiJ,GAAQC,EAAAA,EAAAA,eAAc,oBAEtBrD,EAAe,SAACkB,GACpBiC,EAAiBjC,KAUnBzJ,EAAAA,EAAAA,YAAU,WANR2L,IACEE,EAAAA,EAAAA,IAAWF,EAAMG,OAAO9I,IACrBnB,QAAQN,MAAK,SAAC9I,GAAD,OAAU8P,EAAa9P,MADvC,OAES,kBAAM8P,OAAalN,QAK7B,KAEH2E,EAAAA,EAAAA,YAAU,WACR0L,EAAiBF,KAChB,CAACA,IAEJ,IAaM3R,EAAW,WACfiQ,EAAgB,CACdpQ,QAAS,UACTqQ,aAAc,IACdzP,MAAO3D,EAAKe,cAAcwO,EAAgBvO,EAAAA,EAAAA,kBAA6BA,EAAAA,EAAAA,kBACvE+M,YAAa/N,EAAKe,cAAcwO,EAAgBvO,EAAAA,EAAAA,6BAAwCA,EAAAA,EAAAA,kCAE1F8T,IACA/I,EAAK4I,IAGD3C,EAAS,CACbC,OAAQ,CAAC,OAEL3S,KAAM,OACN+L,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,MAC1BH,UAAW0O,EAAgB+C,EAAAA,EAAAA,WAA4B,YACnD/C,EAAgB,CAAE6F,iBAAiB,GAAS,IAL5C,IAMJhD,SAAU,CACR,CAAEtP,KAAM,sBAAuBuJ,GAAI2I,EAAQA,EAAMG,OAAO9I,GAAKwI,EAAMzO,KAAMgG,MAAO,QAChF,CACEtJ,KAAMuP,EAAAA,EAAAA,aAIZ,CACE/S,KAAM,cACN+L,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,aAC1BH,UAAW0O,EAAgB+C,EAAAA,EAAAA,SAA0B,WACrDF,SAAU,CACR,CACEtP,KAAMuP,EAAAA,EAAAA,WACNG,UAAW,SAOf6C,EAAkB,CACtB,sBACE,gBAAGjJ,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACA,SAACX,GAAD,OACEsB,EAAwBtB,EAAOU,EAAOC,MAG5C,OACE,kBAAC,KAAD,CACE2F,OAAQA,EACRkC,gBAAe,SACVA,EAAAA,IADU,IAEboB,SAAUC,EAAAA,WAEZrS,SAAUA,EACViR,SAnEa,SAACrS,GAChB,IAAM0T,EAAY,CAChBpP,KAAMtE,EAAKsE,KACX2H,YAAajM,EAAKiM,aAAe,KACjCzO,KAAMwC,EAAKxC,MAEbyS,EACI2C,EAAYc,GACT5K,MAAK,kBAAMmH,EAAW,CAAEpM,MAAOE,MAAAA,OAAF,EAAEA,EAAYF,MAAOc,QAAAA,OAClDmE,KAAKmB,EAAK6I,IACbF,EAAYc,GAAW5K,MAAK,kBAAMmB,EAAK6I,OA0DzCS,gBAAiBA,EACjBb,cAAa,MAAOjF,GACpB6B,aAAc,SAAC3P,GAAD,OACZ,kBAACgU,GAAA,GAAD,UACMhU,EADN,CAEEiU,WAAY,CAAEZ,QAAS5R,EAAUwQ,QAAQ,EAAM3Q,QAAS,SAAUY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,uBAOtGyT,GAAenT,aAAe,CAC5BqT,YAAagB,GAAAA,EAAAA,OAAAA,KACbb,QAAS,kBAAM,MACfX,SAAU,kBAAM,OAGlBM,GAAerT,UAAY,CACzB+R,gBAAiB9R,IAAAA,KAAAA,WACjB6T,WAAY7T,IAAAA,KAAAA,WACZuU,WAAYvU,IAAAA,OACZqT,YAAarT,IAAAA,KAAAA,WACb0Q,WAAY1Q,IAAAA,KACZwE,WAAYxE,IAAAA,MAAgB,CAC1BsE,MAAOtE,IAAAA,OAAAA,aACNoC,WACHgD,QAASpF,IAAAA,OAAAA,WACTsT,YAAatT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdgS,SAAUhS,IAAAA,OAAAA,WACVsF,OAAQtF,IAAAA,OACRwU,KAAMxU,IAAAA,WAGVuT,YAAavT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdgS,SAAUhS,IAAAA,OAAAA,WACVsF,OAAQtF,IAAAA,OACRwU,KAAMxU,IAAAA,WAGVwT,MAAOxT,IAAAA,OACPyT,QAASzT,IAAAA,MAiBX,UAAeyU,EAAAA,EAAAA,UAdS,SAAC,GAAD,MAAsC,CAC5DxP,UADsB,EAAGgJ,aAAgBhJ,cAIhB,SAACnB,GAAD,OACzB4Q,EAAAA,GAAAA,IACE,CACE5C,gBAAAA,EAAAA,gBACAuB,YAAAA,EAAAA,GACAQ,WAAAA,EAAAA,IAEF/P,KAGJ,CAA4DsP,4CC1KtDuB,GAAmB,SAAC,GAYpB,IAXJC,EAWI,EAXJA,aACApB,EAUI,EAVJA,MACAvO,EASI,EATJA,UACA4O,EAQI,EARJA,WACAgB,EAOI,EAPJA,WACAC,EAMI,EANJA,YACApE,EAKI,EALJA,WACAlM,EAII,EAJJA,WACAY,EAGI,EAHJA,QACAkO,EAEI,EAFJA,YAEI,IADJC,YAAAA,OACI,MADUD,EACV,EACE3U,GAAOC,EAAAA,EAAAA,MACboJ,EAAAA,EAAAA,YAAU,WACkB,IAAtB6M,EAAWtP,QACbsO,EAAWgB,EAAW,GAAG9P,QAE1B,IAEH,IAAQ2F,GAAS7G,EAAAA,EAAAA,cAAT6G,KAER,GAA8BhD,EAAAA,EAAAA,WAAS,GAAvC,eAAOqN,EAAP,KAAgBC,EAAhB,KAEMC,EAAiBJ,EAAWtP,OAAS,EASrC1D,EAAW,kBAAM6I,EAAK4I,IAE5B,OACE,kBAAC,EAAA4B,MAAD,CACE3V,UAAU,OACV8S,OAAQyC,EACRpT,QAASyT,EAAAA,aAAAA,MACT7S,MACE,kBAAC,EAAAhD,KAAD,KACE,kBAAC,MAAD,CAAyBC,UAAU,8BADrC,KAEUZ,EAAKe,cAAcuV,EAAiBtV,EAAAA,EAAAA,qBAAgCA,EAAAA,EAAAA,sBAGhF8T,QAAS5R,EACTuT,QAAS,CACP,kBAAC,EAAA5T,OAAD,CAAQqF,IAAI,SAASlF,YAAaoT,EAASrT,QAAQ,SAASD,KAAK,SAASG,QAtB/D,WACf,IAAMyT,EAAQR,EAAW/P,KAAI,SAAC0O,GAAD,OAAWA,EAAMzO,QAC9C6P,EAAaS,GACV9L,MAAK,kBAAMmH,EAAW2E,EAAO,CAAE/Q,MAAOE,MAAAA,OAAF,EAAEA,EAAYF,MAAOc,QAAAA,OACzDmE,KAAKmB,EAAK6I,MAmBN5U,EAAKe,cAAcuV,EAAiBtV,EAAAA,EAAAA,aAAwBA,EAAAA,EAAAA,cAE/D,kBAAC,EAAA6B,OAAD,CAAQqF,IAAI,SAASnF,QAAQ,OAAOD,KAAK,SAASG,QAASC,GACxDlD,EAAKe,cAAcC,EAAAA,EAAAA,WAIxB,kBAAC,EAAAyP,YAAD,KACG6F,EACC,kBAAC,EAAA3V,KAAD,KACE,kBAAC,MAAD,UACMK,EAAAA,EAAAA,2BADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,IACjBqC,MAAOiQ,EAAWtP,YAItBN,EACF,kBAAC,MAAD,MAEA,kBAAC,EAAA3F,KAAD,KACE,kBAAC,MAAD,UACMK,EAAAA,EAAAA,0BADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,IACjBtE,KAAMuV,EAAMvV,WAvCxB,IA8CE,kBAAC,EAAAsX,SAAD,CACEC,UAAWT,EACXhI,SAAU,kBAAMiI,GAAYD,IAC5B/K,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,8BAC1BqL,GAAG,yBAMX2J,GAAiB1U,aAAe,CAC9B6U,aAAa,EACbtB,MAAO,GACPqB,WAAY,GACZ5P,WAAW,EACXwQ,UAAWnB,GAAAA,EAAAA,OAAAA,MAGbK,GAAiB5U,UAAY,CAC3B+U,YAAa9U,IAAAA,KACb4U,aAAc5U,IAAAA,KAAAA,WACd6T,WAAY7T,IAAAA,KAAAA,WACZ0Q,WAAY1Q,IAAAA,KACZwE,WAAYxE,IAAAA,MAAgB,CAC1BsE,MAAOtE,IAAAA,OAAAA,aACNoC,WACHgD,QAASpF,IAAAA,OAAAA,WACTiF,UAAWjF,IAAAA,KACXwT,MAAOxT,IAAAA,OACP6U,WAAY7U,IAAAA,MACZuT,YAAavT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdgS,SAAUhS,IAAAA,OAAAA,WACVsF,OAAQtF,IAAAA,OACRwU,KAAMxU,IAAAA,WAGVsT,YAAatT,IAAAA,UAAoB,CAC/BA,IAAAA,OACAA,IAAAA,MAAgB,CACdgS,SAAUhS,IAAAA,OAAAA,WACVsF,OAAQtF,IAAAA,OACRwU,KAAMxU,IAAAA,YAmBZ,UAAeyU,EAAAA,EAAAA,UAdS,SAAC,GAAD,IAAmBvG,EAAnB,EAAGD,aAAgBC,cAAnB,MAA0C,CAChEsF,MAAOtF,EACPjJ,WAAYiJ,EAAcG,WAGD,SAACvK,GAAD,OACzB4Q,EAAAA,GAAAA,IACE,CACEb,WAAAA,EAAAA,GACAe,aAAAA,EAAAA,IAEF9Q,KAGJ,CAA4D6Q,mECnJtDe,GAAyB,SAAC,GAA8B,IAA5B1K,EAA4B,EAA5BA,GAAIjG,EAAwB,EAAxBA,KAAM4Q,EAAkB,EAAlBA,YAC1C,GAA8CjO,EAAAA,EAAAA,WAAS,GAAvD,eAAOkO,EAAP,KAAyBC,EAAzB,KACMC,GAAiB7R,EAAAA,EAAAA,QAAO,MAE9B,OACE,0BAAM8R,IAAKD,EAAgBjP,IAAG,UAAK9B,EAAL,YAAqBiG,GAAIA,GACrD,kBAAC,EAAAgL,QAAD,CACEC,OAAO,MACPC,SAAS,QACTC,UAAWP,EACXQ,YAAa,kBAAMP,GAAkB,IACrCQ,oBAAkB,EAClBV,YAAaA,EACbW,SAAUR,EAAetM,SAEzB,kBAAC,MAAD,CACE5H,QAAS,kBAAMiU,GAAmBD,IAClCrW,UAAWiB,IAAAA,CAAW,4BAA6B,CAAE,cAAeoV,SAO9EF,GAAuB3V,UAAY,CACjCiL,GAAIhL,IAAAA,OAAAA,WACJ+E,KAAM/E,IAAAA,OAAAA,WACN2V,YAAa3V,IAAAA,OAAAA,YAGR,IAAMqH,GAAa,SAACkP,EAAS9V,EAAM+V,GAA+B,IAAtBC,EAAsB,uDAAP,GAC1D9X,GAAOC,EAAAA,EAAAA,KACb,OAAO6B,EAAKyF,QACV,SAACC,EAAD,OAAQpB,EAAR,EAAQA,KAAM9G,EAAd,EAAcA,KAAMyY,EAApB,EAAoBA,UAAWC,EAA/B,EAA+BA,eAAgBC,EAA/C,EAA+CA,SAA4BC,EAA3E,EAAyDC,iBAAoDC,EAA7G,EAA8FC,cAA9F,wBACK7Q,GADL,CAEE,CACEpB,KAAAA,EACAgS,eAAAA,EACAF,kBAAAA,EACAjQ,MAAO,CACL,kBAAC,EAAArF,SAAD,CAAUsF,IAAK9B,GACb,yBAAKxF,UAAU,oBACZgX,EACC,kBAAC,EAAAzP,KAAD,CAAMD,IAAG,UAAK9B,EAAL,SAAkBkS,MAAO,CAAElS,KAAAA,GAAQgC,GAAI,CAAEiL,SAAU,kBAAF,OAAoB6E,EAAoB,iBAAmB9R,KAClH9G,GAGHA,GAEA4Y,GAAqBE,IACrB,kBAACrB,GAAD,CACE1K,GAAE,iBAAY+L,EAAiB,SAAW,GAAxC,kBACFhS,KAAMA,EACN8B,IAAG,UAAK9B,EAAL,YACH4Q,YAAahX,EAAKe,cAAcqX,EAAiBpX,EAAAA,EAAAA,uBAAkCA,EAAAA,EAAAA,yBAK3F+W,EACAC,EACA,kBAAC,EAAApV,SAAD,CAAUsF,IAAG,UAAK9B,EAAL,cACX,kBAACmS,GAAA,EAAD,CAAYC,KAAMP,EAAUnV,MAAM2V,EAAAA,EAAAA,IAAcR,OAGpD1P,SAAUC,QAAQsP,GAAgBA,EAAarP,MAAK,SAACjH,GAAD,OAASA,EAAI4E,OAASA,WAG9E,KCzEEsS,GAAU,SAAC,GAAsE,IAAzD3M,EAAyD,EAApE9G,QAAW8G,KAAoBsH,EAAqC,EAAjD3M,SAAY2M,SAAYsF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAChEC,EAAYF,EAASlQ,MAAK,gBAAGnJ,EAAH,EAAGA,KAAH,OAAc+T,EAASyF,SAASxZ,MAGhE,OACE,kBAAC,EAAAyZ,KAAD,CAAMnY,UAAWgY,EAAW,yBAA2B,GAAII,UAAWH,EAAYA,EAAUI,SAAW,EAAGC,SAHrF,SAACC,EAAQC,GAAT,OAAsBrN,EAAK4M,EAASS,GAAU9Z,QAIhEqZ,EAASxS,KAAI,SAAC4G,GAAD,OACZ,kBAAC,EAAAsM,IAAD,CAAK1V,MAAOoJ,EAAKpJ,MAAOuE,IAAK6E,EAAKkM,SAAUA,SAAUlM,EAAKkM,SAAU3Z,KAAMyN,EAAKzN,YAMxFoZ,GAAQtX,UAAY,CAClBsF,SAAUrF,IAAAA,MAAgB,CACxBgS,SAAUhS,IAAAA,OAAAA,aAEZ4D,QAAS5D,IAAAA,MAAgB,CACvB0K,KAAM1K,IAAAA,KAAAA,aAERsX,SAAUtX,IAAAA,MAAAA,WACVuX,SAAUvX,IAAAA,MAGZ,UAAeiY,EAAAA,EAAAA,YAAWZ,oBCzBbhQ,GAAa,SAAC5G,EAAM+V,GAA8B,IAArBvQ,EAAqB,uDAAP,GAChDtH,GAAOC,EAAAA,EAAAA,KACb,OAAO6B,EAAKyF,QACV,SAACC,EAAD,OAAmB7F,EAAnB,EAAQ8F,UAAqBpB,EAA7B,EAA6BA,SAAUqB,EAAvC,EAAuCA,MAAmBC,EAA1D,EAA8CC,WAAkCC,EAAhF,EAAqEC,UAArE,wBACKN,GADL,CAEE,CACEpB,KAAMC,EACNA,SAAAA,EACA4B,MAAO,CACL,CACEtE,MAAO,kBAAC,EAAA2E,MAAD,CAAOnE,MAAOxC,GAAY,SAAU3B,EAAKe,cAAcY,EAAWX,EAAAA,EAAAA,OAAkBA,EAAAA,EAAAA,WAC3FS,MAAO,CACLK,KAAM,CAAEH,SAAAA,KAGZ0E,EACAqB,EACAG,EACAF,GAEFY,SAAUjB,EAAYmB,MAAK,SAACjH,GAAD,OAASA,EAAI4E,OAASC,UAGrD,KCfEkT,GAAkB,SAAC,GAUnB,IATOxN,EASP,EATJ9G,QAAW8G,KAEC3F,EAOR,EARJ4O,MACEG,OAAU/O,KAEZ+M,EAKI,EALJA,gBACAqG,EAII,EAJJA,SACAC,EAGI,EAHJA,kBACAC,EAEI,EAFJA,qBACA/M,EACI,EADJA,YAEA,GAA0C5D,EAAAA,EAAAA,UAAS,IAAnD,eAAOlE,EAAP,KAAsBC,EAAtB,KACM9E,GAAOC,EAAAA,EAAAA,KAmBPiD,EAAW,WACfiQ,EAAgB,CACdpQ,QAAS,UACTY,MAAO3D,EAAKe,cAAc8D,EAAc+B,OAAS,EAAI5F,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACxFoS,aAAc,IACdrF,YAAa/N,EAAKe,cAAc8D,EAAc+B,OAAS,EAAI5F,EAAAA,EAAAA,4BAAuCA,EAAAA,EAAAA,8BAEpG+K,EAAKyN,IAGP,OACE,kBAAC,EAAAjD,MAAD,CACE5S,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,YAC1B+B,QAASyT,EAAAA,aAAAA,OACT9C,QAAM,EACN+C,QAAS,CACP,kBAAC,EAAA5T,OAAD,CAAQqF,IAAI,UAAUqC,OAAO,yBAAyBvH,WAAqC,IAAzB6B,EAAc+B,OAAc7D,QAAQ,UAAUE,QAlCrG,WACf,IAAM0W,EAAW9U,EAAcsB,KAAI,SAACkO,GAAD,MAAW,CAAEhO,SAAUgO,EAAKhJ,UAC3DsO,EAAS/S,OAAS,IACpBuM,EAAgB,CACdpQ,QAAS,OACTY,MAAO3D,EAAKe,cAAc4Y,EAAS/S,OAAS,EAAI5F,EAAAA,EAAAA,wBAAmCA,EAAAA,EAAAA,wBACnFoS,aAAc,IACdrF,YAAa/N,EAAKe,cAAc4Y,EAAS/S,OAAS,EAAI5F,EAAAA,EAAAA,8BAAyCA,EAAAA,EAAAA,gCAEjGyY,EAAkBrT,EAAMuT,GAAU/O,MAAK,WACrC8O,EAAqBtT,GACrBuG,EAAY,CAAE3H,SAAS,QAI3B+G,EAAKyN,KAoBExZ,EAAKe,cAAcC,EAAAA,EAAAA,aAEtB,kBAAC,EAAA6B,OAAD,CAAQwJ,GAAG,oBAAoB9B,OAAO,0BAA0BrC,IAAI,SAASnF,QAAQ,OAAOE,QAASC,GAClGlD,EAAKe,cAAcC,EAAAA,EAAAA,UAGxB8T,QAAS5R,GAET,kBAAC,EAAAmL,MAAD,CAAOC,WAAS,GACd,kBAAC,EAAAC,UAAD,KACE,kBAAC,EAAAkC,YAAD,KACE,kBAAC,KAAD,CAAY3Q,gBAAiBE,EAAKe,cAAcC,EAAAA,EAAAA,uBAGpD,kBAAC,EAAAuN,UAAD,KACE,kBAAC,KAAD,CAAW1J,cAAeA,EAAeC,iBAAkBA,EAAkBE,SAAO,QAO9FuU,GAAgBjY,aAAe,CAC7BmE,MAAO,GACPmQ,WAAY,GACZ4D,SAAU,UACV3U,cAAe,IAGjB0U,GAAgBnY,UAAY,CAC1B6D,QAAS5D,IAAAA,MAAgB,CACvByK,OAAQzK,IAAAA,KAAAA,WACR0K,KAAM1K,IAAAA,OACLoC,WACH8Q,SAAUlT,IAAAA,KAAAA,WACV8R,gBAAiB9R,IAAAA,KAAAA,WACjB0F,UAAW1F,IAAAA,KACXqY,qBAAsBrY,IAAAA,KAAAA,WACtBuU,WAAYvU,IAAAA,OACZoE,MAAOpE,IAAAA,MACPwD,cAAexD,IAAAA,MACf2T,MAAO3T,IAAAA,OACPmY,SAAUnY,IAAAA,OACVoY,kBAAmBpY,IAAAA,KAAAA,WACnBsL,YAAatL,IAAAA,KAAAA,YAmBf,UAAeiY,EAAAA,EAAAA,aAAWxD,EAAAA,EAAAA,UAhBF,SAAC,GAAD,MAAsC,CAC5DxP,UADsB,EAAGgJ,aAAgBhJ,cAIhB,SAACnB,GAAD,OACzB4Q,EAAAA,GAAAA,IACE,CACE5C,gBAAAA,EAAAA,gBACAoB,SAAAA,EAAAA,GACAkF,kBAAAA,EAAAA,GACAC,qBAAAA,EAAAA,GACA/M,YAAAA,EAAAA,IAEFxH,KAGsB2Q,CAA6CyD,ioBC1GvE,IAAMK,GAAW,SAAC,GAAD,IAAmBrK,EAAnB,EAAGD,aAAgBC,cAAnB,MAA0C,CACzDsK,WAAYtK,EAAcuK,QAAQhY,KAClC+D,WAAY0J,EAAcuK,QAAQlU,KAClCuG,UAAWoD,EAAcjQ,KACzB+Y,cAAe9I,EAAc8I,cAC7BF,iBAAkB5I,EAAc4I,iBAChC7R,UAAWiJ,EAAcuK,QAAQxT,YAG7ByT,GAAkB,SAACza,EAAMuV,EAAOmF,GAAd,OACtB,kBAAC,MAAD,UACOA,EAAShZ,EAAAA,EAAAA,kBAA6BA,EAAAA,EAAAA,iBAD7C,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,IACjBtE,KAAAA,EACAuV,MAAAA,OAmLN,SA/KwB,WACtB,IAAM7U,GAAOC,EAAAA,EAAAA,KACb,GAAsC8I,EAAAA,EAAAA,UAAS,IAA/C,eAAO+G,EAAP,KAAoB7E,EAApB,KACA,GAAoDlC,EAAAA,EAAAA,UAAS,IAA7D,eAAOkR,EAAP,KAA2BC,EAA3B,KACA,GAA8CnR,EAAAA,EAAAA,WAAS,GAAvD,eAAOoR,EAAP,KAAwBC,EAAxB,KACA,GAA0CrR,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAOsR,EAAP,KAAsBC,EAAtB,KACA,GAAoCvR,EAAAA,EAAAA,UAAS,IAA7C,eAAOwR,EAAP,KAAmBC,EAAnB,KAEQpU,GAASqU,EAAAA,EAAAA,aAATrU,KACR,GAA0FZ,EAAAA,EAAAA,aAAYoU,GAAU/J,EAAAA,cAAxGgK,EAAR,EAAQA,WAAYhU,EAApB,EAAoBA,WAAYsG,EAAhC,EAAgCA,UAAW7F,EAA3C,EAA2CA,UAAW+R,EAAtD,EAAsDA,cAAeF,EAArE,EAAqEA,iBACrE,GAA8C3X,EAAAA,EAAAA,YAAWC,GAAAA,GAAjDia,EAAR,EAAQA,wBAAyBha,EAAjC,EAAiCA,SAC3Bia,GAAiBrV,EAAAA,EAAAA,QAAO5E,GAAYga,GAEpC/R,EAAU,CACd,CAAEhF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAAkB4H,WAAY,CAACC,EAAAA,SAC3D,CAAElF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,WAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,WAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,aAGxBmE,GAAWC,EAAAA,EAAAA,eAEX2B,EAAY,SAAC6T,GAAoC,IAAzBC,EAAyB,uDAAfhV,EACtCV,GAASuU,EAAAA,EAAAA,IAAqBtT,EAAMwU,EAAWC,MAGjDxR,EAAAA,EAAAA,YAAU,WACRtC,MACC,KAEHsC,EAAAA,EAAAA,YAAU,WACRsR,EAAe9P,QAAUnK,GAAYga,IACpC,CAACha,EAAUga,IAEd,IAIMI,EAAgB,SAACC,GACrB,OAAO5V,GAAS6V,EAAAA,EAAAA,IAAuB5U,EAAM2U,IAAYnQ,MAAK,WAC5DsP,EAAsB,IACtBnT,OAAUrC,EAAD,GAAC,MAAgBmB,GAAjB,IAA6BG,OAAQ,KAC9Cb,GAASwH,EAAAA,EAAAA,IAAY,CAAE3H,SAAS,SA+B9BC,GAAUC,EAAAA,EAAAA,cA6ChB,OACE,kBAAC,EAAAtC,SAAD,KACE,kBAACqY,GAAA,EAAD,CACErX,KAAM2W,EAAW3W,KACjBD,MAAO4W,EAAW5W,MAClBuX,mBAAoBX,EAAWW,mBAC/BxH,OAAQyG,EACRrF,QAAS,kBAAMsF,GAAmB,IAClCjG,SAAU,WACRiG,GAAmB,GACnBC,OAGJ,kBAACc,GAAA,EAAD,CAASrY,KAAK,UAAUuJ,GAAI,kBACzB8L,GAAoBE,EACnB,kBAAC,EAAAxH,KAAD,KACE,kBAAC,EAAAuK,SAAD,KACE,kBAAC,EAAA9N,SAAD,KACE,kBAAC,EAAAmD,YAAD,KACE,kBAAC,EAAA9P,KAAD,CAAME,UAAWC,EAAAA,aAAAA,IACdd,EAAKe,cAAcsX,EAAgBrX,EAAAA,EAAAA,uBAAkCA,EAAAA,EAAAA,yBAOhF,kBAAC,KAAD,CACEc,MAAO+X,GAAc,IAAI1T,KAAI,SAACkO,GAAD,UAAC,MAAeA,GAAhB,IAAsBjO,KAAMiO,EAAKhO,cAC9D4D,aAAc0Q,EAAe9P,QAC7BnC,WAAYA,GACZC,QAASA,EACT0S,OAtFK,kBACb,kBAAC,EAAAzY,SAAD,KACE,kBAAC,EAAA0Y,MAAD,CACEC,KAAMjI,GAAAA,EAAAA,qBAAAA,KACNkI,OAAQ,SAACC,GAAD,OAAU,kBAAC,IAAD,QAAiB1U,UAAWA,EAAWyS,SAAQ,yBAAoBpT,EAApB,aAAwCqV,SAmFrGC,eAzGa,kBACpBf,EAAe9P,QAEZ,CACE,CACElH,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BiC,QAAS,SAACkW,EAAQwC,EAAQC,GACxBtB,GAAiB,kBAAM,kBAAMQ,EAAc,CAACc,EAAUvV,SAAS1C,YAC/D6W,EAAc,CACZ7W,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,sBAC1B4C,KAAMmW,GAAgB6B,EAAUvV,SAAS1C,MAAOwI,GAAW,GAC3D+O,mBAAoBlb,EAAKe,cAAcC,EAAAA,EAAAA,gBAEzCoZ,GAAmB,MAXzB,MAwGI/J,kBAAmBrQ,EAAKe,cAAcC,EAAAA,EAAAA,UAAmBwK,cACzDD,YAAavL,EAAKe,cAAcC,EAAAA,EAAAA,SAAkBwK,cAClDC,cAAezL,EAAKe,cAAcC,EAAAA,EAAAA,QAClCuJ,OAAO,gBACP1E,WAAYA,EACZiK,YAAaA,EACb/I,UAAW,gBAAGpB,EAAH,EAAGA,MAAOK,EAAV,EAAUA,OAAQ1G,EAAlB,EAAkBA,KAAlB,OAA6ByH,EAAUzH,EAAM,CAAEqG,MAAAA,EAAOK,OAAAA,KACjEiF,eAAgB,gBAAG3L,EAAH,EAAGA,KAAH,OAAc2L,EAAe3L,IAC7CgI,YAAa2S,EACb3T,UAAWA,EACXgF,WAAY/J,GAAAA,EACZ4J,gBAjImB,SAACC,GAC5B8O,GAAsB,SAACL,GAAD,OAAgBzO,EAAayO,OAiI3CgC,eAzFa,yBACjBlB,EAAe9P,QACf,CACE,kBAAC,EAAA1C,KAAD,CAAMC,GAAE,yBAAoBhC,EAApB,wBAAgD8B,IAAI,oBAAoBtH,UAAU,qBACxF,kBAAC,EAAAiC,OAAD,CAAQE,QAAQ,UAAU,aAAW,cAClC/C,EAAKe,cAAcC,EAAAA,EAAAA,aAGxB,CACEqK,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,WAC1BS,MAAO,CACLb,UAAW,qBAEbqC,QAAS,WACPgC,EAAQ8G,KAAR,yBAA+B3F,EAA/B,2BAGJ,CACEiF,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BS,MAAO,CACLuB,YAAaiX,IAAuBA,EAAmBrT,OAAS,EAChE7D,QAAS,UAEXE,QAAS,WACP,IAAM6Y,EAA0B7B,EAAmBrT,OAAS,EACtDmV,EAAa/b,EAAKe,cAAc+a,EAA0B9a,EAAAA,EAAAA,sBAAiCA,EAAAA,EAAAA,sBACjGsZ,GAAiB,kBAAM,kBAAMQ,EAAcb,EAAmB9T,KAAI,SAACkO,GAAD,OAAUA,EAAKjO,aACjFoU,EAAc,CACZ7W,MAAOoY,EACPb,mBAAoBa,EACpBnY,KAAMmW,GACJ+B,EAA0B7B,EAAmBrT,OAASqT,EAAmB,GAAG7T,KAC5E+F,EACA2P,KAGJ1B,GAAmB,MAIzB,KAkDI4B,WAAY,CAAErY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,gBAA0B+M,YAAa,CAAC/N,EAAKe,cAAcC,EAAAA,EAAAA,oBAA8B,KACjI6K,QAAQ,qBCrMpB,IAAMoQ,GAAqB,SAAC,GAAkC,IAAhCvI,EAAgC,EAAhCA,OAAQoB,EAAwB,EAAxBA,QAASX,EAAe,EAAfA,SACvCnU,GAAOC,EAAAA,EAAAA,KACb,OACE,kBAACgb,GAAA,EAAD,CACErX,KACE,kBAAC,EAAA6M,YAAD,KACE,kBAAC,EAAA9P,KAAD,KACE,kBAAC,MAAD,UACMK,EAAAA,EAAAA,8BADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,UAM3BD,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,SAC1Bkb,cAAY,EACZxI,OAAQA,EACRwH,mBAAoBlb,EAAKe,cAAcC,EAAAA,EAAAA,UACvC8T,QAASA,EACTX,SAAUA,KAKhB8H,GAAmB7a,UAAY,CAC7B+S,SAAU9S,IAAAA,KACVyT,QAASzT,IAAAA,KACTqS,OAAQrS,IAAAA,MAGV,YC9BA,IAAM8a,GAAgB,SAAC,GAgBjB,IAfOpQ,EAeP,EAfJ9G,QAAW8G,KACXmD,EAcI,EAdJA,cACAC,EAaI,EAbJA,iBACAxL,EAYI,EAZJA,MACA6V,EAWI,EAXJA,SACA4C,EAUI,EAVJA,gBACA9c,EASI,EATJA,KACA+c,EAQI,EARJA,UACAC,EAOI,EAPJA,UACAnJ,EAMI,EANJA,gBACAoJ,EAKI,EALJA,sBACAC,EAII,EAJJA,mBACAC,EAGI,EAHJA,iBACAvH,EAEI,EAFJA,WACAwH,EACI,EADJA,UAEM1c,GAAOC,EAAAA,EAAAA,KACb,GAAgD8I,EAAAA,EAAAA,WAAS,GAAzD,eAAO4T,EAAP,KAAyBC,EAAzB,KAEM1Z,EAAW,WACfiM,GAAoBA,EAAiB,IACrCgE,EAAgB,CACdpQ,QAAS,UACTY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,uBAC1BoS,aAAc,IACdrF,YAAa/N,EAAKe,cAAcC,EAAAA,EAAAA,6BAElC+K,EAAKyN,IAGDrF,EAAW,WACf,IAAM0I,EAAY3N,EAAc/I,KAAI,SAAC+K,GAAD,OAAUA,EAAK9K,QAiBnD,OAhBAgW,EAAgBM,EAAWG,GAAW,WAChCR,EACFI,IAAmB7R,MAAK,YAAyB,IAAb9I,EAAa,EAAtB4J,MAAS5J,KAClC0a,EAAmB1a,EAAK,GAAGsE,MAC3B8O,EAAWpT,EAAK,GAAGsE,UAGrBoW,IACAtH,KAEF/F,EAAiB,OAEfkN,IAAcC,GAChBC,GAAsB,GAGjBxQ,EAAKyN,IAGd,OAAO6C,IAAcC,GAAaK,EAChC,kBAAC,GAAD,CAAoBjJ,OAAQiJ,EAAkB7H,QAAS5R,EAAUiR,SAAUA,IAE3E,kBAAC,EAAAoC,MAAD,CACE5S,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,iBAC1B+B,QAASyT,EAAAA,aAAAA,OACT9C,QAAM,EACNoB,QAAS,WACP5R,IACA0Z,GAAoB,IAEtBnG,QAAS,CACP,kBAAC,EAAA5T,OAAD,CACE,aAAW,OACX0H,OAAO,sBACPxH,QAAQ,UACRmF,IAAI,UACJlF,WAAqC,IAAzBkM,EAActI,OAC1B3D,QAAS,WACP2Z,GAAoB,KAClBP,GAAaC,IAAcnI,MAG9BnU,EAAKe,cAAcC,EAAAA,EAAAA,aAEtB,kBAAC,EAAA6B,OAAD,CAAQ,aAAW,SAAS0H,OAAO,0BAA0BxH,QAAQ,OAAOmF,IAAI,SAASjF,QAASC,GAC/FlD,EAAKe,cAAcC,EAAAA,EAAAA,WAIxB,kBAAC,EAAAqN,MAAD,CAAOC,WAAS,GACb3K,GACC,kBAAC,EAAA4K,UAAD,KACE,kBAAC,EAAAjK,MAAD,CAAOC,aAAa,KAAKC,KAAK,MAC3Bb,IAIP,kBAAC,EAAA4K,UAAD,KACE,kBAAC,EAAAkC,YAAD,KACE,kBAAC,EAAA9P,KAAD,CAAME,UAAWC,EAAAA,aAAAA,GACf,kBAAC,MAAD,UACME,EAAAA,EAAAA,sBADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,IACjBtE,KAAMA,SAMhB,kBAAC,EAAAiP,UAAD,KACE,kBAAC,EAAAsC,KAAD,KACE,kBAAC,GAAD,CAAW3B,cAAeA,EAAeC,iBAAkBA,EAAkBC,eAAe,SAQxG+M,GAAc/a,UAAY,CACxB6D,QAAS5D,IAAAA,MAAgB,CACvB0K,KAAM1K,IAAAA,IACNyK,OAAQzK,IAAAA,KAAAA,aACPoC,WACHuR,MAAO3T,IAAAA,MAAgB,CACrB8T,OAAQ9T,IAAAA,OAAAA,aACPoC,WACHyL,cAAe7N,IAAAA,MACf8N,iBAAkB9N,IAAAA,KAClB+a,gBAAiB/a,IAAAA,KACjBmY,SAAUnY,IAAAA,OACVsC,MAAOtC,IAAAA,OACP/B,KAAM+B,IAAAA,OACNgb,UAAWhb,IAAAA,KACXib,UAAWjb,IAAAA,KACX8R,gBAAiB9R,IAAAA,KACjBkb,sBAAuBlb,IAAAA,KACvBmb,mBAAoBnb,IAAAA,KACpB6T,WAAY7T,IAAAA,KACZob,iBAAkBpb,IAAAA,KAClBqb,UAAWrb,IAAAA,QAGb,YC7IA,IAAMyb,GAAc,SAAC,GAAyF,IAAvFnZ,EAAuF,EAAvFA,MAAOC,EAAgF,EAAhFA,KAAMkR,EAA0E,EAA1EA,QAASX,EAAiE,EAAjEA,SAAUT,EAAuD,EAAvDA,OAAQwH,EAA+C,EAA/CA,mBAAoBmB,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UAC5F,GAAgDvT,EAAAA,EAAAA,WAAS,GAAzD,eAAO4T,EAAP,KAAyBC,EAAzB,KAEA,OAAOP,IAAcC,GAAaK,EAChC,kBAAC,GAAD,CACEjJ,OAAQiJ,GAAoBjJ,EAC5BoB,QAAS,WACPA,IACA8H,GAAoB,IAEtBzI,SAAU,WACRA,OAIJ,kBAAC8G,GAAA,EAAD,CACErX,KAAMA,EACND,MAAOA,EACP+P,OAAQA,EACRwH,mBAAoBA,EACpBpG,QAAS,WACPA,KAEFX,SAAU,WACRyI,GAAoB,KAClBP,GAAaC,IAAcnI,QAMrC2I,GAAY1b,UAAY,CACtBwC,KAAMvC,IAAAA,KACNsC,MAAOtC,IAAAA,KACP6Z,mBAAoB7Z,IAAAA,OACpB8S,SAAU9S,IAAAA,KACVyT,QAASzT,IAAAA,KACTqS,OAAQrS,IAAAA,KACRgb,UAAWhb,IAAAA,KACXib,UAAWjb,IAAAA,MAGbyb,GAAYxb,aAAe,CACzB+a,WAAW,EACXC,WAAW,GAGb,qlBCzBA,IAAM5T,GAAa,SAACqU,EAAWjb,EAAMkb,GAA+B,IAArB1V,EAAqB,uDAAP,GAC3D,OAAOxF,EACHA,EAAKyF,QACH,SAACC,EAAD,OAAQpB,EAAR,EAAQA,KAAM8J,EAAd,EAAcA,aAAc5Q,EAA5B,EAA4BA,KAAMyO,EAAlC,EAAkCA,YAAakK,EAA/C,EAA+CA,SAA/C,wBACKzQ,GADL,CAEE,CACEpB,KAAAA,EACAzC,MAAOuM,GAAgB5Q,EACvB2I,MAAO,CACL,kBAAC,EAAArF,SAAD,CAAUsF,IAAG,UAAK9B,EAAL,UACX,kBAAC,EAAA+B,KAAD,CAAMC,GAAE,yBAAoB2U,EAApB,yBAA8C3W,IAAS8J,GAAgB5Q,IAEjFyO,EACA,kBAAC,EAAAnL,SAAD,CAAUsF,IAAG,UAAK9B,EAAL,cACX,kBAACmS,GAAA,EAAD,CAAYC,KAAMP,EAAUnV,MAAM2V,EAAAA,EAAAA,IAAcR,OAGpD1P,SAAUC,QAAQlB,GAAeA,EAAYmB,MAAK,SAACjH,GAAD,OAASA,EAAI4E,OAASA,WAG5E,IAEF,IAGA6W,GAAiB,SAAC3d,GAEtB,OAAOA,EAAKkM,cAAcsN,SAAS,kBAAoB,sBAAwB,mBAG3EoE,GAAgB,SAACla,EAAYuH,EAAQ4S,GACzC,IAAMnd,GAAOC,EAAAA,EAAAA,KACPmd,EACJ,kBAAC,EAAAva,OAAD,CAAQ0H,OAAQA,EAAQxH,QAAQ,UAAUnC,UAAU,oBAAoB,aAAW,WAAWyc,eAAgBra,GAC3GhD,EAAKe,cAAcC,EAAAA,EAAAA,UAIxB,OAAOgC,EACL,kBAAC,EAAAsa,QAAD,CAASC,QAASJ,GAAqBnd,EAAKe,cAAcC,EAAAA,EAAAA,gBAA0Boc,GAEpFA,GAIEI,GAAa,SAAC,GAqBd,IApBJ/N,EAoBI,EApBJA,MACAgO,EAmBI,EAnBJA,YACAjO,EAkBI,EAlBJA,SACAgN,EAiBI,EAjBJA,mBACAlW,EAgBI,EAhBJA,UACAT,EAeI,EAfJA,WAEYO,EAaR,EAdJ4O,MACEG,OAAU/O,KAEZ9G,EAWI,EAXJA,KACA8Y,EAUI,EAVJA,eACAF,EASI,EATJA,kBACAwF,EAQI,EARJA,gBACApB,EAOI,EAPJA,UACAC,EAMI,EANJA,sBACAvM,EAKI,EALJA,sBACA2N,EAII,EAJJA,gBACAxK,EAGI,EAHJA,gBACAyK,EAEI,EAFJA,YACAnB,EACI,EADJA,iBAEMzc,GAAOC,EAAAA,EAAAA,KACb,GAAgD8I,EAAAA,EAAAA,UAAS,IAAzD,eAAO8U,EAAP,KAAyBC,EAAzB,KACA,GAAsC/U,EAAAA,EAAAA,UAAS,IAA/C,eAAO+G,EAAP,KAAoB7E,EAApB,KACA,GAA0ClC,EAAAA,EAAAA,UAAS,IAAnD,eAAOmG,EAAP,KAAsBC,EAAtB,KACA,GAAgDpG,EAAAA,EAAAA,UAAS,IAAzD,eAAOgV,EAAP,KAAyBC,EAAzB,KACA,GAA8CjV,EAAAA,EAAAA,WAAS,GAAvD,eAAOoR,EAAP,KAAwBC,EAAxB,KACA,GAA0CrR,EAAAA,EAAAA,WAAS,kBAAM,QAAzD,eAAOsR,EAAP,KAAsBC,EAAtB,KACA,GAAoCvR,EAAAA,EAAAA,UAAS,IAA7C,eAAOwR,GAAP,KAAmBC,GAAnB,KACA,IAA8Cha,EAAAA,EAAAA,YAAWC,GAAAA,GAAjDia,GAAR,GAAQA,wBAAyBha,GAAjC,GAAiCA,SAC3Bia,IAAiBrV,EAAAA,EAAAA,QAAO5E,IAAYga,IAEpC/R,GAAU,CACd,CAAEhF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAAgBsJ,QAAS,QACrD,CAAE3G,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,iBAG9BqI,EAAAA,EAAAA,YAAU,WACRoT,IACa,mBAATrW,EACFoW,EAAmB3W,EAAnB2W,CAA+BpW,GAE3BsX,GACFlB,EAAmB3W,EAAnB2W,CAA+BkB,KAGlC,CAACA,KAEJrU,EAAAA,EAAAA,YAAU,WACRoT,IACa,mBAATrW,EACF4J,EAAsB5J,GAElBsX,GACF1N,EAAsB0N,KAGzB,CAACjO,EAAOiO,KAEXrU,EAAAA,EAAAA,YAAU,WACRsR,GAAe9P,QAAUnK,IAAYga,KACpC,CAACha,GAAUga,KAEd,IAIMX,GAAkB,SAACza,EAAM4R,EAAM8I,GAAb,OACtB,2BACE,kBAAC,MAAD,UACOA,EAAShZ,EAAAA,EAAAA,qBAAgCA,EAAAA,EAAAA,oBADhD,CAEE4I,OAAM,IACJ+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,IACjBtE,KAAAA,GACI0a,EAAS,CAAEvK,MAAOyB,GAAS,CAAEA,KAAAA,SAMnCwL,GAAqB,mBAATtW,EAA4BA,EAAOsX,EAE/CO,GAAsB,WACtB/F,EACFuE,IAAmB7R,MAAK,YAAyB,IAAb9I,EAAa,EAAtB4J,MAAS5J,KAClC0a,EAAmB,SAAK3W,GAAN,IAAkBG,OAAQ,IAA5CwW,CAAiD1a,EAAK,GAAGsE,SAG3DoW,EAAmB,SAAK3W,GAAN,IAAkBG,OAAQ,IAA5CwW,CAAiDpW,IAiD/CnB,IAAUC,EAAAA,EAAAA,cAuDhB,OACE,kBAAC,aAAD,KACE,kBAAC,GAAD,CACEtB,KAAM2W,GAAW3W,KACjBD,MAAO4W,GAAW5W,MAClB+P,OAAQyG,EACRmC,UAAWA,EACXD,UAAWnE,GAAqBE,EAChC8C,mBAAoBX,GAAWW,mBAC/BpG,QAAS,kBAAMsF,GAAmB,IAClCjG,SAAU,WACRiG,GAAmB,GACnBC,IACAlL,EAAiB,IACjBoN,EAAsBrE,IAAsBoE,MAIhD,kBAACnB,GAAA,EAAD,CAASrY,KAAK,UAAUuJ,GAAI,aAC1B,kBAAC,KAAD,CACE1D,QAASA,GACTsB,aAAc0Q,GAAe9P,UAAYuN,EACzC1P,WAAY,sCAAIjH,EAAJ,yBAAIA,EAAJ,uBAAciH,GAAU,WAAV,GAAWtC,GAAX,OAAoB3E,KAC9CK,KAAM2N,EACNK,YAAaA,EACb/I,UAAW,SAACyD,GACVgS,EAAmBhS,EAAnBgS,CAA2BE,KAE7B1R,aAAc,CAAE1L,KAAM,GAAIyO,YAAa,IACvC9C,eAAgB,YAA2B,IAAxB3L,EAAwB,EAAxBA,KAAMyO,EAAkB,EAAlBA,iBACP,IAATzO,GAAwB2L,EAAe3L,QACvB,IAAhByO,GAA+B+P,EAAoB/P,IAE5DzH,UAAWA,EACXT,WAAYA,EACZyB,YAAa4H,EACb/D,gBArKgB,SAACC,GACvB+D,GAAiB,SAACM,GAAD,OAAWrE,EAAaqE,GAAOtJ,KAAI,gBAAGC,EAAH,EAAGA,KAAM9G,EAAT,EAASA,KAAT,MAA4B,CAAE8G,KAAAA,EAAMiF,MAApC,EAAeA,OAAqC/L,UAqKlGiM,YAAavL,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwK,cAChDC,cAAezL,EAAKe,cAAcC,EAAAA,EAAAA,MAClC6a,eA5Fe,yBACjBlB,GAAe9P,UAAYuN,EAC3B,CACE,kBAAC,EAAAjQ,KAAD,CACEvH,UAAS,mDAA8C+c,GAAmB,aAC1EvV,GAAE,yBAAoBhC,EAApB,oBACF8B,IAAI,gBAEHgV,GAAcS,EAAiBV,GAAe3d,GAAQ,IAAK8Y,GAAkBpY,EAAKe,cAAcC,EAAAA,EAAAA,2BAEnG,CACEqK,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,SAC1BS,MAAO,CACLuB,WAAY2a,EACZ/c,UAAW,qBAEbqC,QAAS,WACPgC,GAAQ8G,KAAR,yBAA+B3F,EAA/B,uBAGJ,CACEiF,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BS,MAAO,CACLuB,YAAakM,IAAkBA,EAActI,OAAS,EACtD7D,QAAS,UAEXE,QAAS,WACP,IAAMib,EAAwBhP,EAActI,OAAS,EACrD0T,GACE,kBAAM,kBACJmD,EACEf,GACAxN,EAAc/I,KAAI,SAAC+K,GAAD,OAAUA,EAAK9K,QACjC6X,QAGNzD,GAAc,CACZ7W,MAAO3D,EAAKe,cAAcmd,EAAwBld,EAAAA,EAAAA,oBAA+BA,EAAAA,EAAAA,oBACjFka,mBAAoBlb,EAAKe,cAAcmd,EAAwBld,EAAAA,EAAAA,YAAuBA,EAAAA,EAAAA,YACtF4C,KAAMmW,GACJza,EACA4e,EAAwBhP,EAActI,OAAS6I,EAAMhH,MAAK,SAACyI,GAAD,OAAUA,EAAK9K,OAAS8I,EAAc,GAAG9I,QAAM9G,KACzG4e,KAIJ9D,GAAmB,MAIzB,KA2CEsB,eA5Ie,yBACjBf,GAAe9P,UAAYuN,EAC3B,CACE,CACEzU,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BiC,QAAS,SAACkW,EAAQwC,EAAQzK,GACxBoJ,GAAiB,kBAAM,kBAAMmD,EAAYf,GAAW,CAACxL,EAAK9K,MAAO6X,QACjEzD,GAAc,CACZ7W,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,oBAC1Bka,mBAAoBlb,EAAKe,cAAcC,EAAAA,EAAAA,YACvC4C,KAAMmW,GAAgBza,EAAM4R,EAAKvN,OAAO,KAE1CyW,GAAmB,MAIzB,KA6HEiB,OA1HO,kBACb,kBAAC,EAAAzY,SAAD,KACE,kBAAC,EAAA0Y,MAAD,CACEC,KAAMjI,GAAAA,EAAAA,mBAAAA,KACNkI,OAAQ,SAACC,GAAD,OACN,kBAAC,IAAD,QACEiB,UAAWA,GACXxH,WAAY,SAACiJ,GAAD,OAAcP,EAAYO,MAAAA,EAAAA,EAAYzB,KAClDF,mBAAoB,SAAC2B,GAAD,OAAc3B,EAAmB,SAAK3W,GAAN,IAAkBG,OAAQ,IAA5CwW,CAAiD2B,MAAAA,EAAAA,EAAYzB,KAC/FD,iBAAkBA,EAClBvN,cAAe6O,EACf5O,iBAAkB6O,EAClBxE,SAAQ,yBAAoBtB,EAAoB,iBAAmB9R,EAA3D,UACRgW,gBAAiB5M,EACjBlQ,KAAMA,EACN+c,UAAWnE,GAAqBE,EAChCkE,UAAWA,EACXnJ,gBAAiBA,EACjBoJ,sBAAuBA,GACnBd,SAwGNlR,OAAO,cACPyR,WAAY,CACVrY,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAC1B+M,YAAa,CAAC/N,EAAKe,cAAcqX,EAAiBpX,EAAAA,EAAAA,2BAAsCA,EAAAA,EAAAA,0BAAoC,KAE9HyF,QAAS,CACP,CAAEyB,IAAK,OAAQwD,MAAOoE,GACtB,CAAE5H,IAAK,cAAewD,MAAOmS,IAE/BhS,QAAQ,mBAOZuS,GAAgB,SAACC,EAAOC,GAE5B,OADAD,EAAMnT,QAAQN,KAAK0T,GACZD,GA+BTb,GAAWpc,UAAY,CACrB6D,QAAS5D,IAAAA,MAAgB,CACvByK,OAAQzK,IAAAA,KAAAA,WACR0K,KAAM1K,IAAAA,KAAAA,aAERoO,MAAOpO,IAAAA,MACPiF,UAAWjF,IAAAA,KACX2K,aAAc3K,IAAAA,OACdmb,mBAAoBnb,IAAAA,KAAAA,WACpB2O,sBAAuB3O,IAAAA,KAAAA,WACvB6N,cAAe7N,IAAAA,MACfmO,SAAUnO,IAAAA,KACV/B,KAAM+B,IAAAA,OACNoc,YAAapc,IAAAA,KACbwE,WAAYxE,IAAAA,MAAgB,CAC1BsE,MAAOtE,IAAAA,OAAAA,WACP2E,OAAQ3E,IAAAA,OAAAA,WACR4E,MAAO5E,IAAAA,SAET2T,MAAO3T,IAAAA,MAAgB,CACrB8T,OAAQ9T,IAAAA,OAAAA,aACPoC,WACH2U,eAAgB/W,IAAAA,KAChB6W,kBAAmB7W,IAAAA,KACnBib,UAAWjb,IAAAA,KACXkb,sBAAuBlb,IAAAA,KACvBsc,gBAAiBtc,IAAAA,KAAAA,WACjB8R,gBAAiB9R,IAAAA,KACjBuc,YAAavc,IAAAA,KACbqc,gBAAiBrc,IAAAA,OACjBob,iBAAkBpb,IAAAA,MAGpBmc,GAAWlc,aAAe,CACxBmO,MAAO,GACP5J,WAAY0K,EAAAA,GACZrB,cAAe,IAGjB,UAAe4G,EAAAA,EAAAA,UAnES,SAAC,GAAqD,QAAnDxG,aAAgBC,EAAmC,EAAnCA,cAAegP,EAAoB,EAApBA,YAClD9O,EAAQF,EAAcE,MAE5B,MAAO,CACLA,MAAAA,EACA5J,WAAY0J,EAAc1J,YAAd,SAAiCE,EAAAA,IAAjC,IAAkDE,MAAOwJ,GAASA,EAAM7I,SACpFN,WAAYiJ,EAAcG,OAC1BpQ,KAAMiQ,EAAcjQ,KACpB4Y,kBAAmB3I,EAAc4I,iBACjCC,eAAgB7I,EAAc8I,cAC9BiE,WAAY/M,EAAciP,OAC1Bb,kBAAmBpO,EAAcC,SAAS3J,YAAc0J,EAAcC,SAAS3J,WAAWI,MAAQ,IAAQsJ,EAAc8I,eACxHqF,gBAAiBa,MAAAA,OAAF,EAAEA,EAAanY,SAIP,SAACjB,GAC1B,MAAO,CACLqK,SAAU,SAACG,EAASF,EAAO6O,GAAjB,OAA8BnZ,EAASiZ,IAAchC,EAAAA,EAAAA,IAAgBzM,EAASF,GAAQ6O,KAChGb,YAAa,SAAC9N,EAASF,EAAO6O,GAAjB,OAA8BnZ,EAASiZ,IAAcK,EAAAA,EAAAA,IAAqB9O,EAASF,GAAQ6O,KACxG9B,mBAAoB,SAAChS,GAAD,OAAY,SAACmF,EAASkL,GAAV,OAAsB1V,GAASqX,EAAAA,EAAAA,IAAmB7M,EAASnF,EAAQqQ,MACnG7K,sBAAuB,SAACL,GAAD,OAAaxK,GAAS6K,EAAAA,EAAAA,IAAsBL,EAAS,GAAI,MAChFwD,gBAAiB,kBAAchO,EAASgO,EAAAA,gBAAAA,WAAA,eACxCyK,YAAa,SAAC3W,GAAD,OAAc9B,GAAS+P,EAAAA,EAAAA,IAAWjO,KAC/CwV,iBAAkB,kBAAMtX,GAASsX,EAAAA,EAAAA,WA2CrC,CAA4De,ymBCzW5D,IAAMkB,GAAQ,SAAC,GAUT,IARQtY,EAQR,EATJ4O,MACEG,OAAU/O,KAEZyO,EAMI,EANJA,MACAK,EAKI,EALJA,WACAuH,EAII,EAJJA,iBACAxG,EAGI,EAHJA,aACA0I,EAEI,EAFJA,WACAC,EACI,EADJA,SAEM5e,GAAOC,EAAAA,EAAAA,KACPkF,GAAWC,EAAAA,EAAAA,eACXH,GAAUC,EAAAA,EAAAA,cACVwB,GAAWmY,EAAAA,EAAAA,eACX3G,EAA6B,mBAAT9R,EACpBuS,EAAW,CACf,CAAEM,SAAU,EAAGtV,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,OAAiB1B,KAAM,kBAAF,OAAoB8G,EAApB,WAC9D,CAAE6S,SAAU,EAAGtV,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,SAAmB1B,KAAM,kBAAF,OAAoB8G,EAApB,cAGlE,GAA8DZ,EAAAA,EAAAA,cAC5D,oBAAG8J,aAAgBN,EAAnB,EAAmBA,OAAQtM,EAA3B,EAA2BA,MAAO6b,EAAlC,EAAkCA,YAAlC,MAAuD,CACrD1Y,WAAYmJ,EAAOnJ,YAAcmJ,EAAOpJ,KACxCa,QAASuI,EAAOvI,QAChBqY,YAAapc,IAAUqc,EAAAA,GACvBrB,gBAAiBa,MAAAA,OAAF,EAAEA,EAAanY,QAEhCyJ,EAAAA,cAPMhK,EAAR,EAAQA,WAAYY,EAApB,EAAoBA,QAASqY,EAA7B,EAA6BA,YAAapB,EAA1C,EAA0CA,gBAU1C,GAAwD3U,EAAAA,EAAAA,WAAS,GAAjE,eAAOiW,EAAP,KAA8BC,EAA9B,KACA,GAA0ClW,EAAAA,EAAAA,WAAS,GAAnD,eAAOmW,EAAP,KAAuBC,EAAvB,KACA,GAAsEpW,EAAAA,EAAAA,WAAS,GAA/E,eAAOqW,EAAP,KAAoCC,EAApC,MAEAhW,EAAAA,EAAAA,YAAU,WACRoT,IACA,IAAM6C,EAAYpH,EAA2BwF,EAAPtX,EAGtC,OAFA8O,EAAWoK,GACXnf,SAASC,OAAOmf,YAAYD,GACrB,kBAAMnf,SAASC,OAAOmf,iBAAY7a,MACxC,CAAC0B,EAAMsX,IAEV,IAUiCpe,EAV3BkgB,EAAkB,iBAAM,CAC5B,CACE7b,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BoH,IAAIqX,EAAAA,EAAAA,IAAa9J,GAAAA,EAAAA,OAAAA,KAAuB9P,EAAYY,IAEtDqY,EACI,CAAEnb,MAAOgb,OAAaja,EAAYmQ,EAAMvV,KAAMqC,UAAU,GACxD,CAAEgC,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAAwBW,UAAU,KA8C9D+d,EAAgB,CACpB,kBAAC,EAAAC,aAAD,CACE9e,UACE,kBAAC,EAAAsH,KAAD,CACElF,QAAS,kBAAMkc,GAAgB,IAC/B/W,IAAK1B,EAAS2M,SAASyF,SAAS,WAAanD,GAAAA,EAAAA,6BAAyCA,GAAAA,EAAAA,4BAAsC4F,KAAKqE,QAC/H,QACA1H,EAAoB,iBAAmB9R,IAGxCpG,EAAKe,cAAcC,EAAAA,EAAAA,OAGxBkH,IAAI,eAEN,kBAAC,EAAAyX,aAAD,CACE9e,UACE,kBAAC,EAAAsH,KAAD,CACElF,QAAS,kBAAM2b,EAASxY,IACxBgC,GAAI,kBACD1B,EAAS2M,SAASyF,SAAS,WAAanD,GAAAA,EAAAA,+BAA2CA,GAAAA,EAAAA,8BAAwC4F,KAAKqE,QAC/H,QACAxZ,KAIHpG,EAAKe,cAAcC,EAAAA,EAAAA,SAGxBJ,UAAU,uBACVsH,IAAI,kBAIFwU,EAAYxE,EAAoBwF,EAAkBtX,EAExD,OACE,kBAAC,EAAAxD,SAAD,KACGoc,GACC,kBAAC,IAAD,CACElc,KAAK,QACL4Q,OAAQsL,EACRa,YAAa,6BAAM7f,EAAKe,cAAcC,EAAAA,EAAAA,+BACtC8e,kBACE,kBAAC,MAAD,UACM9e,EAAAA,EAAAA,gCADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,QAIvBmc,yBAA0B/f,EAAKe,cAAcC,EAAAA,EAAAA,UAC7Cgf,2BAA4BhgB,EAAKe,cAAcC,EAAAA,EAAAA,QAC/C2S,cAAe,kBAAMsL,GAAuB,IAC5CrL,gBAAiB,WACfqC,EAAa,CAACyH,IAAkB9S,MAAK,kBACnC6R,IAAmB7R,MAAK,WACtByU,GAA+B,SAGnCJ,GAAuB,GACvBha,EAAQ8G,KAAK,0CAIlB+S,EACC,kBAAC,EAAAlc,SAAD,KACE,kBAAC,KAAD,CAAYqd,YAAaT,KACvB,kBAAC,EAAAU,MAAD,CAAO5R,WAAS,GACd,kBAAC,EAAA6R,UAAD,CAAWC,UAAQ,GACjB,kBAAC,KAAD,CACEzc,OACGgb,GAAc9J,EACb,kBAAC,EAAAjS,SAAD,KAAWiS,EAAMsD,mBAAqBtD,EAAM2J,QApH/Blf,EAoHgEuV,EAAMvV,KAnHrG,yBAAK+gB,MAAO,CAAEC,QAAS,gBACpBhhB,EACD,yBAAKsB,UAAU,cACb,kBAAC,EAAAyW,QAAD,CACE,aAAW,qBACXL,YACE,kBAAC,MAAD,UACMhW,EAAAA,EAAAA,8BADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,SAKvB,kBAAC,MAAD,CAA4BhD,UAAU,qCAqGiEiU,EAAMvV,WAC/FoF,EAENqJ,aAAc4Q,GAAc9J,EAAQA,EAAM9G,iBAAcrJ,KAG3DmQ,EAAMsD,mBAAqBtD,EAAM2J,OAAS,kBAAC,EAAA2B,UAAD,KApGrD,yBAAKvf,UAAU,gCACb,kBAAC,EAAAiC,OAAD,CAAQE,QAAQ,OAAOE,QAAS,kBAAMgc,GAAuB,KAC1Djf,EAAKe,cAAcC,EAAAA,EAAAA,mBAEtB,kBAAC,EAAAqW,QAAD,CACE,aAAW,qBACXE,SAAUgJ,EAAAA,gBAAAA,UACVvJ,YACE,kBAAC,MAAD,UACMhW,EAAAA,EAAAA,yBADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,SAKvB,kBAAC,MAAD,CAA4BhD,UAAU,+CAoF4D,KAC5F,kBAAC,EAAAuf,UAAD,KACGtL,EAAMsD,kBAAoBtD,EAAMwD,cAAgB,KAC/C,kBAAC,EAAAmI,SAAD,CACEjW,OAAO,+BACPkW,OAAQ,kBAAC,EAAAC,YAAD,CAAaC,SAAU,SAACjN,GAAD,OAAYyL,EAAgBzL,IAASrH,GAAG,2BACvEqH,OAAQwL,EACR0B,SAAO,EACPrJ,SAAS,QACTmI,cAAeA,MAKtBN,EACC,kBAAC,EAAAyB,MAAD,CACE9d,QAAQ,OACR+d,UAAQ,EACRnd,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,2BAC1B+f,OAAQ,kBAAC,EAAAC,uBAAD,CAAwBlM,QAAS,kBAAMuK,GAA+B,MAC9Eze,UAAU,yBAEV,kBAAC,MAAD,UACMI,EAAAA,EAAAA,8BADN,CAEE4I,OAAQ,CACN+M,EAAG,SAAC/S,GAAD,OAAU,2BAAIA,SAIrB,MAEN,kBAAC,GAAD,CAASgV,UAAQ,EAACD,SAAUA,IAC5B,kBAAC,EAAA2C,MAAD,CACEC,KAAM,CAAC5F,GAAAA,EAAAA,6BAAAA,KAA6CA,GAAAA,EAAAA,+BAAAA,MACpD6F,OAAQ,SAAC/Z,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEEsQ,WAAY,WACV5M,GAASwH,EAAAA,EAAAA,IAAY,SAAK9G,GAAN,IAAkBG,OAAQ,EAAGS,QAAAA,EAASzB,SAAS,OAErE2P,YAAW,uBAAkBvO,GAC7BwO,aAAa6K,EAAAA,EAAAA,IAAa9J,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4B9P,GAA7B,IAAyCG,OAAQ,IAAKS,GAC/E0P,aAAW,EACXD,WAAY,CAACrB,SAInB,kBAAC,EAAAyG,MAAD,CACEC,KAAM,CAAC5F,GAAAA,EAAAA,2BAAAA,KAA2CA,GAAAA,EAAAA,6BAAAA,MAClD6F,OAAQ,SAAC/Z,GAAD,OAAW,kBAAC,IAAD,UAAeA,EAAf,CAAsBoT,MAAOA,EAAOF,YAAW,uBAAkBvO,GAAQ2L,WAAY,kBAAMmD,EAAWwH,UAE3H,kBAAC,EAAApB,MAAD,CACEC,KAAM5F,GAAAA,EAAAA,sBAAAA,KACN6F,OAAQ,SAAC/Z,GAAD,OAAW,kBAAC,IAAD,UAAgBA,EAAhB,CAAuB8a,sBAAuB8C,QAEnE,kBAAC,EAAA/D,MAAD,CAAOC,KAAM5F,GAAAA,EAAAA,wBAAAA,KAAwC9U,UAAWogB,KAChE,kBAAC,EAAA3F,MAAD,CAAOE,OAAQ,kBAAM,kBAAC,EAAA0F,SAAD,CAAU9Y,GAAE,yBAAoBhC,EAApB,gBAC/ByO,GAAS,kBAAC,MAAD,OAGb,kBAAC,EAAAjS,SAAD,KACE,6BAAShC,UAAU,yCACjB,kBAAC,KAAoB4e,MAEvB,kBAAC,KAAD,CACE7b,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,eAC1B+M,YAAa,CAAC/N,EAAKe,cAAcC,EAAAA,EAAAA,kBAA4B,CAAEqL,GAAIjG,KACnEqQ,QAAS,CACP,kBAAC,EAAA5T,OAAD,CACEqF,IAAI,cACJtH,UAAU,aACV2J,OAAO,cACPxH,QAAQ,UACR,aAAW,wBACXE,QAAS,kBAAMgC,EAAQ6G,WAEtB9L,EAAKe,cAAcC,EAAAA,EAAAA,2BAyBpC0d,GAAMtd,UAAY,CAChBsF,SAAUrF,IAAAA,MAAgB,CACxBgS,SAAUhS,IAAAA,OAAAA,aAEZ4D,QAAS5D,IAAAA,MAAgB,CACvB0K,KAAM1K,IAAAA,KAAAA,aAER2T,MAAO3T,IAAAA,OACPwT,MAAOxT,IAAAA,MAAgB,CACrB+E,KAAM/E,IAAAA,OACN/B,KAAM+B,IAAAA,OACN0M,YAAa1M,IAAAA,OACbgX,cAAehX,IAAAA,KACf8W,iBAAkB9W,IAAAA,KAClBmd,OAAQnd,IAAAA,OAEVsd,WAAYtd,IAAAA,KACZ6T,WAAY7T,IAAAA,KACZob,iBAAkBpb,IAAAA,KAClB4U,aAAc5U,IAAAA,KACdud,SAAUvd,IAAAA,KACV8f,YAAa9f,IAAAA,QAGfqd,GAAMpd,aAAe,CACnBqd,YAAY,GAGd,UAAe7I,EAAAA,EAAAA,UA3CS,SAAC,GAAD,QAAGxG,aAAgBC,EAAnB,EAAmBA,cAAe6R,EAAlC,EAAkCA,gBAAiBC,EAAnD,EAAmDA,qBAAnD,MAAiF,CACvGxM,MAAOtF,EACPoP,WAAYyC,GAAmBC,MAGN,SAAClc,GAAD,OACzB4Q,EAAAA,GAAAA,IACE,CACEb,WAAAA,EAAAA,GACAuH,iBAAAA,EAAAA,GACAxG,aAAAA,EAAAA,IAEF9Q,KA+BJ,CAA4DuZ,2CC9UtD4C,GAAkB,SAAC,GAAiC,IAA/B1gB,EAA+B,EAA/BA,UAAWY,EAAoB,EAApBA,IAAQC,GAAY,aACxD,OACE,kBAAC,EAAAG,YAAD,QACEhB,UAAW2gB,IAAAA,CAAW3gB,EAAW,CAC/B,uBAAwBY,EAAI0W,mBAAqB1W,EAAI4W,iBAEvD5W,IAAKA,GACDC,KAKV6f,GAAgBlgB,UAAY,CAC1BI,IAAKH,IAAAA,MAAgB,CACnB+W,eAAgB/W,IAAAA,KAChB6W,kBAAmB7W,IAAAA,OAErBT,UAAWS,IAAAA,QAGb,inBC+OA,SAxOe,WACb,IAAMrB,GAAOC,EAAAA,EAAAA,KACPkF,GAAWC,EAAAA,EAAAA,eACXH,GAAUC,EAAAA,EAAAA,cACV6B,EAAY,SAAC8T,GAAD,OAAa1V,GAASwH,EAAAA,EAAAA,IAAY,SAAKkO,GAAN,IAAe7V,SAAS,OAC3E,GAA8CxE,EAAAA,EAAAA,YAAWC,GAAAA,GAAjDC,EAAR,EAAQA,SAAUga,EAAlB,EAAkBA,wBACZ9C,EAAUlX,GAAYga,EACtBrL,GAAgB/J,EAAAA,EAAAA,QAAO,MAEvBqD,EAAU,CACd,CAAEhF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAAgBkH,IAAK,OAAQU,WAAY,CAACE,EAAAA,WACtE,CAAEnF,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,UAC5B,CAAE2C,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,cAAwBkH,IAAK,WAAYU,WAAY,CAACE,EAAAA,YAGpF,GAA0DtD,EAAAA,EAAAA,cACxD,0BAAG8J,aAAgBN,EAAnB,EAAmBA,OAAQ1I,EAA3B,EAA2BA,UAAWkb,EAAtC,EAAsCA,WAAYjD,EAAlD,EAAkDA,YAAlD,MAAuE,CACrEvP,OAAQ,GAAF,eACAwS,MAAAA,GAAA,UAAAA,EAAYliB,YAAZ,SAAkB0V,MAAM,IAAIyM,OAAOzS,EAAOvI,QAAQnH,KAAM,MAAQ,CAACkiB,GAAc,KAD/E,OAEAjD,MAAAA,GAAA,UAAAA,EAAajf,YAAb,SAAmB0V,MAAM,IAAIyM,OAAOzS,EAAOvI,QAAQnH,KAAM,MAAQ,CAACif,GAAe,KAFjF,QAGAvP,MAAAA,GAAA,UAAAA,EAAQlN,YAAR,eAAcgI,QAAO,wEAAuC,GAApCqO,EAAH,EAAGA,iBAAkBE,EAArB,EAAqBA,cAArB,QAAgDF,GAAoBE,QAAmB,KAElHzS,MAAMoJ,MAAAA,OAAA,EAAAA,EAAQnJ,cAAcmJ,MAAAA,OAAtB,EAAsBA,EAAQpJ,MACpCa,QAASuI,MAAAA,OAAF,EAAEA,EAAQvI,QACjBH,UAAAA,EACAiY,YAAAA,KAEF1O,EAAAA,cAZMb,EAAR,EAAQA,OAAQpJ,EAAhB,EAAgBA,KAAMa,EAAtB,EAAsBA,QAASH,EAA/B,EAA+BA,UAAWiY,EAA1C,EAA0CA,YAe1C,GAAoCxV,EAAAA,EAAAA,UAAS,SAAMrI,EAAWoF,EAAAA,GAAuBC,EAAAA,IAAqBH,IAA1G,eAAOC,EAAP,KAAmB6b,EAAnB,KACA,GAAsC3Y,EAAAA,EAAAA,UAAStC,EAAQnH,MAAQ,IAA/D,eAAOwQ,EAAP,KAAoB7E,EAApB,KACA,GAAwClC,EAAAA,EAAAA,UAAS,IAAjD,eAAO+O,EAAP,KAAqB6J,EAArB,KACA,GAAgD5Y,EAAAA,EAAAA,UAAS,IAAzD,eAAO6Y,EAAP,KAAyBC,EAAzB,MAEAxY,EAAAA,EAAAA,YAAU,WACR,IAAMyY,GAAmBvY,EAAAA,EAAAA,IAA6BtE,EAASY,GAC/D6b,EAAcI,GACd,IAAQxiB,GAASmK,EAAAA,GAAAA,IAA0BxE,EAAS,CAAC,QAAS,CAAE3F,KAAMwQ,IAA9DxQ,KACR2L,EAAe3L,GACfa,SAASC,OAAO2hB,YAAY,CAAE1V,GAAI,SAAU2V,cAAc,IAC1Djb,EAAU,SAAK+a,GAAN,IAAwBrb,QAAS,CAAEnH,KAAAA,MAC5C6F,GAAS8c,EAAAA,EAAAA,IAAgB3iB,IACzB6F,GAASsX,EAAAA,EAAAA,IAAiBnd,MACzB,KAEH+J,EAAAA,EAAAA,YAAU,YACRM,EAAAA,EAAAA,IAAyB1E,KAAYqE,EAAAA,EAAAA,IAAqBrE,EAASY,EAAWF,MAAOE,EAAWG,SAChG8J,MAAAA,OAAA,EAAAA,EAAalJ,QAAS,KAAMmD,EAAAA,GAAAA,IAAuB9E,EAAS,CAAC,WAAYwE,EAAAA,GAAAA,IAA0BxE,EAAS,CAAC,QAAS,CAAE3F,KAAMwQ,OAGhI,IAAM3E,EAAkB,SAACC,GACvBuW,GAAgB,SAACta,GAAD,OACd+D,EAAa/D,GACVyC,QAAO,gBAAqBoO,EAArB,EAAGC,iBAAoDC,EAAvD,EAAwCC,cAAxC,QAA8EH,GAAqBE,MAC1GjS,KAAI,kBAAqB,CAAEC,KAAvB,EAAGA,KAA0BiF,MAA7B,EAAS/L,cAIpB+J,EAAAA,EAAAA,YAAU,WACRxD,EAAWK,aAAcoD,EAAAA,EAAAA,IAAqBrE,EAASY,EAAWF,MAAOE,EAAWG,UACnF,CAACH,EAAWK,cAEfmD,EAAAA,EAAAA,YAAU,WACR4B,EAAexE,EAAQnH,MACvBoiB,EAAc9b,KACb,CAACa,EAASb,IAEb,IAAMyV,EAAS,kBACb,kBAAC,EAAAzY,SAAD,KACE,kBAAC,EAAA0Y,MAAD,CAAO4G,OAAK,EAAC3G,KAAM5F,GAAAA,EAAAA,aAAAA,MACjB,kBAAC,GAAD,CACE9P,WAAYA,EACZY,QAASA,EACTsL,WAAY,SAACvH,GACXzD,EAAUyD,GACVS,EAAe,QAIrB,kBAAC,EAAAqQ,MAAD,CAAO4G,OAAK,EAAC3G,KAAM5F,GAAAA,EAAAA,cAAAA,MACjB,kBAAC,GAAD,CACE9P,WAAYA,EACZY,QAASA,EACTsL,WAAY,SAACvH,GACXzD,EAAUyD,IAEZmK,aAAa8K,EAAAA,EAAAA,IAAa9J,GAAAA,EAAAA,OAAAA,KAAuB9P,EAAYY,GAC7DmO,aAAa6K,EAAAA,EAAAA,IAAa9J,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4B9P,GAA7B,IAAyCG,OAAQ,IAAKS,MAGnF,kBAAC,EAAA6U,MAAD,CAAO4G,OAAK,EAAC3G,KAAM5F,GAAAA,EAAAA,gBAAAA,MACjB,kBAAC,GAAD,CACE9P,WAAYA,EACZY,QAASA,EACTsL,WAAY,SAACoQ,EAAK3X,GAChBzD,EAAUyD,GACVmX,EAAgB7J,EAAahO,QAAO,SAACtI,GAAD,OAAU2gB,EAAIrJ,SAAStX,EAAI4E,WAEjEuO,aAAa8K,EAAAA,EAAAA,IAAa9J,GAAAA,EAAAA,OAAAA,KAAuB9P,EAAYY,GAC7DmO,aAAa6K,EAAAA,EAAAA,IAAa9J,GAAAA,EAAAA,OAAAA,KAAD,GAAC,MAA4B9P,GAA7B,IAAyCG,OAAQ,IAAKS,GAC/E0P,aAAW,EACXD,WAAY0L,OAMdlG,EAAiB,SAAC,GAAD,IAAGxD,EAAH,EAAGA,kBAAmBE,EAAtB,EAAsBA,eAAtB,OACrBF,GAAqBE,IAAmBR,EACpC,KACA,CACE,CACEjU,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,MAC1BiC,QAAS,SAACkW,EAAQwC,EAAQ9G,GACxB5P,EAAQ8G,KAAR,uBAA6B8I,EAAMzO,SAGvC,CACEzC,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BiC,QAAS,SAACkW,EAAQwC,EAAQ9G,GACxBgN,EAAoB,CAAChN,IACrB5P,EAAQ8G,KAAK4J,GAAAA,EAAAA,gBAAAA,UAMnBkG,EAAiB,yBACjBjE,EACA,CACE,kBAAC,EAAAzP,KAAD,CAAMC,GAAIuN,GAAAA,EAAAA,aAAAA,KAA6BzN,IAAI,YAAYtH,UAAU,qBAC/D,kBAAC,EAAAiC,OAAD,CAAQ0H,OAAO,sBAAsBxH,QAAQ,UAAU,aAAW,gBAC/D/C,EAAKe,cAAcC,EAAAA,EAAAA,eAGxB,CACEqK,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,aAC1BS,MAAO,CACLb,UAAW,qBAEbqC,QAAS,WACPgC,EAAQ8G,KAAK4J,GAAAA,EAAAA,aAAAA,QAGjB,CACEtK,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,MAC1BS,MAAO,CACLuB,aAAsC,IAAxB8U,EAAalR,SAE7B3D,QAAS,kBAAMgC,EAAQ8G,KAAR,uBAA6B+L,EAAa,GAAG1R,SAE9D,CACEiF,MAAOrL,EAAKe,cAAcC,EAAAA,EAAAA,QAC1BS,MAAO,CACLuB,YAAa8U,EAAalR,OAAS,GAErC3D,QAAS,WACP4e,EAAoB/J,GACpB7S,EAAQ8G,KAAK4J,GAAAA,EAAAA,gBAAAA,SAInB,KA8CN,OACE,kBAAC,EAAAyM,OAAD,KACE,kBAAC,KAAD,CAAiBC,WAAW,cAAc9G,KAAM5F,GAAAA,EAAAA,4BAAAA,KAA4C6F,OAAQ,SAAC/Z,GAAD,OAAW,kBAAC,KAASA,MACzH,kBAAC,KAAD,CACE4gB,WAAW,eACX9G,KAAM5F,GAAAA,EAAAA,gBAAAA,KACN6F,OAAQ,SAAC/Z,GAAD,OACN,kBAAC,IAAD,UACMA,EADN,CAEE0f,YAAa5C,MAAAA,OAAF,EAAEA,EAAanY,KAC1BwY,SAAU,SAACxY,GACT6E,EAAe,IACf0W,EAAgB7J,EAAahO,QAAO,SAACtI,GAAD,OAASA,EAAI4E,MAAQA,aAKjE,kBAAC,KAAD,CAAiBic,WAAW,aAAa9G,KAAM5F,GAAAA,EAAAA,OAAAA,KAAuB6F,OAAQ,kBA3DhF,kBAAC,EAAAnN,MAAD,CAAOzN,UAAU,iBACf,kBAAC,EAAA2N,UAAD,KACE,kBAAC,KAAD,CAAY+T,eAAa,GACvB,kBAAC,KAAD,CAAiB3e,MAAO3D,EAAKe,cAAcC,EAAAA,EAAAA,YAG/C,kBAAC,EAAAuN,UAAD,KACE,kBAAC4M,GAAA,EAAD,CAASrY,KAAK,UAAUuJ,GAAI,cAC1B,kBAAC,KAAD,CACEvK,KAAMkN,EAAO7I,KAAI,SAAC0O,GAAD,OACfA,EAAMsD,kBAAoBtD,EAAMwD,cAAhC,SAAqDxD,GAArD,IAA4DmD,eAAgB,MAAF,OAAQnD,EAAMwD,cAAgB,cAAgB,MAASxD,KAEnInM,WAAY,sCAAI+S,EAAJ,yBAAIA,EAAJ,uBAAa/S,GAAAA,WAAA,GAAWkP,GAAX,OAAuB6D,KAChD9S,QAASA,EACTsB,aAAc2N,EACdtQ,YAAawQ,EACb3M,gBAAiBA,EACjBkQ,OAAQA,EACRK,eAAgBA,EAChBnQ,YAAavL,EAAKe,cAAcC,EAAAA,EAAAA,QAAiBwK,cACjDC,cAAezL,EAAKe,cAAcC,EAAAA,EAAAA,OAAgBwK,cAClDjB,OAAO,eACP1E,WAAYA,EACZiK,YAAaA,EACb/I,UAAW,SAACyD,GACV,IAAQlL,EAAwCkL,EAAxClL,KAAM2G,EAAkCuE,EAAlCvE,MAAON,EAA2B6E,EAA3B7E,MAAOK,EAAoBwE,EAApBxE,OAAQsE,EAAYE,EAAZF,QAGpC,OAFAhB,EAAAA,EAAAA,IAAqBrE,EAASU,EAAOK,IACrC+E,EAAAA,GAAAA,IAAkB9F,EAAS,CAAE3F,KAAAA,IACtByH,EAAU,CAAEd,MAAAA,EAAON,MAAAA,EAAOK,OAAAA,EAAQsE,QAAAA,EAAS7D,QAAS,CAAEnH,KAAAA,MAE/D2L,eAAgB,oBAAG3L,KAAH,OAAmB2L,OAAnB,MAAU,GAAV,IAChB4Q,eAAgBA,EAChBvV,WAAYA,GAAgC,KAAnB0I,MAAAA,OAAA,EAAAA,EAAQpI,SAAwC,KAAxBkJ,MAAAA,OAAA,EAAAA,EAAalJ,SAAsBN,EACpF+J,kBAAmBrQ,EAAKe,cAAcC,EAAAA,EAAAA,MAAewK,cACrDF,WAAYgW,GACZzV,QAAQ,SACRwD,cAAeA","sources":["webpack:///./node_modules/@patternfly/react-icons/dist/esm/icons/outlined-question-circle-icon.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/edit-group-modal.js","webpack:///./src/smart-components/group/remove-group-modal.js","webpack:///./src/smart-components/group/group-table-helpers.js","webpack:///./src/smart-components/app-tabs/app-tabs.js","webpack:///./src/smart-components/group/principal/principal-table-helpers.js","webpack:///./src/smart-components/group/principal/add-group-members.js","webpack:///./src/smart-components/group/principal/principals.js","webpack:///./src/smart-components/group/role/default-group-change-modal.js","webpack:///./src/smart-components/group/role/add-group-roles.js","webpack:///./src/smart-components/group/role/remove-role-modal.js","webpack:///./src/smart-components/group/role/group-roles.js","webpack:///./src/smart-components/group/group.js","webpack:///./src/smart-components/group/group-row-wrapper.js","webpack:///./src/smart-components/group/groups.js"],"sourcesContent":["import { createIcon } from '../createIcon';\n\nexport const OutlinedQuestionCircleIconConfig = {\n  name: 'OutlinedQuestionCircleIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const OutlinedQuestionCircleIcon = createIcon(OutlinedQuestionCircleIconConfig);\n\nexport default OutlinedQuestionCircleIcon;","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const env = insights.chrome.getEnvironment();\n  const prefix = insights.chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  return orgAdmin ? (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Title, Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\n\nconst WizardError = ({ context, title, text }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <EmptyState variant={EmptyStateVariant.large}>\n      <EmptyStateIcon color=\"red\" icon={ExclamationCircleIcon} />\n      <Title headingLevel=\"h4\" size=\"lg\">\n        {title}\n      </Title>\n      <EmptyStateBody>{text}</EmptyStateBody>\n      <Button\n        onClick={() => {\n          setWizardError(undefined);\n          jumpToStep(0);\n        }}\n        variant=\"primary\"\n      >\n        {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n      </Button>\n    </EmptyState>\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n\nexport default WizardError;\n","import React, { useEffect, Fragment, useState, useContext, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, useHistory } from 'react-router-dom';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { Label } from '@patternfly/react-core';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport PermissionsContext from '../../../utilities/permissions-context';\n\nconst createRows = (userLinks, data, checkedRows = [], intl) =>\n  data?.reduce?.(\n    (acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => [\n      ...acc,\n      {\n        uuid: username,\n        cells: [\n          isOrgAdmin ? (\n            <Fragment>\n              <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n              <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n              <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n            </Fragment>\n          ),\n          { title: userLinks ? <Link to={`/users/detail/${username}`}>{username.toString()}</Link> : username.toString() },\n          email,\n          firstName,\n          lastName,\n          {\n            title: (\n              <Label key=\"status\" color={isActive ? 'green' : 'grey'}>\n                {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n              </Label>\n            ),\n            props: {\n              'data-is-active': isActive,\n            },\n          },\n        ],\n        selected: Boolean(checkedRows?.find?.(({ uuid }) => uuid === username)),\n      },\n    ],\n    []\n  );\n\nconst UsersList = ({ selectedUsers, setSelectedUsers, userLinks, inModal, props }) => {\n  const intl = useIntl();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const { orgAdmin } = useContext(PermissionsContext);\n  // use for text filter to focus\n  const innerRef = useRef(null);\n  const defaultPagination = useSelector(({ userReducer: { users } }) => ({\n    limit: inModal ? users.meta.limit : users.pagination.limit || (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: inModal ? users.meta.offset : users.pagination.offset || (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: inModal ? users.meta.count : users.pagination.count,\n    redirected: !inModal && users.pagination.redirected,\n  }));\n\n  const users = useSelector(({ userReducer: { users } }) => users?.data?.map?.((data) => ({ ...data, uuid: data.username })));\n  const pagination = useSelector(\n    ({\n      userReducer: {\n        users: { meta },\n      },\n    }) => meta\n  );\n  const isLoading = useSelector(({ userReducer: { isUserDataLoading } }) => isUserDataLoading);\n\n  const stateFilters = useSelector(\n    ({\n      userReducer: {\n        users: { filters },\n      },\n    }) => (history.location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] })\n  );\n\n  const fetchData = useCallback(\n    (apiProps) => {\n      return dispatch(fetchUsers(apiProps));\n    },\n    [dispatch]\n  );\n\n  const fetchUsersFilters = useCallback(\n    (filters) => {\n      return dispatch(updateUsersFilters(filters));\n    },\n    [dispatch]\n  );\n\n  const rows = createRows(userLinks, users, selectedUsers, intl);\n  const columns = [\n    { title: intl.formatMessage(messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    inModal\n      ? {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n      : stateFilters\n  );\n\n  useEffect(() => {\n    inModal || (defaultPagination.redirected && applyPaginationToUrl(history, defaultPagination.limit, defaultPagination.offset));\n  }, [defaultPagination.redirected]);\n\n  useEffect(() => {\n    const pagination = inModal ? defaultSettings : syncDefaultPaginationWithUrl(history, defaultPagination);\n    const newFilters = inModal ? { status: filters.status } : syncDefaultFiltersWithUrl(history, ['username', 'email', 'status'], filters);\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ ...pagination, filters: newFilters }), inModal });\n  }, []);\n\n  useEffect(() => {\n    if (!inModal) {\n      isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(history, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(history, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    inModal || fetchUsersFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n\n  return (\n    <TableToolbarView\n      isCompact\n      isSelectable\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index].key}`;\n        setSortByState({ index, direction });\n        fetchData({ ...pagination, filters, inModal, orderBy });\n      }}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n\n        fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), inModal }).then(() => {\n          innerRef?.current?.focus();\n        });\n        inModal || applyPaginationToUrl(history, limit, offset);\n        inModal || applyFiltersToUrl(history, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nUsersList.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  inModal: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  inModal: false,\n};\n\nexport default UsersList;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Bullseye, Spinner, Title } from '@patternfly/react-core';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { asyncValidator } from '../validators';\nimport WizardError from '../../common/wizard-error';\nimport messages from '../../../Messages';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const { submitting, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || submitting) {\n    return (\n      <Bullseye>\n        <Spinner size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (error === true) {\n    return (\n      <WizardError\n        context={AddGroupWizardContext}\n        title={intl.formatMessage(messages.groupNameTakenTitle)}\n        text={intl.formatMessage(messages.groupNameTakenText)}\n      />\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput/TextInput';\nimport { TextArea } from '@patternfly/react-core/dist/esm/components/TextArea/TextArea';\nimport { FormGroup } from '@patternfly/react-core/dist/esm/components/Form/FormGroup';\nimport { debouncedAsyncValidator } from '../validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) => (groupName === undefined || groupNameError ? 'error' : 'default');\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    input.onChange(undefined);\n    debouncedAsyncValidator(value)\n      .then(() => {\n        input.onChange(value);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup\n          label={intl.formatMessage(messages.groupName)}\n          helperTextInvalid={groupName ? groupNameError : intl.formatMessage(messages.required)}\n          isRequired\n          validated={groupNameValidated(groupName, groupNameError)}\n        >\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValidated(groupName, groupNameError)}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup\n          label={intl.formatMessage(messages.groupDescription)}\n          helperTextInvalid={intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}\n          validated={groupDescriptionValidated(groupDescription)}\n        >\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValidated(groupDescription)}\n            onChange={(value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { defaultSettings, defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { sortable } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded }) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const textFilterRef = useRef(null);\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: { addRoles, uuid },\n    },\n  }) => ({\n    roles: addRoles.roles,\n    pagination: addRoles.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !addRoles.loaded,\n    groupId: uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => {\n      return newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name }));\n    });\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) => (rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps(config)))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n      textFilterRef={textFilterRef}\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">\n              <Card>\n                <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n              </Card>\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n  } = formOptions.getState().values;\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedRoles.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>\n                    {selectedUsers.map((role, index) => (\n                      <Text className=\"pf-u-mb-0\" key={index}>\n                        {role.label}\n                      </Text>\n                    ))}\n                  </Text>\n                </GridItem>\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useState, createContext, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from 'react-router-dom';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport { WarningModal } from '../../common/warningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup } from '../../../redux/actions/group-actions';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SummaryContent from './summary-content';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport paths from '../../../utilities/pathnames';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../../Messages';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const schema = useRef(schemaBuilder());\n  const { push } = useHistory();\n  const [cancelWarningVisible, setCancelWarningVisible] = useState(false);\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    push({\n      pathname: paths.groups.path,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n    dispatch(addGroup(groupData))\n      .then(() => postMethod({ limit: pagination.limit, offset: 0, filters: {} }))\n      .then(() => {\n        dispatch(\n          addNotification({\n            variant: 'success',\n            title: intl.formatMessage(messages.addGroupSuccessTitle),\n            dismissDelay: 8000,\n            description: intl.formatMessage(messages.addGroupSuccessDescription),\n          })\n        );\n      });\n  };\n\n  return cancelWarningVisible ? (\n    <WarningModal\n      type=\"group\"\n      isOpen={cancelWarningVisible}\n      onModalCancel={() => setCancelWarningVisible(false)}\n      onConfirmCancel={redirectToGroups}\n    />\n  ) : (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <FormRenderer\n        schema={schema.current}\n        subscription={{ values: true }}\n        FormTemplate={FormTemplate}\n        componentMapper={{ ...componentMapper, ...mapperExtension }}\n        onSubmit={onSubmit}\n        initialValues={groupData}\n        onCancel={onCancel(redirectToGroups, setCancelWarningVisible, setGroupData)}\n      />\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n};\n\nexport default AddGroupWizard;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = () => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport ModalFormTemplate from '../common/ModalFormTemplate';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '../common/form-renderer';\nimport { fetchGroup, updateGroup } from '../../redux/actions/group-actions';\nimport { Skeleton } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from './validators';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\n\nconst EditGroupModal = ({\n  addNotification,\n  updateGroup,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n  group,\n  onClose,\n}) => {\n  const intl = useIntl();\n  const [selectedGroup, setSelectedGroup] = useState(undefined);\n\n  const { push } = useHistory();\n  const match = useRouteMatch('/groups/edit/:id');\n\n  const setGroupData = (groupData) => {\n    setSelectedGroup(groupData);\n  };\n\n  const fetchData = () => {\n    match &&\n      fetchGroup(match.params.id)\n        .payload.then((data) => setGroupData(data))\n        .catch(() => setGroupData(undefined));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    setSelectedGroup(group);\n  }, [group]);\n\n  const onSubmit = (data) => {\n    const user_data = {\n      uuid: data.uuid,\n      description: data.description || null,\n      name: data.name,\n    };\n    postMethod\n      ? updateGroup(user_data)\n          .then(() => postMethod({ limit: pagination?.limit, filters }))\n          .then(push(submitRoute))\n      : updateGroup(user_data).then(() => push(submitRoute));\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      dismissDelay: 8000,\n      title: intl.formatMessage(selectedGroup ? messages.editingGroupTitle : messages.addingGroupTitle),\n      description: intl.formatMessage(selectedGroup ? messages.editGroupCanceledDescription : messages.addingGroupCanceledDescription),\n    });\n    onClose();\n    push(cancelRoute);\n  };\n\n  const schema = {\n    fields: [\n      {\n        name: 'name',\n        label: intl.formatMessage(messages.name),\n        component: selectedGroup ? componentTypes.TEXT_FIELD : 'skeleton',\n        ...(selectedGroup ? { validateOnMount: true } : {}),\n        validate: [\n          { type: 'validate-group-name', id: match ? match.params.id : group.uuid, idKey: 'uuid' },\n          {\n            type: validatorTypes.REQUIRED,\n          },\n        ],\n      },\n      {\n        name: 'description',\n        label: intl.formatMessage(messages.description),\n        component: selectedGroup ? componentTypes.TEXTAREA : 'skeleton',\n        validate: [\n          {\n            type: validatorTypes.MAX_LENGTH,\n            threshold: 150,\n          },\n        ],\n      },\n    ],\n  };\n\n  const validatorMapper = {\n    'validate-group-name':\n      ({ idKey, id }) =>\n      (value) =>\n        debouncedAsyncValidator(value, idKey, id),\n  };\n\n  return (\n    <FormRenderer\n      schema={schema}\n      componentMapper={{\n        ...componentMapper,\n        skeleton: Skeleton,\n      }}\n      onCancel={onCancel}\n      onSubmit={onSubmit}\n      validatorMapper={validatorMapper}\n      initialValues={{ ...selectedGroup }}\n      FormTemplate={(props) => (\n        <ModalFormTemplate\n          {...props}\n          ModalProps={{ onClose: onCancel, isOpen: true, variant: 'medium', title: intl.formatMessage(messages.editGroupInfo) }}\n        />\n      )}\n    />\n  );\n};\n\nEditGroupModal.defaultProps = {\n  cancelRoute: pathnames.groups.path,\n  onClose: () => null,\n  onSubmit: () => null,\n};\n\nEditGroupModal.propTypes = {\n  addNotification: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  updateGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  group: PropTypes.object,\n  onClose: PropTypes.func,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      updateGroup,\n      fetchGroup,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditGroupModal);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Button, Checkbox, Modal, ModalVariant, Text, TextContent } from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport { fetchGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { FormItemLoader } from '../../presentational-components/shared/loader-placeholders';\nimport pathnames from '../../utilities/pathnames';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './remove-group-modal.scss';\n\nconst RemoveGroupModal = ({\n  removeGroups,\n  group,\n  isLoading,\n  fetchGroup,\n  groupsUuid,\n  isModalOpen,\n  postMethod,\n  pagination,\n  filters,\n  cancelRoute,\n  submitRoute = cancelRoute,\n}) => {\n  const intl = useIntl();\n  useEffect(() => {\n    if (groupsUuid.length === 1) {\n      fetchGroup(groupsUuid[0].uuid);\n    }\n  }, []);\n\n  const { push } = useHistory();\n\n  const [checked, setChecked] = useState(false);\n\n  const multipleGroups = groupsUuid.length > 1;\n\n  const onSubmit = () => {\n    const uuids = groupsUuid.map((group) => group.uuid);\n    removeGroups(uuids)\n      .then(() => postMethod(uuids, { limit: pagination?.limit, filters }))\n      .then(push(submitRoute));\n  };\n\n  const onCancel = () => push(cancelRoute);\n\n  return (\n    <Modal\n      className=\"rbac\"\n      isOpen={isModalOpen}\n      variant={ModalVariant.small}\n      title={\n        <Text>\n          <ExclamationTriangleIcon className=\"delete-group-warning-icon\" />\n          &nbsp; {intl.formatMessage(multipleGroups ? messages.deleteGroupsQuestion : messages.deleteGroupQuestion)}\n        </Text>\n      }\n      onClose={onCancel}\n      actions={[\n        <Button key=\"submit\" isDisabled={!checked} variant=\"danger\" type=\"button\" onClick={onSubmit}>\n          {intl.formatMessage(multipleGroups ? messages.deleteGroups : messages.deleteGroup)}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" type=\"button\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        {multipleGroups ? (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupsRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                count: groupsUuid.length,\n              }}\n            />\n          </Text>\n        ) : isLoading ? (\n          <FormItemLoader />\n        ) : (\n          <Text>\n            <FormattedMessage\n              {...messages.deletingGroupRemovesRoles}\n              values={{\n                b: (text) => <b>{text}</b>,\n                name: group.name,\n              }}\n            />\n          </Text>\n        )}\n      </TextContent>\n      &nbsp;\n      <Checkbox\n        isChecked={checked}\n        onChange={() => setChecked(!checked)}\n        label={intl.formatMessage(messages.understandActionIrreversible)}\n        id=\"delete-group-check\"\n      />\n    </Modal>\n  );\n};\n\nRemoveGroupModal.defaultProps = {\n  isModalOpen: false,\n  group: {},\n  groupsUuid: [],\n  isLoading: true,\n  cancelUrl: pathnames.groups.path,\n};\n\nRemoveGroupModal.propTypes = {\n  isModalOpen: PropTypes.bool,\n  removeGroups: PropTypes.func.isRequired,\n  fetchGroup: PropTypes.func.isRequired,\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  isLoading: PropTypes.bool,\n  group: PropTypes.object,\n  groupsUuid: PropTypes.array,\n  submitRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  cancelRoute: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup } }) => ({\n  group: selectedGroup,\n  isLoading: !selectedGroup.loaded,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RemoveGroupModal);\n","import React, { Fragment, useRef, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { Popover } from '@patternfly/react-core';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { getDateFormat } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\n\nconst DefaultPlatformPopover = ({ id, uuid, bodyContent }) => {\n  const [isPopoverVisible, setPopoverVisible] = useState(false);\n  const popoverRootRef = useRef(null);\n\n  return (\n    <span ref={popoverRootRef} key={`${uuid}-popover`} id={id}>\n      <Popover\n        zIndex=\"110\"\n        position=\"right\"\n        isVisible={isPopoverVisible}\n        shouldClose={() => setPopoverVisible(false)}\n        hideOnOutsideClick\n        bodyContent={bodyContent}\n        appendTo={popoverRootRef.current}\n      >\n        <OutlinedQuestionCircleIcon\n          onClick={() => setPopoverVisible(!isPopoverVisible)}\n          className={classNames('pf-c-question-circle-icon', { 'icon-active': isPopoverVisible })}\n        />\n      </Popover>\n    </span>\n  );\n};\n\nDefaultPlatformPopover.propTypes = {\n  id: PropTypes.string.isRequired,\n  uuid: PropTypes.string.isRequired,\n  bodyContent: PropTypes.string.isRequired,\n};\n\nexport const createRows = (isAdmin, data, _opened, selectedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { uuid, name, roleCount, principalCount, modified, platform_default: isPlatformDefault, admin_default: isAdminDefault }) => [\n      ...acc,\n      {\n        uuid,\n        isAdminDefault,\n        isPlatformDefault,\n        cells: [\n          <Fragment key={uuid}>\n            <div className=\"pf-m-inline-flex\">\n              {isAdmin ? (\n                <Link key={`${uuid}-link`} state={{ uuid }} to={{ pathname: `/groups/detail/${isPlatformDefault ? 'default-access' : uuid}` }}>\n                  {name}\n                </Link>\n              ) : (\n                name\n              )}\n              {(isPlatformDefault || isAdminDefault) && (\n                <DefaultPlatformPopover\n                  id={`default${isAdminDefault ? '-admin' : ''}-group-popover`}\n                  uuid={uuid}\n                  key={`${uuid}-popover`}\n                  bodyContent={intl.formatMessage(isAdminDefault ? messages.orgAdminInheritedRoles : messages.usersInheritedRoles)}\n                />\n              )}\n            </div>\n          </Fragment>,\n          roleCount,\n          principalCount,\n          <Fragment key={`${uuid}-modified`}>\n            <DateFormat date={modified} type={getDateFormat(modified)} />\n          </Fragment>,\n        ],\n        selected: Boolean(selectedRows && selectedRows.find((row) => row.uuid === uuid)),\n      },\n    ],\n    []\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { Tabs, Tab } from '@patternfly/react-core';\nimport './app-tabs.scss';\n\nconst AppTabs = ({ history: { push }, location: { pathname }, tabItems, isHeader }) => {\n  const activeTab = tabItems.find(({ name }) => pathname.includes(name));\n  const handleTabClick = (_event, tabIndex) => push(tabItems[tabIndex].name);\n\n  return (\n    <Tabs className={isHeader ? `rbac-page-header__tabs` : ''} activeKey={activeTab ? activeTab.eventKey : 0} onSelect={handleTabClick}>\n      {tabItems.map((item) => (\n        <Tab title={item.title} key={item.eventKey} eventKey={item.eventKey} name={item.name} />\n      ))}\n    </Tabs>\n  );\n};\n\nAppTabs.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  tabItems: PropTypes.array.isRequired,\n  isHeader: PropTypes.bool,\n};\n\nexport default withRouter(AppTabs);\n","import React from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nexport const createRows = (data, _opened, checkedRows = []) => {\n  const intl = useIntl();\n  return data.reduce(\n    (acc, { is_active: isActive, username, email, first_name: firstName, last_name: lastName }) => [\n      ...acc,\n      {\n        uuid: username,\n        username,\n        cells: [\n          {\n            title: <Label color={isActive && 'green'}>{intl.formatMessage(isActive ? messages.active : messages.inactive)}</Label>,\n            props: {\n              data: { isActive },\n            },\n          },\n          username,\n          email,\n          lastName,\n          firstName,\n        ],\n        selected: checkedRows.find((row) => row.uuid === username),\n      },\n    ],\n    []\n  );\n};\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport PropTypes from 'prop-types';\nimport { Button, Modal, ModalVariant, StackItem, Stack, TextContent } from '@patternfly/react-core';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { addGroup, addMembersToGroup, fetchMembersForGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport UsersList from '../add-group/users-list';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst AddGroupMembers = ({\n  history: { push },\n  match: {\n    params: { uuid },\n  },\n  addNotification,\n  closeUrl,\n  addMembersToGroup,\n  fetchMembersForGroup,\n  fetchGroups,\n}) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const intl = useIntl();\n  const onSubmit = () => {\n    const userList = selectedUsers.map((user) => ({ username: user.label }));\n    if (userList.length > 0) {\n      addNotification({\n        variant: 'info',\n        title: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(userList.length > 1 ? messages.addingGroupMembersDescription : messages.addingGroupMemberDescription),\n      });\n      addMembersToGroup(uuid, userList).then(() => {\n        fetchMembersForGroup(uuid);\n        fetchGroups({ inModal: false });\n      });\n    }\n\n    push(closeUrl);\n  };\n\n  const onCancel = () => {\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersTitle : messages.addingGroupMemberTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(selectedUsers.length > 1 ? messages.addingGroupMembersCancelled : messages.addingGroupMemberCancelled),\n    });\n    push(closeUrl);\n  };\n\n  return (\n    <Modal\n      title={intl.formatMessage(messages.addMembers)}\n      variant={ModalVariant.medium}\n      isOpen\n      actions={[\n        <Button key=\"confirm\" ouiaId=\"primary-confirm-button\" isDisabled={selectedUsers.length === 0} variant=\"primary\" onClick={onSubmit}>\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button id=\"add-groups-cancel\" ouiaId=\"secondary-cancel-button\" key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n      onClose={onCancel}\n    >\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <ActiveUser linkDescription={intl.formatMessage(messages.toManageUsersText)} />\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <UsersList selectedUsers={selectedUsers} setSelectedUsers={setSelectedUsers} inModal />\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupMembers.defaultProps = {\n  users: [],\n  inputValue: '',\n  closeUrl: '/groups',\n  selectedUsers: [],\n};\n\nAddGroupMembers.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func,\n  }).isRequired,\n  addGroup: PropTypes.func.isRequired,\n  addNotification: PropTypes.func.isRequired,\n  fetchData: PropTypes.func,\n  fetchMembersForGroup: PropTypes.func.isRequired,\n  inputValue: PropTypes.string,\n  users: PropTypes.array,\n  selectedUsers: PropTypes.array,\n  match: PropTypes.object,\n  closeUrl: PropTypes.string,\n  addMembersToGroup: PropTypes.func.isRequired,\n  fetchGroups: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ groupReducer: { isLoading } }) => ({\n  isLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      addNotification,\n      addGroup,\n      addMembersToGroup,\n      fetchMembersForGroup,\n      fetchGroups,\n    },\n    dispatch\n  );\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddGroupMembers));\n","/* eslint-disable camelcase */\nimport { nowrap } from '@patternfly/react-table';\nimport React, { Fragment, useState, useEffect, useContext, useRef } from 'react';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { Link, Route, useHistory, useParams } from 'react-router-dom';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './principal-table-helpers';\nimport { fetchMembersForGroup, removeMembersFromGroup, fetchGroups } from '../../../redux/actions/group-actions';\nimport { Button, Card, CardBody, Text, TextVariants, Bullseye, TextContent } from '@patternfly/react-core';\nimport AddGroupMembers from './add-group-members';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport paths from '../../../utilities/pathnames';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst selector = ({ groupReducer: { selectedGroup } }) => ({\n  principals: selectedGroup.members.data,\n  pagination: selectedGroup.members.meta,\n  groupName: selectedGroup.name,\n  admin_default: selectedGroup.admin_default,\n  platform_default: selectedGroup.platform_default,\n  isLoading: selectedGroup.members.isLoading,\n});\n\nconst removeModalText = (name, group, plural) => (\n  <FormattedMessage\n    {...(plural ? messages.removeMembersText : messages.removeMemberText)}\n    values={{\n      b: (text) => <b>{text}</b>,\n      name,\n      group,\n    }}\n  />\n);\nconst GroupPrincipals = () => {\n  const intl = useIntl();\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedPrincipals, setSelectedPrincipals] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n\n  const { uuid } = useParams();\n  const { principals, pagination, groupName, isLoading, admin_default, platform_default } = useSelector(selector, shallowEqual);\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username) },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.lastName) },\n    { title: intl.formatMessage(messages.firstName) },\n  ];\n\n  const dispatch = useDispatch();\n\n  const fetchData = (usernames, options = pagination) => {\n    dispatch(fetchMembersForGroup(uuid, usernames, options));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedPrincipals = (newSelection) => {\n    setSelectedPrincipals((principals) => newSelection(principals));\n  };\n\n  const removeMembers = (userNames) => {\n    return dispatch(removeMembersFromGroup(uuid, userNames)).then(() => {\n      setSelectedPrincipals([]);\n      fetchData(undefined, { ...pagination, offset: 0 });\n      dispatch(fetchGroups({ inModal: false }));\n    });\n  };\n\n  const actionResolver = () =>\n    !hasPermissions.current\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, principal) => {\n              setConfirmDelete(() => () => removeMembers([principal.username.title]));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeMemberQuestion),\n                text: removeModalText(principal.username.title, groupName, false),\n                confirmButtonLabel: intl.formatMessage(messages.removeMember),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-members'].path}\n        render={(args) => <AddGroupMembers fetchData={fetchData} closeUrl={`/groups/detail/${uuid}/members`} {...args} />}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current\n      ? [\n          <Link to={`/groups/detail/${uuid}/members/add_members`} key=\"remove-from-group\" className=\"rbac-m-hide-on-sm\">\n            <Button variant=\"primary\" aria-label=\"Add member\">\n              {intl.formatMessage(messages.addMember)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addMember),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/members/add_members`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedPrincipals || !selectedPrincipals.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleMembersSelected = selectedPrincipals.length > 1;\n              const removeText = intl.formatMessage(multipleMembersSelected ? messages.removeMembersQuestion : messages.removeMemberQuestion);\n              setConfirmDelete(() => () => removeMembers(selectedPrincipals.map((user) => user.uuid)));\n              setDeleteInfo({\n                title: removeText,\n                confirmButtonLabel: removeText,\n                text: removeModalText(\n                  multipleMembersSelected ? selectedPrincipals.length : selectedPrincipals[0].uuid,\n                  groupName,\n                  multipleMembersSelected\n                ),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <Fragment>\n      <RemoveModal\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        isOpen={showRemoveModal}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n        }}\n      />\n      <Section type=\"content\" id={'tab-principals'}>\n        {platform_default || admin_default ? (\n          <Card>\n            <CardBody>\n              <Bullseye>\n                <TextContent>\n                  <Text component={TextVariants.h1}>\n                    {intl.formatMessage(admin_default ? messages.allOrgAdminsAreMembers : messages.allUsersAreMembers)}\n                  </Text>\n                </TextContent>\n              </Bullseye>\n            </CardBody>\n          </Card>\n        ) : (\n          <TableToolbarViewOld\n            data={(principals || []).map((user) => ({ ...user, uuid: user.username }))}\n            isSelectable={hasPermissions.current}\n            createRows={createRows}\n            columns={columns}\n            routes={routes}\n            actionResolver={actionResolver}\n            filterPlaceholder={intl.formatMessage(messages.username).toLowerCase()}\n            titlePlural={intl.formatMessage(messages.members).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.member)}\n            ouiaId=\"members-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={({ limit, offset, name }) => fetchData(name, { limit, offset })}\n            setFilterValue={({ name }) => setFilterValue(name)}\n            checkedRows={selectedPrincipals}\n            isLoading={isLoading}\n            rowWrapper={UsersRow}\n            setCheckedItems={setCheckedPrincipals}\n            toolbarButtons={toolbarButtons}\n            emptyProps={{ title: intl.formatMessage(messages.noGroupMembers), description: [intl.formatMessage(messages.addUserToConfigure), ''] }}\n            tableId=\"group-members\"\n          />\n        )}\n      </Section>\n    </Fragment>\n  );\n};\n\nexport default GroupPrincipals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, TextContent } from '@patternfly/react-core';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\n\nconst DefaultGroupChange = ({ isOpen, onClose, onSubmit }) => {\n  const intl = useIntl();\n  return (\n    <RemoveModal\n      text={\n        <TextContent>\n          <Text>\n            <FormattedMessage\n              {...messages.defaultAccessGroupEditWarning}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          </Text>\n        </TextContent>\n      }\n      title={intl.formatMessage(messages.warning)}\n      withCheckbox\n      isOpen={isOpen}\n      confirmButtonLabel={intl.formatMessage(messages.continue)}\n      onClose={onClose}\n      onSubmit={onSubmit}\n    />\n  );\n};\n\nDefaultGroupChange.propTypes = {\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nexport default DefaultGroupChange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Modal, ModalVariant, Stack, StackItem, Text, TextContent, TextVariants, Title } from '@patternfly/react-core';\nimport RolesList from '../add-group/roles-list';\nimport DefaultGroupChange from './default-group-change-modal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst AddGroupRoles = ({\n  history: { push },\n  selectedRoles,\n  setSelectedRoles,\n  title,\n  closeUrl,\n  addRolesToGroup,\n  name,\n  isDefault,\n  isChanged,\n  addNotification,\n  onDefaultGroupChanged,\n  fetchRolesForGroup,\n  fetchSystemGroup,\n  fetchGroup,\n  fetchUuid,\n}) => {\n  const intl = useIntl();\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const onCancel = () => {\n    setSelectedRoles && setSelectedRoles([]);\n    addNotification({\n      variant: 'warning',\n      title: intl.formatMessage(messages.addingGroupRolesTitle),\n      dismissDelay: 8000,\n      description: intl.formatMessage(messages.addingGroupRolesCancelled),\n    });\n    push(closeUrl);\n  };\n\n  const onSubmit = () => {\n    const rolesList = selectedRoles.map((role) => role.uuid);\n    addRolesToGroup(fetchUuid, rolesList, () => {\n      if (isDefault) {\n        fetchSystemGroup().then(({ value: { data } }) => {\n          fetchRolesForGroup(data[0].uuid);\n          fetchGroup(data[0].uuid);\n        });\n      } else {\n        fetchRolesForGroup();\n        fetchGroup();\n      }\n      setSelectedRoles([]);\n    });\n    if (isDefault && !isChanged) {\n      onDefaultGroupChanged(true);\n    }\n\n    return push(closeUrl);\n  };\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange isOpen={showConfirmModal} onClose={onCancel} onSubmit={onSubmit} />\n  ) : (\n    <Modal\n      title={intl.formatMessage(messages.addRolesToGroup)}\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={() => {\n        onCancel();\n        setShowConfirmModal(true);\n      }}\n      actions={[\n        <Button\n          aria-label=\"Save\"\n          ouiaId=\"primary-save-button\"\n          variant=\"primary\"\n          key=\"confirm\"\n          isDisabled={selectedRoles.length === 0}\n          onClick={() => {\n            setShowConfirmModal(true);\n            (!isDefault || isChanged) && onSubmit();\n          }}\n        >\n          {intl.formatMessage(messages.addToGroup)}\n        </Button>,\n        <Button aria-label=\"Cancel\" ouiaId=\"secondary-cancel-button\" variant=\"link\" key=\"cancel\" onClick={onCancel}>\n          {intl.formatMessage(messages.cancel)}\n        </Button>,\n      ]}\n    >\n      <Stack hasGutter>\n        {title && (\n          <StackItem>\n            <Title headingLevel=\"h4\" size=\"xl\">\n              {title}\n            </Title>\n          </StackItem>\n        )}\n        <StackItem>\n          <TextContent>\n            <Text component={TextVariants.p}>\n              <FormattedMessage\n                {...messages.onlyGroupRolesVisible}\n                values={{\n                  b: (text) => <b>{text}</b>,\n                  name: name,\n                }}\n              />\n            </Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <Card>\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={true} />\n          </Card>\n        </StackItem>\n      </Stack>\n    </Modal>\n  );\n};\n\nAddGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.any,\n    goBack: PropTypes.func.isRequired,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  addRolesToGroup: PropTypes.func,\n  closeUrl: PropTypes.string,\n  title: PropTypes.string,\n  name: PropTypes.string,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  addNotification: PropTypes.func,\n  onDefaultGroupChanged: PropTypes.func,\n  fetchRolesForGroup: PropTypes.func,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  fetchUuid: PropTypes.string,\n};\n\nexport default AddGroupRoles;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport DefaultGroupChange from './default-group-change-modal';\nimport RemoveModal from '../../../presentational-components/shared/RemoveModal';\n\nconst RemoveRoles = ({ title, text, onClose, onSubmit, isOpen, confirmButtonLabel, isDefault, isChanged }) => {\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  return isDefault && !isChanged && showConfirmModal ? (\n    <DefaultGroupChange\n      isOpen={showConfirmModal && isOpen}\n      onClose={() => {\n        onClose();\n        setShowConfirmModal(false);\n      }}\n      onSubmit={() => {\n        onSubmit();\n      }}\n    />\n  ) : (\n    <RemoveModal\n      text={text}\n      title={title}\n      isOpen={isOpen}\n      confirmButtonLabel={confirmButtonLabel}\n      onClose={() => {\n        onClose();\n      }}\n      onSubmit={() => {\n        setShowConfirmModal(true);\n        (!isDefault || isChanged) && onSubmit();\n      }}\n    />\n  );\n};\n\nRemoveRoles.propTypes = {\n  text: PropTypes.node,\n  title: PropTypes.node,\n  confirmButtonLabel: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onClose: PropTypes.func,\n  isOpen: PropTypes.bool,\n  isDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n};\n\nRemoveRoles.defaultProps = {\n  isDefault: false,\n  isChanged: false,\n};\n\nexport default RemoveRoles;\n","import React, { useState, useEffect, Fragment, useContext, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link, Route, useHistory } from 'react-router-dom';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { defaultCompactSettings, defaultSettings } from '../../../helpers/shared/pagination';\nimport { TableToolbarViewOld } from '../../../presentational-components/shared/table-toolbar-view-old';\nimport {\n  removeRolesFromGroup,\n  addRolesToGroup,\n  fetchRolesForGroup,\n  fetchAddRolesForGroup,\n  fetchGroup,\n  fetchSystemGroup,\n} from '../../../redux/actions/group-actions';\nimport AddGroupRoles from './add-group-roles';\nimport RemoveRole from './remove-role-modal';\nimport paths from '../../../utilities/pathnames';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport './group-roles.scss';\n\nconst createRows = (groupUuid, data, expanded, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description, modified }) => [\n          ...acc,\n          {\n            uuid,\n            title: display_name || name,\n            cells: [\n              <Fragment key={`${uuid}-name`}>\n                <Link to={`/groups/detail/${groupUuid}/roles/detail/${uuid}`}>{display_name || name}</Link>\n              </Fragment>,\n              description,\n              <Fragment key={`${uuid}-modified`}>\n                <DateFormat date={modified} type={getDateFormat(modified)} />\n              </Fragment>,\n            ],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst generateOuiaID = (name) => {\n  // given a group name, generate an OUIA ID for the 'Add role' button\n  return name.toLowerCase().includes('default access') ? 'dag-add-role-button' : 'add-role-button';\n};\n\nconst addRoleButton = (isDisabled, ouiaId, customTooltipText) => {\n  const intl = useIntl();\n  const addRoleButtonContent = (\n    <Button ouiaId={ouiaId} variant=\"primary\" className=\"rbac-m-hide-on-sm\" aria-label=\"Add role\" isAriaDisabled={isDisabled}>\n      {intl.formatMessage(messages.addRole)}\n    </Button>\n  );\n\n  return isDisabled ? (\n    <Tooltip content={customTooltipText || intl.formatMessage(messages.allRolesAdded)}>{addRoleButtonContent}</Tooltip>\n  ) : (\n    addRoleButtonContent\n  );\n};\n\nconst GroupRoles = ({\n  roles,\n  removeRoles,\n  addRoles,\n  fetchRolesForGroup,\n  isLoading,\n  pagination,\n  match: {\n    params: { uuid },\n  },\n  name,\n  isAdminDefault,\n  isPlatformDefault,\n  systemGroupUuid,\n  isChanged,\n  onDefaultGroupChanged,\n  fetchAddRolesForGroup,\n  disableAddRoles,\n  addNotification,\n  reloadGroup,\n  fetchSystemGroup,\n}) => {\n  const intl = useIntl();\n  const [descriptionValue, setDescriptionValue] = useState('');\n  const [filterValue, setFilterValue] = useState('');\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [selectedAddRoles, setSelectedAddRoles] = useState([]);\n  const [showRemoveModal, setShowRemoveModal] = useState(false);\n  const [confirmDelete, setConfirmDelete] = useState(() => null);\n  const [deleteInfo, setDeleteInfo] = useState({});\n  const { userAccessAdministrator, orgAdmin } = useContext(PermissionsContext);\n  const hasPermissions = useRef(orgAdmin || userAccessAdministrator);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description) },\n    { title: intl.formatMessage(messages.lastModified) },\n  ];\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchRolesForGroup(pagination)(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchRolesForGroup(pagination)(systemGroupUuid);\n      }\n    }\n  }, [systemGroupUuid]);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    if (uuid !== 'default-access') {\n      fetchAddRolesForGroup(uuid);\n    } else {\n      if (systemGroupUuid) {\n        fetchAddRolesForGroup(systemGroupUuid);\n      }\n    }\n  }, [roles, systemGroupUuid]);\n\n  useEffect(() => {\n    hasPermissions.current = orgAdmin || userAccessAdministrator;\n  }, [orgAdmin, userAccessAdministrator]);\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const removeModalText = (name, role, plural) => (\n    <p>\n      <FormattedMessage\n        {...(plural ? messages.removeRolesModalText : messages.removeRoleModalText)}\n        values={{\n          b: (text) => <b>{text}</b>,\n          name,\n          ...(plural ? { roles: role } : { role }),\n        }}\n      />\n    </p>\n  );\n\n  const fetchUuid = uuid !== 'default-access' ? uuid : systemGroupUuid;\n\n  const removeRolesCallback = () => {\n    if (isPlatformDefault) {\n      fetchSystemGroup().then(({ value: { data } }) => {\n        fetchRolesForGroup({ ...pagination, offset: 0 })(data[0].uuid);\n      });\n    } else {\n      fetchRolesForGroup({ ...pagination, offset: 0 })(uuid);\n    }\n  };\n\n  const actionResolver = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          {\n            title: intl.formatMessage(messages.remove),\n            onClick: (_event, _rowId, role) => {\n              setConfirmDelete(() => () => removeRoles(fetchUuid, [role.uuid], removeRolesCallback));\n              setDeleteInfo({\n                title: intl.formatMessage(messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(messages.removeRole),\n                text: removeModalText(name, role.title, false),\n              });\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const routes = () => (\n    <Fragment>\n      <Route\n        path={paths['group-add-roles'].path}\n        render={(args) => (\n          <AddGroupRoles\n            fetchUuid={fetchUuid}\n            fetchGroup={(customId) => reloadGroup(customId ?? fetchUuid)}\n            fetchRolesForGroup={(customId) => fetchRolesForGroup({ ...pagination, offset: 0 })(customId ?? fetchUuid)}\n            fetchSystemGroup={fetchSystemGroup}\n            selectedRoles={selectedAddRoles}\n            setSelectedRoles={setSelectedAddRoles}\n            closeUrl={`/groups/detail/${isPlatformDefault ? 'default-access' : uuid}/roles`}\n            addRolesToGroup={addRoles}\n            name={name}\n            isDefault={isPlatformDefault || isAdminDefault}\n            isChanged={isChanged}\n            addNotification={addNotification}\n            onDefaultGroupChanged={onDefaultGroupChanged}\n            {...args}\n          />\n        )}\n      />\n    </Fragment>\n  );\n\n  const history = useHistory();\n\n  const toolbarButtons = () => [\n    ...(hasPermissions.current && !isAdminDefault\n      ? [\n          <Link\n            className={`rbac-m-hide-on-sm rbac-c-button__add-role${disableAddRoles && '-disabled'}`}\n            to={`/groups/detail/${uuid}/roles/add_roles`}\n            key=\"add-to-group\"\n          >\n            {addRoleButton(disableAddRoles, generateOuiaID(name || ''), isAdminDefault && intl.formatMessage(messages.defaultGroupNotManually))}\n          </Link>,\n          {\n            label: intl.formatMessage(messages.addRole),\n            props: {\n              isDisabled: disableAddRoles,\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(`/groups/detail/${uuid}/roles/add_roles`);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.remove),\n            props: {\n              isDisabled: !selectedRoles || !selectedRoles.length > 0,\n              variant: 'danger',\n            },\n            onClick: () => {\n              const multipleRolesSelected = selectedRoles.length > 1;\n              setConfirmDelete(\n                () => () =>\n                  removeRoles(\n                    fetchUuid,\n                    selectedRoles.map((role) => role.uuid),\n                    removeRolesCallback\n                  )\n              );\n              setDeleteInfo({\n                title: intl.formatMessage(multipleRolesSelected ? messages.removeRolesQuestion : messages.removeRoleQuestion),\n                confirmButtonLabel: intl.formatMessage(multipleRolesSelected ? messages.removeRoles : messages.removeRole),\n                text: removeModalText(\n                  name,\n                  multipleRolesSelected ? selectedRoles.length : roles.find((role) => role.uuid === selectedRoles[0].uuid).name,\n                  multipleRolesSelected\n                ),\n              });\n\n              setShowRemoveModal(true);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  return (\n    <React.Fragment>\n      <RemoveRole\n        text={deleteInfo.text}\n        title={deleteInfo.title}\n        isOpen={showRemoveModal}\n        isChanged={isChanged}\n        isDefault={isPlatformDefault || isAdminDefault}\n        confirmButtonLabel={deleteInfo.confirmButtonLabel}\n        onClose={() => setShowRemoveModal(false)}\n        onSubmit={() => {\n          setShowRemoveModal(false);\n          confirmDelete();\n          setSelectedRoles([]);\n          onDefaultGroupChanged(isPlatformDefault && !isChanged);\n        }}\n      />\n\n      <Section type=\"content\" id={'tab-roles'}>\n        <TableToolbarViewOld\n          columns={columns}\n          isSelectable={hasPermissions.current && !isAdminDefault}\n          createRows={(...props) => createRows(uuid, ...props)}\n          data={roles}\n          filterValue={filterValue}\n          fetchData={(config) => {\n            fetchRolesForGroup(config)(fetchUuid);\n          }}\n          emptyFilters={{ name: '', description: '' }}\n          setFilterValue={({ name, description }) => {\n            typeof name !== 'undefined' && setFilterValue(name);\n            typeof description !== 'undefined' && setDescriptionValue(description);\n          }}\n          isLoading={isLoading}\n          pagination={pagination}\n          checkedRows={selectedRoles}\n          setCheckedItems={setCheckedItems}\n          titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n          titleSingular={intl.formatMessage(messages.role)}\n          toolbarButtons={toolbarButtons}\n          actionResolver={actionResolver}\n          routes={routes}\n          ouiaId=\"roles-table\"\n          emptyProps={{\n            title: intl.formatMessage(messages.noGroupRoles),\n            description: [intl.formatMessage(isAdminDefault ? messages.contactServiceTeamForRoles : messages.addRoleToConfigureAccess), ''],\n          }}\n          filters={[\n            { key: 'name', value: filterValue },\n            { key: 'description', value: descriptionValue },\n          ]}\n          tableId=\"group-roles\"\n        />\n      </Section>\n    </React.Fragment>\n  );\n};\n\nconst reloadWrapper = (event, callback) => {\n  event.payload.then(callback);\n  return event;\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, systemGroup } }) => {\n  const roles = selectedGroup.roles;\n\n  return {\n    roles,\n    pagination: selectedGroup.pagination || { ...defaultSettings, count: roles && roles.length },\n    isLoading: !selectedGroup.loaded,\n    name: selectedGroup.name,\n    isPlatformDefault: selectedGroup.platform_default,\n    isAdminDefault: selectedGroup.admin_default,\n    isChanged: !selectedGroup.system,\n    disableAddRoles: !(selectedGroup.addRoles.pagination && selectedGroup.addRoles.pagination.count > 0) || !!selectedGroup.admin_default,\n    systemGroupUuid: systemGroup?.uuid,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addRoles: (groupId, roles, callback) => dispatch(reloadWrapper(addRolesToGroup(groupId, roles), callback)),\n    removeRoles: (groupId, roles, callback) => dispatch(reloadWrapper(removeRolesFromGroup(groupId, roles), callback)),\n    fetchRolesForGroup: (config) => (groupId, options) => dispatch(fetchRolesForGroup(groupId, config, options)),\n    fetchAddRolesForGroup: (groupId) => dispatch(fetchAddRolesForGroup(groupId, {}, {})),\n    addNotification: (...props) => dispatch(addNotification(...props)),\n    reloadGroup: (apiProps) => dispatch(fetchGroup(apiProps)),\n    fetchSystemGroup: () => dispatch(fetchSystemGroup()),\n  };\n};\n\nGroupRoles.propTypes = {\n  history: PropTypes.shape({\n    goBack: PropTypes.func.isRequired,\n    push: PropTypes.func.isRequired,\n  }),\n  roles: PropTypes.array,\n  isLoading: PropTypes.bool,\n  searchFilter: PropTypes.string,\n  fetchRolesForGroup: PropTypes.func.isRequired,\n  fetchAddRolesForGroup: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  addRoles: PropTypes.func,\n  name: PropTypes.string,\n  removeRoles: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    count: PropTypes.number,\n  }),\n  match: PropTypes.shape({\n    params: PropTypes.object.isRequired,\n  }).isRequired,\n  isAdminDefault: PropTypes.bool,\n  isPlatformDefault: PropTypes.bool,\n  isChanged: PropTypes.bool,\n  onDefaultGroupChanged: PropTypes.func,\n  disableAddRoles: PropTypes.bool.isRequired,\n  addNotification: PropTypes.func,\n  reloadGroup: PropTypes.func,\n  systemGroupUuid: PropTypes.string,\n  fetchSystemGroup: PropTypes.func,\n};\n\nGroupRoles.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  selectedRoles: [],\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupRoles);\n","import React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Redirect, Link, useLocation, useHistory } from 'react-router-dom';\nimport { connect, shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport AppTabs from '../app-tabs/app-tabs';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport GroupPrincipals from './principal/principals';\nimport GroupRoles from './role/group-roles';\nimport { WarningModal } from '../common/warningModal';\nimport { fetchGroup, fetchGroups, fetchSystemGroup, removeGroups } from '../../redux/actions/group-actions';\nimport { ListLoader } from '../../presentational-components/shared/loader-placeholders';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Popover,\n  PopoverPosition,\n  Split,\n  SplitItem,\n  DropdownItem,\n  Dropdown,\n  KebabToggle,\n  Button,\n} from '@patternfly/react-core';\nimport pathnames from '../../utilities/pathnames';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport EmptyWithAction from '../../presentational-components/shared/empty-state';\nimport RbacBreadcrumbs from '../../presentational-components/shared/breadcrumbs';\nimport { BAD_UUID, getBackRoute } from '../../helpers/shared/helpers';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport './group.scss';\n\nconst Group = ({\n  match: {\n    params: { uuid },\n  },\n  group,\n  fetchGroup,\n  fetchSystemGroup,\n  removeGroups,\n  isFetching,\n  onDelete,\n}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const location = useLocation();\n  const isPlatformDefault = uuid === 'default-access';\n  const tabItems = [\n    { eventKey: 0, title: intl.formatMessage(messages.roles), name: `/groups/detail/${uuid}/roles` },\n    { eventKey: 1, title: intl.formatMessage(messages.members), name: `/groups/detail/${uuid}/members` },\n  ];\n\n  const { pagination, filters, groupExists, systemGroupUuid } = useSelector(\n    ({ groupReducer: { groups, error, systemGroup } }) => ({\n      pagination: groups.pagination || groups.meta,\n      filters: groups.filters,\n      groupExists: error !== BAD_UUID,\n      systemGroupUuid: systemGroup?.uuid,\n    }),\n    shallowEqual\n  );\n\n  const [isResetWarningVisible, setResetWarningVisible] = useState(false);\n  const [isDropdownOpen, setDropdownOpen] = useState(false);\n  const [showDefaultGroupChangedInfo, setShowDefaultGroupChangedInfo] = useState(false);\n\n  useEffect(() => {\n    fetchSystemGroup();\n    const currUuid = !isPlatformDefault ? uuid : systemGroupUuid;\n    fetchGroup(currUuid);\n    insights.chrome.appObjectId(currUuid);\n    return () => insights.chrome.appObjectId(undefined);\n  }, [uuid, systemGroupUuid]);\n\n  const breadcrumbsList = () => [\n    {\n      title: intl.formatMessage(messages.groups),\n      to: getBackRoute(pathnames.groups.path, pagination, filters),\n    },\n    groupExists\n      ? { title: isFetching ? undefined : group.name, isActive: true }\n      : { title: intl.formatMessage(messages.invalidGroup), isActive: true },\n  ];\n\n  const defaultGroupChangedIcon = (name) => (\n    <div style={{ display: 'inline-flex' }}>\n      {name}\n      <div className=\"pf-u-ml-sm\">\n        <Popover\n          aria-label=\"default-group-icon\"\n          bodyContent={\n            <FormattedMessage\n              {...messages.defaultAccessGroupNameChanged}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n        >\n          <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon\" />\n        </Popover>\n      </div>\n    </div>\n  );\n\n  const defaultGroupRestore = () => (\n    <div className=\"rbac-default-group-reset-btn\">\n      <Button variant=\"link\" onClick={() => setResetWarningVisible(true)}>\n        {intl.formatMessage(messages.restoreToDefault)}\n      </Button>\n      <Popover\n        aria-label=\"default-group-icon\"\n        position={PopoverPosition.bottomEnd}\n        bodyContent={\n          <FormattedMessage\n            {...messages.restoreDefaultAccessInfo}\n            values={{\n              b: (text) => <b>{text}</b>,\n            }}\n          />\n        }\n      >\n        <OutlinedQuestionCircleIcon className=\"rbac-default-group-info-icon pf-u-mt-sm\" />\n      </Popover>\n    </div>\n  );\n\n  const dropdownItems = [\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => setDropdownOpen(false)}\n          to={(location.pathname.includes('members') ? pathnames['group-detail-members-edit'] : pathnames['group-detail-roles-edit']).path.replace(\n            ':uuid',\n            isPlatformDefault ? 'default-access' : uuid\n          )}\n        >\n          {intl.formatMessage(messages.edit)}\n        </Link>\n      }\n      key=\"edit-group\"\n    />,\n    <DropdownItem\n      component={\n        <Link\n          onClick={() => onDelete(uuid)}\n          to={() =>\n            (location.pathname.includes('members') ? pathnames['group-detail-members-remove'] : pathnames['group-detail-roles-remove']).path.replace(\n              ':uuid',\n              uuid\n            )\n          }\n        >\n          {intl.formatMessage(messages.delete)}\n        </Link>\n      }\n      className=\"rbac-c-group__action\"\n      key=\"delete-group\"\n    />,\n  ];\n\n  const fetchUuid = isPlatformDefault ? systemGroupUuid : uuid;\n\n  return (\n    <Fragment>\n      {isResetWarningVisible && (\n        <WarningModal\n          type=\"group\"\n          isOpen={isResetWarningVisible}\n          customTitle={<div>{intl.formatMessage(messages.restoreDefaultAccessQuestion)}</div>}\n          customDescription={\n            <FormattedMessage\n              {...messages.restoreDefaultAccessDescription}\n              values={{\n                b: (text) => <b>{text}</b>,\n              }}\n            />\n          }\n          customPrimaryButtonTitle={intl.formatMessage(messages.continue)}\n          customSecondaryButtonTitle={intl.formatMessage(messages.cancel)}\n          onModalCancel={() => setResetWarningVisible(false)}\n          onConfirmCancel={() => {\n            removeGroups([systemGroupUuid]).then(() =>\n              fetchSystemGroup().then(() => {\n                setShowDefaultGroupChangedInfo(false);\n              })\n            );\n            setResetWarningVisible(false);\n            history.push('/groups/detail/default-access/roles');\n          }}\n        />\n      )}\n      {groupExists ? (\n        <Fragment>\n          <TopToolbar breadcrumbs={breadcrumbsList()}>\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <TopToolbarTitle\n                  title={\n                    !isFetching && group ? (\n                      <Fragment>{group.platform_default && !group.system ? defaultGroupChangedIcon(group.name) : group.name}</Fragment>\n                    ) : undefined\n                  }\n                  description={!isFetching && group ? group.description : undefined}\n                />\n              </SplitItem>\n              {group.platform_default && !group.system ? <SplitItem>{defaultGroupRestore()}</SplitItem> : null}\n              <SplitItem>\n                {group.platform_default || group.admin_default ? null : (\n                  <Dropdown\n                    ouiaId=\"group-title-actions-dropdown\"\n                    toggle={<KebabToggle onToggle={(isOpen) => setDropdownOpen(isOpen)} id=\"group-actions-dropdown\" />}\n                    isOpen={isDropdownOpen}\n                    isPlain\n                    position=\"right\"\n                    dropdownItems={dropdownItems}\n                  />\n                )}\n              </SplitItem>\n            </Split>\n            {showDefaultGroupChangedInfo ? (\n              <Alert\n                variant=\"info\"\n                isInline\n                title={intl.formatMessage(messages.defaultAccessGroupChanged)}\n                action={<AlertActionCloseButton onClose={() => setShowDefaultGroupChangedInfo(false)} />}\n                className=\"pf-u-mb-lg pf-u-mt-sm\"\n              >\n                <FormattedMessage\n                  {...messages.defaultAccessGroupNameChanged}\n                  values={{\n                    b: (text) => <b>{text}</b>,\n                  }}\n                />\n              </Alert>\n            ) : null}\n          </TopToolbar>\n          <AppTabs isHeader tabItems={tabItems} />\n          <Route\n            path={[pathnames['group-detail-roles-remove'].path, pathnames['group-detail-members-remove'].path]}\n            render={(props) => (\n              <RemoveGroup\n                {...props}\n                postMethod={() => {\n                  dispatch(fetchGroups({ ...pagination, offset: 0, filters, inModal: false }));\n                }}\n                cancelRoute={`group/detail/${uuid}`}\n                submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n                isModalOpen\n                groupsUuid={[group]}\n              />\n            )}\n          />\n          <Route\n            path={[pathnames['group-detail-roles-edit'].path, pathnames['group-detail-members-edit'].path]}\n            render={(props) => <EditGroup {...props} group={group} cancelRoute={`group/detail/${uuid}`} postMethod={() => fetchGroup(fetchUuid)} />}\n          />\n          <Route\n            path={pathnames['group-detail-roles'].path}\n            render={(props) => <GroupRoles {...props} onDefaultGroupChanged={setShowDefaultGroupChangedInfo} />}\n          />\n          <Route path={pathnames['group-detail-members'].path} component={GroupPrincipals} />\n          <Route render={() => <Redirect to={`/groups/detail/${uuid}/roles`} />} />\n          {!group && <ListLoader />}\n        </Fragment>\n      ) : (\n        <Fragment>\n          <section className=\"pf-c-page__main-breadcrumb pf-u-pb-md\">\n            <RbacBreadcrumbs {...breadcrumbsList()} />\n          </section>\n          <EmptyWithAction\n            title={intl.formatMessage(messages.groupNotFound)}\n            description={[intl.formatMessage(messages.groupDoesNotExist, { id: uuid })]}\n            actions={[\n              <Button\n                key=\"back-button\"\n                className=\"pf-u-mt-xl\"\n                ouiaId=\"back-button\"\n                variant=\"primary\"\n                aria-label=\"Back to previous page\"\n                onClick={() => history.goBack()}\n              >\n                {intl.formatMessage(messages.backToPreviousPage)}\n              </Button>,\n            ]}\n          />\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = ({ groupReducer: { selectedGroup, isRecordLoading, isRecordRolesLoading } }) => ({\n  group: selectedGroup,\n  isFetching: isRecordLoading || isRecordRolesLoading,\n});\n\nconst mapDispatchToProps = (dispatch) =>\n  bindActionCreators(\n    {\n      fetchGroup,\n      fetchSystemGroup,\n      removeGroups,\n    },\n    dispatch\n  );\n\nGroup.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }),\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }),\n  match: PropTypes.object,\n  group: PropTypes.shape({\n    uuid: PropTypes.string,\n    name: PropTypes.string,\n    description: PropTypes.string,\n    admin_default: PropTypes.bool,\n    platform_default: PropTypes.bool,\n    system: PropTypes.bool,\n  }),\n  isFetching: PropTypes.bool,\n  fetchGroup: PropTypes.func,\n  fetchSystemGroup: PropTypes.func,\n  removeGroups: PropTypes.func,\n  onDelete: PropTypes.func,\n  defaultUuid: PropTypes.string,\n};\n\nGroup.defaultProps = {\n  isFetching: false,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Group);\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst GroupRowWrapper = ({ className, row, ...props }) => {\n  return (\n    <RowWrapper\n      className={classnames(className, {\n        'rbac-c-group-default': row.isPlatformDefault || row.isAdminDefault,\n      })}\n      row={row}\n      {...props}\n    />\n  );\n};\n\nGroupRowWrapper.propTypes = {\n  row: PropTypes.shape({\n    isAdminDefault: PropTypes.bool,\n    isPlatformDefault: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n};\n\nexport default GroupRowWrapper;\n","import React, { Fragment, useContext, useEffect, useRef, useState } from 'react';\nimport { Link, Route, Switch, useHistory } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Button, Stack, StackItem } from '@patternfly/react-core';\nimport AddGroupWizard from './add-group/add-group-wizard';\nimport EditGroup from './edit-group-modal';\nimport RemoveGroup from './remove-group-modal';\nimport { shallowEqual, useSelector, useDispatch } from 'react-redux';\nimport { TableToolbarViewOld } from '../../presentational-components/shared/table-toolbar-view-old';\nimport { createRows } from './group-table-helpers';\nimport { fetchAdminGroup, fetchGroups, fetchSystemGroup } from '../../redux/actions/group-actions';\nimport Group from './group';\nimport { TopToolbar, TopToolbarTitle } from '../../presentational-components/shared/top-toolbar';\nimport Section from '@redhat-cloud-services/frontend-components/Section';\nimport Role from '../role/role';\nimport GroupRowWrapper from './group-row-wrapper';\nimport pathnames from '../../utilities/pathnames';\nimport './groups.scss';\nimport PageActionRoute from '../common/page-action-route';\nimport {\n  applyPaginationToUrl,\n  defaultAdminSettings,\n  defaultSettings,\n  isPaginationPresentInUrl,\n  syncDefaultPaginationWithUrl,\n} from '../../helpers/shared/pagination';\nimport { applyFiltersToUrl, areFiltersPresentInUrl, syncDefaultFiltersWithUrl } from '../../helpers/shared/filters';\nimport { getBackRoute } from '../../helpers/shared/helpers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../Messages';\nimport PermissionsContext from '../../utilities/permissions-context';\n\nconst Groups = () => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const fetchData = (options) => dispatch(fetchGroups({ ...options, inModal: false }));\n  const { orgAdmin, userAccessAdministrator } = useContext(PermissionsContext);\n  const isAdmin = orgAdmin || userAccessAdministrator;\n  const textFilterRef = useRef(null);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), key: 'name', transforms: [sortable] },\n    { title: intl.formatMessage(messages.roles) },\n    { title: intl.formatMessage(messages.members) },\n    { title: intl.formatMessage(messages.lastModified), key: 'modified', transforms: [sortable] },\n  ];\n\n  const { groups, meta, filters, isLoading, systemGroup } = useSelector(\n    ({ groupReducer: { groups, isLoading, adminGroup, systemGroup } }) => ({\n      groups: [\n        ...(adminGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [adminGroup] : []),\n        ...(systemGroup?.name?.match(new RegExp(groups.filters.name, 'i')) ? [systemGroup] : []),\n        ...(groups?.data?.filter(({ platform_default, admin_default } = {}) => !(platform_default || admin_default)) || []),\n      ],\n      meta: groups?.pagination || groups?.meta,\n      filters: groups?.filters,\n      isLoading,\n      systemGroup,\n    }),\n    shallowEqual\n  );\n\n  const [pagination, setPagination] = useState({ ...(orgAdmin ? defaultAdminSettings : defaultSettings), ...meta });\n  const [filterValue, setFilterValue] = useState(filters.name || '');\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [removeGroupsList, setRemoveGroupsList] = useState([]);\n\n  useEffect(() => {\n    const syncedPagination = syncDefaultPaginationWithUrl(history, pagination);\n    setPagination(syncedPagination);\n    const { name } = syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n    setFilterValue(name);\n    insights.chrome.appNavClick({ id: 'groups', secondaryNav: true });\n    fetchData({ ...syncedPagination, filters: { name } });\n    dispatch(fetchAdminGroup(name));\n    dispatch(fetchSystemGroup(name));\n  }, []);\n\n  useEffect(() => {\n    isPaginationPresentInUrl(history) || applyPaginationToUrl(history, pagination.limit, pagination.offset);\n    filterValue?.length > 0 && !areFiltersPresentInUrl(history, ['name']) && syncDefaultFiltersWithUrl(history, ['name'], { name: filterValue });\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRows((rows) =>\n      newSelection(rows)\n        .filter(({ platform_default: isPlatformDefault, admin_default: isAdminDefault }) => !(isPlatformDefault || isAdminDefault))\n        .map(({ uuid, name }) => ({ uuid, label: name }))\n    );\n  };\n\n  useEffect(() => {\n    pagination.redirected && applyPaginationToUrl(history, pagination.limit, pagination.offset);\n  }, [pagination.redirected]);\n\n  useEffect(() => {\n    setFilterValue(filters.name);\n    setPagination(meta);\n  }, [filters, meta]);\n\n  const routes = () => (\n    <Fragment>\n      <Route exact path={pathnames['add-group'].path}>\n        <AddGroupWizard\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n            setFilterValue('');\n          }}\n        />\n      </Route>\n      <Route exact path={pathnames['group-edit'].path}>\n        <EditGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(config) => {\n            fetchData(config);\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n        />\n      </Route>\n      <Route exact path={pathnames['remove-group'].path}>\n        <RemoveGroup\n          pagination={pagination}\n          filters={filters}\n          postMethod={(ids, config) => {\n            fetchData(config);\n            setSelectedRows(selectedRows.filter((row) => !ids.includes(row.uuid)));\n          }}\n          cancelRoute={getBackRoute(pathnames.groups.path, pagination, filters)}\n          submitRoute={getBackRoute(pathnames.groups.path, { ...pagination, offset: 0 }, filters)}\n          isModalOpen\n          groupsUuid={removeGroupsList}\n        />\n      </Route>\n    </Fragment>\n  );\n\n  const actionResolver = ({ isPlatformDefault, isAdminDefault }) =>\n    isPlatformDefault || isAdminDefault || !isAdmin\n      ? null\n      : [\n          {\n            title: intl.formatMessage(messages.edit),\n            onClick: (_event, _rowId, group) => {\n              history.push(`/groups/edit/${group.uuid}`);\n            },\n          },\n          {\n            title: intl.formatMessage(messages.delete),\n            onClick: (_event, _rowId, group) => {\n              setRemoveGroupsList([group]);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ];\n\n  // TODO check this later\n  const toolbarButtons = () => [\n    ...(isAdmin\n      ? [\n          <Link to={pathnames['add-group'].path} key=\"add-group\" className=\"rbac-m-hide-on-sm\">\n            <Button ouiaId=\"create-group-button\" variant=\"primary\" aria-label=\"Create group\">\n              {intl.formatMessage(messages.createGroup)}\n            </Button>\n          </Link>,\n          {\n            label: intl.formatMessage(messages.createGroup),\n            props: {\n              className: 'rbac-m-hide-on-md',\n            },\n            onClick: () => {\n              history.push(pathnames['add-group'].path);\n            },\n          },\n          {\n            label: intl.formatMessage(messages.edit),\n            props: {\n              isDisabled: !(selectedRows.length === 1),\n            },\n            onClick: () => history.push(`/groups/edit/${selectedRows[0].uuid}`),\n          },\n          {\n            label: intl.formatMessage(messages.delete),\n            props: {\n              isDisabled: !selectedRows.length > 0,\n            },\n            onClick: () => {\n              setRemoveGroupsList(selectedRows);\n              history.push(pathnames['remove-group'].path);\n            },\n          },\n        ]\n      : []),\n  ];\n\n  const renderGroupsList = () => (\n    <Stack className=\"rbac-c-groups\">\n      <StackItem>\n        <TopToolbar paddingBottom>\n          <TopToolbarTitle title={intl.formatMessage(messages.groups)} />\n        </TopToolbar>\n      </StackItem>\n      <StackItem>\n        <Section type=\"content\" id={'tab-groups'}>\n          <TableToolbarViewOld\n            data={groups.map((group) =>\n              group.platform_default || group.admin_default ? { ...group, principalCount: `All${group.admin_default ? ' org admins' : ''}` } : group\n            )}\n            createRows={(...args) => createRows(isAdmin, ...args)}\n            columns={columns}\n            isSelectable={isAdmin}\n            checkedRows={selectedRows}\n            setCheckedItems={setCheckedItems}\n            routes={routes}\n            actionResolver={actionResolver}\n            titlePlural={intl.formatMessage(messages.groups).toLowerCase()}\n            titleSingular={intl.formatMessage(messages.group).toLowerCase()}\n            ouiaId=\"groups-table\"\n            pagination={pagination}\n            filterValue={filterValue}\n            fetchData={(config) => {\n              const { name, count, limit, offset, orderBy } = config;\n              applyPaginationToUrl(history, limit, offset);\n              applyFiltersToUrl(history, { name });\n              return fetchData({ count, limit, offset, orderBy, filters: { name } });\n            }}\n            setFilterValue={({ name = '' }) => setFilterValue(name)}\n            toolbarButtons={toolbarButtons}\n            isLoading={!isLoading && groups?.length === 0 && filterValue?.length === 0 ? true : isLoading}\n            filterPlaceholder={intl.formatMessage(messages.name).toLowerCase()}\n            rowWrapper={GroupRowWrapper}\n            tableId=\"groups\"\n            textFilterRef={textFilterRef}\n          />\n        </Section>\n      </StackItem>\n    </Stack>\n  );\n  return (\n    <Switch>\n      <PageActionRoute pageAction=\"role-detail\" path={pathnames['group-detail-role-detail'].path} render={(props) => <Role {...props} />} />\n      <PageActionRoute\n        pageAction=\"group-detail\"\n        path={pathnames['group-detail'].path}\n        render={(props) => (\n          <Group\n            {...props}\n            defaultUuid={systemGroup?.uuid}\n            onDelete={(uuid) => {\n              setFilterValue('');\n              setSelectedRows(selectedRows.filter((row) => row.uuid != uuid));\n            }}\n          />\n        )}\n      />\n      <PageActionRoute pageAction=\"group-list\" path={pathnames.groups.path} render={() => renderGroupsList()} />\n    </Switch>\n  );\n};\n\nexport default Groups;\n"],"names":["OutlinedQuestionCircleIconConfig","name","height","width","svgPath","yOffset","xOffset","OutlinedQuestionCircleIcon","ActiveUser","linkDescription","linkTitle","intl","useIntl","env","insights","chrome","getEnvironment","prefix","isProd","useContext","PermissionsContext","orgAdmin","Text","className","component","TextVariants","formatMessage","messages","href","target","rel","propTypes","PropTypes","defaultProps","UsersRow","row","props","status","isActive","RowWrapper","classNames","data","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","useFormApi","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","isRequired","WizardError","title","text","jumpToStep","WizardContext","setWizardError","EmptyState","EmptyStateVariant","EmptyStateIcon","color","icon","ExclamationCircleIcon","Title","headingLevel","size","EmptyStateBody","undefined","number","UsersList","selectedUsers","setSelectedUsers","userLinks","inModal","history","useHistory","dispatch","useDispatch","innerRef","useRef","defaultPagination","useSelector","users","userReducer","limit","meta","pagination","defaultAdminSettings","defaultSettings","offset","count","redirected","map","uuid","username","isLoading","isUserDataLoading","stateFilters","filters","location","search","length","Object","keys","fetchData","useCallback","apiProps","fetchUsers","fetchUsersFilters","updateUsersFilters","rows","checkedRows","reduce","acc","is_active","email","firstName","first_name","lastName","last_name","isOrgAdmin","is_org_admin","cells","key","Link","to","toString","Label","selected","Boolean","find","createRows","columns","transforms","nowrap","sortable","useState","index","direction","sortByState","setSortByState","setFilters","useEffect","applyPaginationToUrl","syncDefaultPaginationWithUrl","newFilters","syncDefaultFiltersWithUrl","mappedProps","isPaginationPresentInUrl","values","some","filter","areFiltersPresentInUrl","isCompact","isSelectable","borders","sortBy","onSort","e","orderBy","ouiaId","config","prototype","hasOwnProperty","call","then","current","focus","applyFiltersToUrl","emptyFilters","setFilterValue","payload","setCheckedItems","newSelection","label","rowWrapper","titlePlural","toLowerCase","titleSingular","value","placeholder","items","tableId","goBack","push","searchFilter","i","asyncValidator","groupName","idKey","id","cache","createIntlCache","createIntl","locale","providerMessages","fetchGroups","nameMatch","console","response","item","debouncedAsyncValidator","asyncDebounce","ReviewTemplate","formFields","AddGroupWizardContext","getState","Bullseye","Spinner","groupNameValidated","groupNameError","groupDescriptionValidated","groupDescription","SetName","input","useFieldApi","description","setGroupName","setGroupNameError","setGroupDescription","processGroupName","onChange","Stack","hasGutter","StackItem","FormGroup","helperTextInvalid","validated","TextInput","onBlur","TextArea","change","resizeOrientation","groups","RolesList","selectedRoles","setSelectedRoles","rolesExcluded","textFilterRef","groupReducer","selectedGroup","addRoles","roles","loaded","groupId","roleReducer","shallowEqual","filterValue","fetchRoles","fetchAddRolesForGroup","fetchRolesWithPolicies","display_name","fetchTableData","curr","filterPlaceholder","canSort","defaultCompactSettings","SetRoles","TextContent","fieldId","SetUsers","Form","Card","SummaryContent","Grid","GridItem","md","role","createContext","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","schema","fields","isDynamic","showTitles","validate","validatorTypes","componentTypes","hideField","threshold","buttons","StepTemplate","schemaBuilder","cancelWarningVisible","setCancelWarningVisible","groupData","hideForm","wizardContextValue","setWizardContextValue","redirectToGroups","addNotification","dismissDelay","pathname","paths","createQueryParams","page","per_page","isOpen","onModalCancel","onConfirmCancel","Provider","prev","setWizardSuccess","setHideForm","subscription","componentMapper","onSubmit","user_list","user","roles_list","addGroup","initialValues","EditGroupModal","updateGroup","cancelRoute","submitRoute","group","onClose","setSelectedGroup","match","useRouteMatch","fetchGroup","params","validateOnMount","validatorMapper","skeleton","Skeleton","user_data","ModalFormTemplate","ModalProps","pathnames","inputValue","hash","connect","bindActionCreators","RemoveGroupModal","removeGroups","groupsUuid","isModalOpen","checked","setChecked","multipleGroups","Modal","ModalVariant","actions","uuids","b","Checkbox","isChecked","cancelUrl","DefaultPlatformPopover","bodyContent","isPopoverVisible","setPopoverVisible","popoverRootRef","ref","Popover","zIndex","position","isVisible","shouldClose","hideOnOutsideClick","appendTo","isAdmin","_opened","selectedRows","roleCount","principalCount","modified","isPlatformDefault","platform_default","isAdminDefault","admin_default","state","DateFormat","date","getDateFormat","AppTabs","tabItems","isHeader","activeTab","includes","Tabs","activeKey","eventKey","onSelect","_event","tabIndex","Tab","withRouter","AddGroupMembers","closeUrl","addMembersToGroup","fetchMembersForGroup","userList","selector","principals","members","removeModalText","plural","selectedPrincipals","setSelectedPrincipals","showRemoveModal","setShowRemoveModal","confirmDelete","setConfirmDelete","deleteInfo","setDeleteInfo","useParams","userAccessAdministrator","hasPermissions","usernames","options","removeMembers","userNames","removeMembersFromGroup","RemoveModal","confirmButtonLabel","Section","CardBody","routes","Route","path","render","args","actionResolver","_rowId","principal","toolbarButtons","multipleMembersSelected","removeText","emptyProps","DefaultGroupChange","withCheckbox","AddGroupRoles","addRolesToGroup","isDefault","isChanged","onDefaultGroupChanged","fetchRolesForGroup","fetchSystemGroup","fetchUuid","showConfirmModal","setShowConfirmModal","rolesList","RemoveRoles","groupUuid","expanded","generateOuiaID","addRoleButton","customTooltipText","addRoleButtonContent","isAriaDisabled","Tooltip","content","GroupRoles","removeRoles","systemGroupUuid","disableAddRoles","reloadGroup","descriptionValue","setDescriptionValue","selectedAddRoles","setSelectedAddRoles","removeRolesCallback","multipleRolesSelected","customId","reloadWrapper","event","callback","systemGroup","system","removeRolesFromGroup","Group","isFetching","onDelete","useLocation","groupExists","BAD_UUID","isResetWarningVisible","setResetWarningVisible","isDropdownOpen","setDropdownOpen","showDefaultGroupChangedInfo","setShowDefaultGroupChangedInfo","currUuid","appObjectId","breadcrumbsList","getBackRoute","dropdownItems","DropdownItem","replace","customTitle","customDescription","customPrimaryButtonTitle","customSecondaryButtonTitle","breadcrumbs","Split","SplitItem","isFilled","style","display","PopoverPosition","Dropdown","toggle","KebabToggle","onToggle","isPlain","Alert","isInline","action","AlertActionCloseButton","GroupPrincipals","Redirect","defaultUuid","isRecordLoading","isRecordRolesLoading","GroupRowWrapper","classnames","adminGroup","RegExp","setPagination","setSelectedRows","removeGroupsList","setRemoveGroupsList","syncedPagination","appNavClick","secondaryNav","fetchAdminGroup","exact","ids","Switch","pageAction","paddingBottom"],"sourceRoot":""}