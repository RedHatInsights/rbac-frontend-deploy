{"version":3,"file":"js/1298.a2f5495479fec4900c7b.js","mappings":"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","sources":["webpack:///./src/entries/MyUserAccess.js","webpack:///./src/helpers/shared/user-login.js","webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/utilities/constants.js","webpack:///./src/utilities/store.js","webpack:///./node_modules/react-redux/es/index.js"],"sourcesContent":["import React, { lazy, Suspense, useEffect } from 'react';\nimport { Route, Routes, useLocation } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { IntlProvider } from 'react-intl';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport registry, { RegistryContext } from '../utilities/store';\nimport messages from '../locales/data.json';\nimport ErroReducerCatcher from '../presentational-components/shared/ErrorReducerCatcher';\nimport PermissionsContext from '../utilities/permissions-context';\nimport pathnames from '../utilities/pathnames';\nimport { AppPlaceholder } from '../presentational-components/shared/loader-placeholders';\nimport useAppNavigate from '../hooks/useAppNavigate';\nimport useUserData from '../hooks/useUserData';\n\nconst MyUserAccess = lazy(() => import('../smart-components/myUserAccess/MUAHome'));\n\nimport '../App.scss';\n\nexport const locale = 'en';\n\nconst MuaApp = () => {\n  const chrome = useChrome();\n  const location = useLocation();\n  const navigate = useAppNavigate('/iam');\n  const userData = useUserData();\n\n  useEffect(() => {\n    if (location?.pathname?.match(/\\/(iam)$/)) {\n      navigate(pathnames['my-user-access'].link);\n    }\n    // set correct title\n\n    chrome.updateDocumentTitle('My User Access');\n  }, []);\n\n  return (\n    <PermissionsContext.Provider value={{ ...userData }}>\n      <ErroReducerCatcher>\n        <section style={{ marginLeft: 0, padding: 0 }}>\n          <Suspense fallback={<AppPlaceholder />}>\n            <Routes>\n              <Route path=\"/\" element={<MyUserAccess />} />\n            </Routes>\n          </Suspense>\n        </section>\n      </ErroReducerCatcher>\n    </PermissionsContext.Provider>\n  );\n};\n\nconst SettingsMua = () => (\n  <IntlProvider locale={locale} messages={messages[locale]}>\n    <RegistryContext.Provider\n      value={{\n        getRegistry: () => registry,\n      }}\n    >\n      <Provider store={registry.getStore()}>\n        <MuaApp />\n      </Provider>\n    </RegistryContext.Provider>\n  </IntlProvider>\n);\n\nexport default SettingsMua;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport axios from 'axios';\nimport {\n  authInterceptor,\n  responseDataInterceptor,\n  interceptor401,\n  interceptor500,\n  errorInterceptor,\n} from '@redhat-cloud-services/frontend-components-utilities/interceptors';\nimport { GroupApi, PrincipalApi, RoleApi, PolicyApi, AccessApi, PermissionApi } from '@redhat-cloud-services/rbac-client';\nimport { HostsApi } from '@redhat-cloud-services/host-inventory-client';\nimport { BaseAPI } from '@redhat-cloud-services/rbac-client/dist/base';\n\nimport { RBAC_API_BASE, COST_API_BASE, INVENTORY_API_BASE } from '../../utilities/constants';\nimport registry from '../../utilities/store';\nimport { API_ERROR } from '../../redux/action-types';\n\nconst interceptor403 = (error) => {\n  const store = registry.getStore();\n\n  if (error.response && error.response.status === 403) {\n    store.dispatch({ type: API_ERROR, payload: 403 });\n  }\n\n  throw error;\n};\n\nconst axiosInstance = axios.create();\naxiosInstance.interceptors.request.use(authInterceptor);\naxiosInstance.interceptors.response.use(responseDataInterceptor);\n\naxiosInstance.interceptors.response.use(null, interceptor401);\naxiosInstance.interceptors.response.use(null, interceptor403);\naxiosInstance.interceptors.response.use(null, interceptor500);\naxiosInstance.interceptors.response.use(null, errorInterceptor);\n\nconst principalApi = new PrincipalApi(undefined, RBAC_API_BASE, axiosInstance);\nconst groupApi = new GroupApi(undefined, RBAC_API_BASE, axiosInstance);\nconst roleApi = new RoleApi(undefined, RBAC_API_BASE, axiosInstance);\nconst policyApi = new PolicyApi(undefined, RBAC_API_BASE, axiosInstance);\nconst accessApi = new AccessApi(undefined, RBAC_API_BASE, axiosInstance);\nconst permissionApi = new PermissionApi(undefined, RBAC_API_BASE, axiosInstance);\nconst costApi = new BaseAPI(undefined, COST_API_BASE, axiosInstance);\nconst inventoryApi = new HostsApi(undefined, INVENTORY_API_BASE, axiosInstance);\n\nexport function getPrincipalApi() {\n  return principalApi;\n}\n\nexport function getGroupApi() {\n  return groupApi;\n}\n\nexport function getRoleApi() {\n  return roleApi;\n}\n\nexport function getPolicyApi() {\n  return policyApi;\n}\n\nexport function getAccessApi() {\n  return accessApi;\n}\n\nexport function getPermissionApi() {\n  return permissionApi;\n}\n\nexport function getAxiosInstance() {\n  return axiosInstance;\n}\n\nexport function getCostApi() {\n  return {\n    getResourceTypes: () => costApi.axios.get(`${COST_API_BASE}/resource-types/`),\n    getResource: (path) => costApi.axios.get(`${path}?limit=20000`),\n  };\n}\n\nexport const getInventoryGroupsApi = () => ({\n  getInventoryGroups: (config) =>\n    inventoryApi.axios.get(\n      `${INVENTORY_API_BASE}/resource-types/inventory-groups?per_page=${config?.limit ?? 50}&page=${config?.page ?? 1}${\n        config?.name ? `&name=${config?.name}` : ''\n      }`\n    ),\n});\n\nexport const getServiceAccountsApi = () => ({\n  getServiceAccounts: (page, perPage, token, sso) => {\n    const first = (page - 1) * perPage;\n    return axios.get(`${sso}/realms/redhat-external/apis/service_accounts/v1?first=${first}&max=${Math.min(perPage + 1, 100)}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  },\n});\n","import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","export const RBAC_API_BASE = `/api/rbac/v1`;\nexport const COST_API_BASE = `/api/cost-management/v1`;\nexport const INVENTORY_API_BASE = `/api/inventory/v1`;\n\nexport const DEFAULT_MUA_BUNDLE = 'rhel';\n\nexport const DEFAULT_ACCESS_GROUP_ID = 'default-access';\n","import { createContext } from 'react';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport ReducerRegistry, { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nimport reduxLogger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport userReducer, { usersInitialState } from '../redux/reducers/user-reducer';\nimport groupReducer, { groupsInitialState } from '../redux/reducers/group-reducer';\nimport policyReducer, { policiesInitialState } from '../redux/reducers/policy-reducer';\nimport roleReducer, { rolesInitialState } from '../redux/reducers/role-reducer';\nimport accessReducer, { accessInitialState } from '../redux/reducers/access-reducer';\nimport permissionReducer, { permissionInitialState } from '../redux/reducers/permission-reducer';\nimport costReducer, { costInitialState } from '../redux/reducers/cost-reducer';\nimport serviceAccountReducer, { serviceAccountsInitialState } from '../redux/reducers/service-account-reducer';\nimport errorReducer from '../redux/reducers/errorReducer';\nimport inventoryReducer, { inventoryGroupsInitialState } from '../redux/reducers/inventory-reducer';\n\nexport const RegistryContext = createContext({\n  getRegistry: () => {},\n});\n\nconst middlewares = [\n  thunk,\n  promiseMiddleware,\n  notificationsMiddleware({\n    errorTitleKey: ['statusText', 'message', 'errors[0].status'],\n    errorDescriptionKey: ['errors[0].detail', 'errors', 'stack'],\n  }),\n  reduxLogger,\n].filter((middleware) => typeof middleware === 'function');\n\nconst registry = new ReducerRegistry({}, middlewares);\n\nregistry.register({\n  userReducer: applyReducerHash(userReducer, usersInitialState),\n  groupReducer: applyReducerHash(groupReducer, groupsInitialState),\n  policyReducer: applyReducerHash(policyReducer, policiesInitialState),\n  roleReducer: applyReducerHash(roleReducer, rolesInitialState),\n  accessReducer: applyReducerHash(accessReducer, accessInitialState),\n  permissionReducer: applyReducerHash(permissionReducer, permissionInitialState),\n  inventoryReducer: applyReducerHash(inventoryReducer, inventoryGroupsInitialState),\n  costReducer: applyReducerHash(costReducer, costInitialState),\n  serviceAccountReducer: applyReducerHash(serviceAccountReducer, serviceAccountsInitialState),\n  errorReducer: applyReducerHash(errorReducer),\n  notifications: notificationsReducer,\n});\n\nexport default registry;\n","export * from './exports';\nimport { unstable_batchedUpdates as batch } from './utils/reactBatchedUpdates';\nimport { setBatch } from './utils/batch'; // Enable batched updates in our subscriptions for use\n// with standard React renderers (ReactDOM, React Native)\n\nsetBatch(batch);\nexport { batch };"],"names":["MyUserAccess","lazy","locale","MuaApp","chrome","useChrome","location","useLocation","navigate","useAppNavigate","userData","useUserData","useEffect","pathname","match","pathnames","updateDocumentTitle","value","style","marginLeft","padding","Suspense","fallback","Routes","Route","path","element","messages","getRegistry","registry","Provider","store","axiosInstance","axios","interceptors","request","use","authInterceptor","response","responseDataInterceptor","interceptor401","error","status","dispatch","type","API_ERROR","payload","interceptor500","errorInterceptor","principalApi","PrincipalApi","undefined","RBAC_API_BASE","groupApi","GroupApi","roleApi","RoleApi","accessApi","PolicyApi","AccessApi","permissionApi","PermissionApi","costApi","BaseAPI","COST_API_BASE","inventoryApi","HostsApi","INVENTORY_API_BASE","getPrincipalApi","getGroupApi","getRoleApi","getAccessApi","getPermissionApi","getCostApi","getResourceTypes","get","getResource","getInventoryGroupsApi","getInventoryGroups","config","limit","page","name","getServiceAccountsApi","getServiceAccounts","perPage","token","sso","first","Math","min","headers","Authorization","linkBasename","useNavigate","to","options","mergeToBasename","DEFAULT_MUA_BUNDLE","DEFAULT_ACCESS_GROUP_ID","RegistryContext","createContext","middlewares","thunk","promiseMiddleware","notificationsMiddleware","errorTitleKey","errorDescriptionKey","reduxLogger","filter","middleware","ReducerRegistry","register","userReducer","applyReducerHash","usersInitialState","groupReducer","groupsInitialState","policyReducer","policiesInitialState","roleReducer","rolesInitialState","accessReducer","accessInitialState","permissionReducer","permissionInitialState","inventoryReducer","inventoryGroupsInitialState","costReducer","costInitialState","serviceAccountReducer","serviceAccountsInitialState","errorReducer","notifications","notificationsReducer"],"sourceRoot":""}