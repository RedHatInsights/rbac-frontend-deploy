{"version":3,"file":"js/3465.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/helpers/shared/filters.js","webpack:///./src/hooks/useAppNavigate.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/common/review-step-buttons.js","webpack:///./src/smart-components/common/wizard-error.js","webpack:///./src/smart-components/group/add-group/review-template.js","webpack:///./src/smart-components/group/add-group/set-name.js","webpack:///./src/smart-components/group/add-group/set-roles.js","webpack:///./src/smart-components/group/add-group/set-users.js","webpack:///./src/smart-components/group/add-group/summary-content.js","webpack:///./src/smart-components/group/add-group/add-group-success.tsx","webpack:///./src/smart-components/group/add-group/add-group-wizard.js","webpack:///./src/smart-components/group/add-group/set-service-accounts.tsx","webpack:///./src/smart-components/group/add-group/schema.js","webpack:///./src/smart-components/group/add-group/roles-list.js","webpack:///./src/smart-components/group/add-group/service-accounts-list.tsx","webpack:///./src/redux/actions/service-account-actions.ts","webpack:///./src/smart-components/group/add-group/users-list-itless.js","webpack:///./src/smart-components/group/add-group/users-list.js","webpack:///./src/smart-components/group/validators.js","webpack:///./src/smart-components/user/user-table-helpers.tsx","webpack:///./src/utilities/async-debounce.ts"],"sourcesContent":["export const syncDefaultFiltersWithUrl = (location, navigate, keys, defaults = {}) => {\n  const searchParams = new URLSearchParams(location.search);\n\n  let filters = keys.reduce((acc, key) => {\n    const values = searchParams.getAll(key);\n    return {\n      ...acc,\n      [key]: values.length > 1 ? values : values[0],\n    };\n  }, {});\n\n  Object.keys(defaults).forEach((key) => {\n    const value = defaults[key];\n    filters = {\n      ...filters,\n      [key]: Array.isArray(filters[key])\n        ? [...new Set([...filters[key], ...(Array.isArray(value) ? value : [value])])]\n        : (value?.length > 0 && value) || filters[key],\n    };\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => searchParams.getAll(key).includes(item) || searchParams.append(key, item));\n    } else {\n      searchParams.get(key) || (value && searchParams.set(key, value));\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n  return filters;\n};\n\nexport const areFiltersPresentInUrl = (location, keys) => {\n  const searchParams = new URLSearchParams(location.search);\n  return keys.some((key) => searchParams.get(key));\n};\n\nexport const applyFiltersToUrl = (location, navigate, newValues) => {\n  const searchParams = new URLSearchParams(location.search);\n  Object.keys(newValues).forEach((key) => searchParams.delete(key));\n\n  Object.keys(newValues).forEach((key) => {\n    const value = newValues[key];\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => item && searchParams.append(key, item));\n    } else {\n      value && searchParams.set(key, value);\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n};\n","import { useNavigate } from 'react-router-dom';\nimport { mergeToBasename } from '../presentational-components/shared/AppLink';\n\nconst useAppNavigate = (linkBasename) => {\n  const navigate = useNavigate();\n\n  return (to, options) => {\n    return navigate(mergeToBasename(to, linkBasename), options);\n  };\n};\n\nexport default useAppNavigate;\n","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const env = chrome.getEnvironment();\n  const prefix = chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  const isITLess = useFlag('platform.rbac.itless');\n  return !isITLess && orgAdmin ? (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import { Button } from '@patternfly/react-core';\nimport React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\n\nconst selectNext = (nextStep, getState) =>\n  ({\n    string: nextStep,\n    function: nextStep({ values: getState().values }),\n  }?.[typeof nextStep] || nextStep.stepMapper?.[get(getState().values, nextStep.when)]);\n\nconst NextButton = ({ nextStep, valid, handleNext, nextLabel, getState, handleSubmit, submitLabel }) => (\n  <Button\n    variant=\"primary\"\n    type=\"button\"\n    isDisabled={!valid || getState().validating}\n    onClick={() => (nextStep ? handleNext(selectNext(nextStep, getState)) : handleSubmit())}\n  >\n    {nextStep ? nextLabel : submitLabel}\n  </Button>\n);\n\nNextButton.propTypes = {\n  nextStep: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),\n  handleSubmit: PropTypes.func.isRequired,\n  submitLabel: PropTypes.node.isRequired,\n  valid: PropTypes.bool,\n  handleNext: PropTypes.func.isRequired,\n  nextLabel: PropTypes.node.isRequired,\n  getState: PropTypes.func.isRequired,\n};\n\nconst ReviewStepButtons = ({ renderNextButton, disableBack, handlePrev, buttonLabels: { cancel, back }, context }) => {\n  const formOptions = useFormApi();\n  const { success, error, submitting } = useContext(context);\n  if (success || typeof error === 'undefined' || error || submitting) {\n    return null;\n  }\n\n  return (\n    <Fragment>\n      {renderNextButton()}\n      <Button type=\"button\" variant=\"secondary\" isDisabled={disableBack} onClick={handlePrev}>\n        {back}\n      </Button>\n      <Button type=\"button\" variant=\"link\" onClick={formOptions.onCancel}>\n        {cancel}\n      </Button>\n    </Fragment>\n  );\n};\n\nReviewStepButtons.propTypes = {\n  disableBack: PropTypes.bool,\n  handlePrev: PropTypes.func.isRequired,\n  handleNext: PropTypes.func.isRequired,\n  nextStep: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      when: PropTypes.string.isRequired,\n      stepMapper: PropTypes.object.isRequired,\n    }),\n    PropTypes.func,\n  ]),\n  buttonLabels: PropTypes.shape({\n    submit: PropTypes.node.isRequired,\n    cancel: PropTypes.node.isRequired,\n    back: PropTypes.node.isRequired,\n    next: PropTypes.node.isRequired,\n  }).isRequired,\n  context: PropTypes.object.isRequired,\n  renderNextButton: PropTypes.func,\n};\n\nexport default ReviewStepButtons;\n","import React, { useContext } from 'react';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport WizardContext from '@data-driven-forms/react-form-renderer/wizard-context';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport messages from '../../Messages';\nimport { ErrorState } from '@patternfly/react-component-groups';\n\nconst WizardError = ({ context, title, text, customFooter }) => {\n  const intl = useIntl();\n  const { jumpToStep } = useContext(WizardContext);\n  const { setWizardError } = useContext(context);\n  return (\n    <ErrorState\n      errorTitle={title}\n      errorDescription={text}\n      customFooter={\n        customFooter || (\n          <Button\n            onClick={() => {\n              setWizardError(undefined);\n              jumpToStep(0);\n            }}\n            variant={ButtonVariant.primary}\n          >\n            {intl.formatMessage(messages.returnToStepNumber, { number: 1 })}\n          </Button>\n        )\n      }\n    />\n  );\n};\n\nWizardError.propTypes = {\n  context: PropTypes.object.isRequired,\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  customFooter: PropTypes.element,\n};\n\nexport default WizardError;\n","import React, { useContext, useEffect } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  EmptyState,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Progress,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { asyncValidator } from '../validators';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport WizardError from '../../common/wizard-error';\nimport pathnames from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\nimport './review-step.scss';\n\nconst ReviewTemplate = ({ formFields }) => {\n  const intl = useIntl();\n  const navigate = useAppNavigate();\n  const { submittingGroup, submittingServiceAccounts, error, setWizardError } = useContext(AddGroupWizardContext);\n  const { getState } = useFormApi();\n  useEffect(() => {\n    setWizardError(undefined);\n    asyncValidator(getState().values['group-name'])\n      .then(() => setWizardError(false))\n      .catch(() => setWizardError(true));\n  }, []);\n\n  if (typeof error === 'undefined' || (submittingGroup && !submittingServiceAccounts)) {\n    return (\n      <Bullseye>\n        <Spinner className=\"pf-v5-u-mt-xl\" size=\"xl\" />\n      </Bullseye>\n    );\n  }\n\n  if (submittingServiceAccounts && !error) {\n    const value = submittingGroup ? 1 : submittingServiceAccounts ? 2 : 3;\n    return (\n      <EmptyState variant={EmptyStateVariant.lg} data-component-ouia-id=\"wizard-progress\" className=\"rbac-add-group-progress\">\n        <EmptyStateHeader\n          titleText={intl.formatMessage(messages.groupBeingCreated)}\n          icon={<EmptyStateIcon className=\"pf-v5-u-mt-xl\" icon={InProgressIcon} />}\n          headingLevel=\"h4\"\n        />\n        <Progress\n          className=\"pf-v5-u-mt-lg\"\n          style={{ textAlign: 'left' }}\n          min={0}\n          max={3}\n          value={value}\n          label={`${submittingGroup ? 1 : 2} of 2`}\n          title={intl.formatMessage(submittingGroup ? messages.creatingGroup : messages.associatingServiceAccounts)}\n        />\n      </EmptyState>\n    );\n  }\n\n  return error ? (\n    <WizardError\n      context={AddGroupWizardContext}\n      title={\n        submittingGroup\n          ? intl.formatMessage(messages.groupNameTakenTitle)\n          : intl.formatMessage(messages.addGroupServiceAccountsErrorTitle, { count: getState().values['service-accounts-list'].length })\n      }\n      text={\n        submittingGroup\n          ? intl.formatMessage(messages.groupNameTakenText)\n          : intl.formatMessage(messages.addNewGroupServiceAccountsErrorDescription, { count: getState().values['service-accounts-list'].length })\n      }\n      customFooter={\n        submittingGroup ? undefined : (\n          <Button variant={ButtonVariant.primary} onClick={() => navigate(pathnames.groups.link)}>\n            {intl.formatMessage(messages.close)}\n          </Button>\n        )\n      }\n    />\n  ) : (\n    <React.Fragment>\n      <Title headingLevel=\"h1\" size=\"xl\" className=\"pf-v5-u-mb-lg\">\n        {intl.formatMessage(messages.reviewDetails)}\n      </Title>\n      {[[{ ...formFields?.[0]?.[0] }]]}\n    </React.Fragment>\n  );\n};\n\nReviewTemplate.propTypes = {\n  formFields: PropTypes.array,\n};\n\nexport default ReviewTemplate;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { FormHelperText, HelperText, HelperTextItem, Stack, StackItem } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { TextInput } from '@patternfly/react-core';\nimport { TextArea } from '@patternfly/react-core';\nimport { FormGroup } from '@patternfly/react-core';\nimport { debouncedAsyncValidator } from '../validators';\nimport { trimAll } from '../../../helpers/shared/helpers';\nimport messages from '../../../Messages';\n\nconst groupNameValidated = (groupName, groupNameError) =>\n  groupName === undefined || groupNameError || groupName?.length > 150 ? 'error' : 'default';\nconst groupDescriptionValidated = (groupDescription) => (groupDescription?.length > 150 ? 'error' : 'default');\n\nconst SetName = (props) => {\n  const intl = useIntl();\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n  const { 'group-name': name, 'group-description': description } = formOptions.getState().values;\n  const [groupName, setGroupName] = useState(name || '');\n  const [groupNameError, setGroupNameError] = useState();\n  const [groupDescription, setGroupDescription] = useState(description);\n\n  const processGroupName = (value) => {\n    const trimmedValue = trimAll(value);\n    input.onChange(undefined);\n    debouncedAsyncValidator(trimmedValue)\n      .then(() => {\n        input.onChange(trimmedValue);\n        setGroupNameError(undefined);\n      })\n      .catch((error) => {\n        setGroupNameError(error);\n        input.onChange(undefined);\n      });\n    setGroupName(value);\n  };\n\n  useEffect(() => {\n    groupName?.length > 0 && processGroupName(groupName);\n  }, []);\n\n  const groupNameValid = groupNameValidated(groupName, groupNameError);\n  const groupDescriptionValid = groupDescriptionValidated(groupDescription);\n  return (\n    <Stack hasGutter>\n      <StackItem className=\"rbac-l-stack__item-summary\">\n        <FormGroup label={intl.formatMessage(messages.groupName)} isRequired>\n          <TextInput\n            value={groupName}\n            type=\"text\"\n            validated={groupNameValid}\n            onBlur={() => groupName === '' && setGroupName(undefined)}\n            onChange={(_event, value) => processGroupName(value)}\n            aria-label=\"Group name\"\n          />\n          {groupNameValid === 'error' && (\n            <FormHelperText>\n              <HelperText>\n                <HelperTextItem variant={groupNameValid}>{groupName ? groupNameError : intl.formatMessage(messages.required)}</HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n      </StackItem>\n      <StackItem>\n        <FormGroup label={intl.formatMessage(messages.groupDescription)}>\n          <TextArea\n            value={groupDescription}\n            validated={groupDescriptionValid}\n            onChange={(_event, value) => {\n              setGroupDescription(value);\n              formOptions.change('group-description', value);\n            }}\n            aria-label=\"Group description\"\n            resizeOrientation=\"vertical\"\n          />\n          {groupDescriptionValid === 'error' && (\n            <FormHelperText>\n              <HelperText variant={groupDescriptionValid}>\n                <HelperTextItem>{intl.formatMessage(messages.maxCharactersWarning, { number: 150 })}</HelperTextItem>\n              </HelperText>\n            </FormHelperText>\n          )}\n        </FormGroup>\n      </StackItem>\n    </Stack>\n  );\n};\n\nSetName.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SetName;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { FormGroup, Stack, StackItem, Text, TextContent } from '@patternfly/react-core';\nimport RolesList from './roles-list';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetRoles = (props) => {\n  const intl = useIntl();\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const { input } = useFieldApi(props);\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedRoles(formOptions.getState().values['roles-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedRoles);\n    formOptions.change('roles-list', selectedRoles);\n  }, [selectedRoles]);\n\n  return (\n    <Fragment>\n      <Stack hasGutter>\n        <StackItem>\n          <TextContent>\n            <Text>{intl.formatMessage(messages.selectRolesForGroupText)}</Text>\n          </TextContent>\n        </StackItem>\n        <StackItem>\n          <FormGroup fieldId=\"select-role\">\n            <RolesList selectedRoles={selectedRoles} setSelectedRoles={setSelectedRoles} rolesExcluded={false} />\n          </FormGroup>\n        </StackItem>\n      </Stack>\n    </Fragment>\n  );\n};\n\nSetRoles.propTypes = {\n  selectedRoles: PropTypes.array,\n  setSelectedRoles: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetRoles;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useFlag } from '@unleash/proxy-client-react';\nimport { Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport UsersList from './users-list';\nimport UsersListItless from './users-list-itless';\nimport ActiveUser from '../../../presentational-components/shared/ActiveUsers';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport '../../../App.scss';\n\nconst SetUsers = (props) => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const { input } = useFieldApi(props);\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const isITLess = useFlag('platform.rbac.itless');\n\n  useEffect(() => {\n    setSelectedUsers(formOptions.getState().values['users-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedUsers);\n    formOptions.change('users-list', selectedUsers);\n  }, [selectedUsers]);\n\n  const activeUserProps = {\n    ...(!isITLess && { linkDescription: intl.formatMessage(messages.toManageUsersText) }),\n  };\n\n  const usersListProps = {\n    selectedUsers,\n    setSelectedUsers,\n    displayNarrow: true,\n  };\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <ActiveUser {...activeUserProps} />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-user\">{isITLess ? <UsersListItless {...usersListProps} /> : <UsersList {...usersListProps} />}</FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nSetUsers.propTypes = {\n  selectedUsers: PropTypes.array,\n  setSelectedUsers: PropTypes.func,\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nexport default SetUsers;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, GridItem, Stack, StackItem, Text, TextVariants } from '@patternfly/react-core';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst SummaryContent = () => {\n  const intl = useIntl();\n  const formOptions = useFormApi();\n  const { isBeta } = useChrome();\n  const {\n    'group-name': name,\n    'group-description': description,\n    'users-list': selectedUsers,\n    'roles-list': selectedRoles,\n    'service-accounts-list': selectedServiceAccounts,\n  } = formOptions.getState().values;\n  const enableServiceAccounts =\n    (isBeta() && useFlag('platform.rbac.group-service-accounts')) || (!isBeta() && useFlag('platform.rbac.group-service-accounts.stable'));\n\n  return (\n    <div className=\"rbac\">\n      <Stack hasGutter>\n        <StackItem>\n          <Stack hasGutter>\n            <StackItem className=\"rbac-l-stack__item-summary\">\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupName)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{name}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.groupDescription)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  <Text component={TextVariants.p}>{description}</Text>\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.roles)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  {selectedRoles.map((role, index) => (\n                    <Text className=\"pf-v5-u-mb-0\" key={index}>\n                      {role.label}\n                    </Text>\n                  ))}\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.members)}\n                  </Text>\n                </GridItem>\n                <GridItem md={9}>\n                  {selectedUsers.map((role, index) => (\n                    <Text className=\"pf-v5-u-mb-0\" key={index}>\n                      {role.label}\n                    </Text>\n                  ))}\n                </GridItem>\n              </Grid>\n              <Grid>\n                <GridItem md={3}>\n                  <Text component={TextVariants.h4} className=\"rbac-bold-text\">\n                    {intl.formatMessage(messages.serviceAccounts)}\n                  </Text>\n                </GridItem>\n                {enableServiceAccounts && (\n                  <GridItem md={9}>\n                    {selectedServiceAccounts?.map((account, index) => (\n                      <Text className=\"pf-v5-u-mb-0\" key={index}>\n                        {account.name}\n                      </Text>\n                    ))}\n                  </GridItem>\n                )}\n              </Grid>\n            </StackItem>\n          </Stack>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nSummaryContent.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  groups: PropTypes.array,\n};\n\nexport default SummaryContent;\n","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Button, EmptyState, EmptyStateVariant, EmptyStateIcon, EmptyStateActions, EmptyStateHeader, EmptyStateFooter } from '@patternfly/react-core';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport messages from '../../../Messages';\n\ninterface AddGroupSuccessProps {\n  onClose: () => void;\n}\n\nconst AddGroupSuccess = ({ onClose }: AddGroupSuccessProps) => {\n  const intl = useIntl();\n  const { setHideForm, setWizardSuccess } = useContext(AddGroupWizardContext);\n\n  return (\n    <EmptyState variant={EmptyStateVariant.lg}>\n      <EmptyStateHeader\n        titleText={<>{intl.formatMessage(messages.groupCreatedSuccessfully)}</>}\n        icon={<EmptyStateIcon className=\"pf-v5-u-mt-xl\" color=\"green\" icon={CheckCircleIcon} />}\n        headingLevel=\"h4\"\n      />\n      <EmptyStateFooter>\n        <Button onClick={onClose} variant=\"primary\">\n          {intl.formatMessage(messages.exit)}\n        </Button>\n        <EmptyStateActions>\n          <Button\n            onClick={() => {\n              setHideForm(false);\n              setWizardSuccess(false);\n            }}\n            variant=\"link\"\n          >\n            {intl.formatMessage(messages.createAnotherGroup)}\n          </Button>\n        </EmptyStateActions>\n      </EmptyStateFooter>\n    </EmptyState>\n  );\n};\n\nexport default AddGroupSuccess;\n","import React, { useState, createContext, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport { Wizard } from '@patternfly/react-core/deprecated';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport FormRenderer from '@data-driven-forms/react-form-renderer/form-renderer';\nimport Pf4FormTemplate from '@data-driven-forms/pf4-component-mapper/form-template';\nimport componentMapper from '@data-driven-forms/pf4-component-mapper/component-mapper';\nimport WarningModal from '@patternfly/react-component-groups/dist/dynamic/WarningModal';\nimport { schemaBuilder } from './schema';\nimport { addGroup, addServiceAccountsToGroup } from '../../../redux/actions/group-actions';\nimport { createQueryParams } from '../../../helpers/shared/helpers';\nimport SetName from './set-name';\nimport SetRoles from './set-roles';\nimport SetUsers from './set-users';\nimport SetServiceAccounts from './set-service-accounts';\nimport SummaryContent from './summary-content';\nimport AddGroupSuccess from './add-group-success';\nimport useAppNavigate from '../../../hooks/useAppNavigate';\nimport paths from '../../../utilities/pathnames';\nimport messages from '../../../Messages';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nexport const AddGroupWizardContext = createContext({\n  success: false,\n  submitting: false,\n  error: undefined,\n  // eslint-disable-next-line no-unused-vars\n  setHideForm: (newValue) => null,\n  // eslint-disable-next-line no-unused-vars\n  setWizardSuccess: (newValue) => null,\n});\n\nconst FormTemplate = (props) => <Pf4FormTemplate {...props} showFormControls={false} />;\n\nconst Description = ({ Content, ...rest }) => <Content {...rest} />;\nDescription.propTypes = {\n  Content: PropTypes.elementType.isRequired,\n};\n\nexport const mapperExtension = {\n  description: Description,\n  'set-name': SetName,\n  'set-roles': SetRoles,\n  'set-users': SetUsers,\n  'set-service-accounts': SetServiceAccounts,\n  'summary-content': SummaryContent,\n};\n\nexport const onCancel = (emptyCallback, nonEmptyCallback, setGroupData) => (formData) => {\n  setGroupData(formData);\n  if (Object.keys(formData).length > 0) {\n    nonEmptyCallback(true);\n  } else {\n    emptyCallback();\n  }\n};\n\nconst AddGroupWizard = ({ postMethod, pagination, filters, orderBy }) => {\n  const dispatch = useDispatch();\n  const intl = useIntl();\n  const container = useRef(document.createElement('div'));\n  const { isBeta } = useChrome();\n  const enableServiceAccounts =\n    (isBeta() && useFlag('platform.rbac.group-service-accounts')) || (!isBeta() && useFlag('platform.rbac.group-service-accounts.stable'));\n  const schema = useRef(schemaBuilder(container.current, enableServiceAccounts));\n  const navigate = useAppNavigate();\n  const [groupData, setGroupData] = useState({});\n  const [wizardContextValue, setWizardContextValue] = useState({\n    success: false,\n    submitting: false,\n    error: undefined,\n    hideForm: false,\n  });\n\n  const redirectToGroups = () => {\n    dispatch(\n      addNotification({\n        variant: 'warning',\n        title: intl.formatMessage(messages.addingGroupTitle),\n        dismissDelay: 8000,\n        description: intl.formatMessage(messages.addingGroupCanceledDescription),\n      })\n    );\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit, ...filters }),\n    });\n  };\n\n  const setWizardError = (error) => setWizardContextValue((prev) => ({ ...prev, error }));\n  const setWizardCanceled = (canceled) => setWizardContextValue((prev) => ({ ...prev, canceled }));\n  const setWizardSuccess = (success) => setWizardContextValue((prev) => ({ ...prev, success }));\n  const setHideForm = (hideForm) => setWizardContextValue((prev) => ({ ...prev, hideForm }));\n\n  const onSubmit = (formData) => {\n    const serviceAccountsAdded = formData['service-accounts-list']?.length > 0;\n    setWizardContextValue((prev) => ({ ...prev, submitting: true, submittingGroup: true, submittingServiceAccounts: serviceAccountsAdded }));\n    const groupData = {\n      name: formData['group-name'],\n      description: formData['group-description'],\n      user_list: formData['users-list'].map((user) => ({ username: user.label })),\n      roles_list: formData['roles-list'].map((role) => role.uuid),\n    };\n    dispatch(addGroup(groupData)).then(({ value }) => {\n      setWizardContextValue((prev) => ({\n        ...prev,\n        submittingGroup: false,\n        success: !serviceAccountsAdded,\n        hideForm: !serviceAccountsAdded,\n        submitting: serviceAccountsAdded,\n      }));\n      serviceAccountsAdded &&\n        dispatch(addServiceAccountsToGroup(value.uuid, formData['service-accounts-list']))\n          .then(() => {\n            setWizardContextValue((prev) => ({ ...prev, submitting: false, submittingServiceAccounts: false, success: true, hideForm: true }));\n          })\n          .catch(() => setWizardError(true));\n    });\n  };\n\n  const onClose = () => {\n    setWizardContextValue((prev) => ({ ...prev, success: false, hideForm: false }));\n    postMethod({ limit: pagination.limit, offset: 0, orderBy, filters: {} });\n    navigate({\n      pathname: paths.groups.link,\n      search: createQueryParams({ page: 1, per_page: pagination.limit }),\n    });\n  };\n\n  return (\n    <AddGroupWizardContext.Provider value={{ ...wizardContextValue, setWizardError, setWizardSuccess, setHideForm }}>\n      <WarningModal\n        title={intl.formatMessage(messages.exitItemCreation, { item: intl.formatMessage(messages.group).toLocaleLowerCase() })}\n        isOpen={wizardContextValue.canceled}\n        onClose={() => {\n          container.current.hidden = false;\n          setWizardCanceled(false);\n        }}\n        confirmButtonLabel={intl.formatMessage(messages.discard)}\n        onConfirm={redirectToGroups}\n      >\n        {intl.formatMessage(messages.discardedInputsWarning)}\n      </WarningModal>\n      {wizardContextValue.hideForm ? (\n        wizardContextValue.success ? (\n          <Wizard\n            isOpen\n            title={intl.formatMessage(messages.createGroup)}\n            onClose={onClose}\n            steps={[\n              {\n                name: 'success',\n                component: <AddGroupSuccess onClose={onClose} />,\n                isFinishedStep: true,\n              },\n            ]}\n          />\n        ) : null\n      ) : (\n        <FormRenderer\n          schema={schema.current}\n          container={container}\n          subscription={{ values: true }}\n          FormTemplate={FormTemplate}\n          componentMapper={{ ...componentMapper, ...mapperExtension }}\n          onSubmit={onSubmit}\n          initialValues={groupData}\n          onCancel={onCancel(\n            redirectToGroups,\n            () => {\n              container.current.hidden = true;\n              setWizardCanceled(true);\n            },\n            setGroupData\n          )}\n        />\n      )}\n    </AddGroupWizardContext.Provider>\n  );\n};\n\nAddGroupWizard.propTypes = {\n  postMethod: PropTypes.func,\n  pagination: PropTypes.shape({\n    limit: PropTypes.number.isRequired,\n  }).isRequired,\n  filters: PropTypes.object.isRequired,\n  orderBy: PropTypes.string,\n};\n\nexport default AddGroupWizard;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { Alert, Form, FormGroup, Stack, StackItem, TextContent } from '@patternfly/react-core';\nimport useFieldApi from '@data-driven-forms/react-form-renderer/use-field-api';\nimport useFormApi from '@data-driven-forms/react-form-renderer/use-form-api';\nimport { useIntl } from 'react-intl';\nimport messages from '../../../Messages';\nimport AppLink from '../../../presentational-components/shared/AppLink';\nimport ServiceAccountsList from './service-accounts-list';\nimport { ServiceAccount } from '../../../helpers/service-account/service-account-helper';\n\ninterface SetServiceAccountProps {\n  name: string;\n}\n\nconst SetServiceAccounts: React.FunctionComponent<SetServiceAccountProps> = ({ name }) => {\n  const [selectedAccounts, setSelectedAccounts] = useState<ServiceAccount[]>([]);\n\n  const { input } = useFieldApi({ name });\n  const intl = useIntl();\n  const formOptions = useFormApi();\n\n  useEffect(() => {\n    setSelectedAccounts(formOptions.getState().values['service-accounts-list'] || []);\n  }, []);\n\n  useEffect(() => {\n    input.onChange(selectedAccounts);\n    formOptions.change('service-accounts-list', selectedAccounts);\n  }, [selectedAccounts]);\n\n  return (\n    <Fragment>\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              {intl.formatMessage(messages.addServiceAccountsToGroupDescription)}\n              <Alert\n                className=\"pf-v5-u-mt-sm rbac-service-accounts-alert\"\n                variant=\"info\"\n                component=\"span\"\n                isInline\n                isPlain\n                title={intl.formatMessage(messages.visitServiceAccountsPage, {\n                  link: (\n                    <AppLink to=\"/service-accounts\" linkBasename=\"/iam\">\n                      {intl.formatMessage(messages.serviceAccountsPage)}\n                    </AppLink>\n                  ),\n                })}\n              />\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <FormGroup fieldId=\"select-service-accounts\">\n              <ServiceAccountsList selected={selectedAccounts} setSelected={setSelectedAccounts} />\n            </FormGroup>\n          </StackItem>\n        </Stack>\n      </Form>\n    </Fragment>\n  );\n};\n\nexport default SetServiceAccounts;\n","import React from 'react';\nimport validatorTypes from '@data-driven-forms/react-form-renderer/validator-types';\nimport componentTypes from '@data-driven-forms/react-form-renderer/component-types';\nimport ReviewTemplate from './review-template';\nimport ReviewStepButtons from '../../common/review-step-buttons';\nimport { AddGroupWizardContext } from './add-group-wizard';\nimport { locale } from '../../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../../Messages';\nimport providerMessages from '../../../locales/data.json';\n\nexport const schemaBuilder = (container, enableServiceAccounts) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  return {\n    fields: [\n      {\n        component: 'wizard',\n        name: 'wizard',\n        className: 'rbac',\n        isDynamic: true,\n        inModal: true,\n        showTitles: true,\n        title: intl.formatMessage(messages.createGroup),\n        container,\n        fields: [\n          {\n            name: 'name-and-description',\n            nextStep: 'add-roles',\n            title: intl.formatMessage(messages.nameAndDescription),\n            fields: [\n              {\n                component: 'set-name',\n                name: 'group-name',\n                validate: [\n                  {\n                    type: validatorTypes.REQUIRED,\n                  },\n                ],\n              },\n              {\n                component: componentTypes.TEXTAREA,\n                name: 'group-description',\n                hideField: true,\n                validate: [\n                  {\n                    type: validatorTypes.MAX_LENGTH,\n                    threshold: 150,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            name: 'add-roles',\n            nextStep: 'add-users',\n            title: intl.formatMessage(messages.addRoles),\n            fields: [\n              {\n                component: 'set-roles',\n                name: 'roles-list',\n              },\n            ],\n          },\n          {\n            name: 'add-users',\n            nextStep: enableServiceAccounts ? 'add-service-accounts' : 'review',\n            title: intl.formatMessage(messages.addMembers),\n            fields: [\n              {\n                component: 'set-users',\n                name: 'users-list',\n              },\n            ],\n          },\n          ...(enableServiceAccounts\n            ? [\n                {\n                  name: 'add-service-accounts',\n                  nextStep: 'review',\n                  title: intl.formatMessage(messages.addServiceAccounts),\n                  fields: [\n                    {\n                      component: 'set-service-accounts',\n                      name: 'service-accounts-list',\n                    },\n                  ],\n                },\n              ]\n            : []),\n          {\n            name: 'review',\n            title: intl.formatMessage(messages.reviewDetails),\n            // eslint-disable-next-line react/display-name\n            buttons: (props) => <ReviewStepButtons {...props} context={AddGroupWizardContext} />,\n            StepTemplate: ReviewTemplate,\n            fields: [\n              {\n                component: 'summary-content',\n                name: 'summary-content',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n};\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport { sortable } from '@patternfly/react-table';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { defaultCompactSettings } from '../../../helpers/shared/pagination';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchRolesWithPolicies } from '../../../redux/actions/role-actions';\nimport { fetchAddRolesForGroup } from '../../../redux/actions/group-actions';\nimport messages from '../../../Messages';\n\nconst createRows = (data, checkedRows = []) => {\n  return data\n    ? data.reduce(\n        (acc, { uuid, display_name, name, description }) => [\n          ...acc,\n          {\n            uuid,\n            cells: [display_name || name, description],\n            selected: Boolean(checkedRows && checkedRows.find((row) => row.uuid === uuid)),\n          },\n        ],\n        []\n      )\n    : [];\n};\n\nconst RolesList = ({ selectedRoles, setSelectedRoles, rolesExcluded, groupId: groupUuid }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const dispatch = useDispatch();\n  const textFilterRef = useRef(null);\n  const selector = ({ roleReducer: { roles, isLoading } }) => ({\n    roles: roles.data,\n    pagination: roles.meta,\n    isLoading: isLoading,\n    filters: roles.filters,\n  });\n  const selectorRolesExluded = ({\n    groupReducer: {\n      selectedGroup: {\n        addRoles: { roles, pagination, loaded },\n        uuid,\n      },\n    },\n  }) => ({\n    roles,\n    pagination: pagination || { ...defaultCompactSettings, count: roles?.length },\n    isLoading: !loaded,\n    groupId: groupUuid || uuid,\n  });\n  const { roles, pagination, isLoading, groupId, filters } = useSelector(rolesExcluded ? selectorRolesExluded : selector, shallowEqual);\n\n  const { current: columns } = useRef([\n    { title: intl.formatMessage(messages.name), key: 'display_name', ...(rolesExcluded ? { orderBy: 'name' } : { transforms: [sortable] }) },\n    { title: intl.formatMessage(messages.description) },\n  ]);\n\n  const [filterValue, setFilterValue] = useState('');\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedRoles((roles) => newSelection(roles).map(({ uuid, name, label }) => ({ uuid, label: label || name })));\n  };\n\n  const fetchRoles = useCallback(\n    (groupId, config) =>\n      rolesExcluded ? dispatch(fetchAddRolesForGroup(groupId, config)) : dispatch(fetchRolesWithPolicies(mappedProps({ ...config, chrome }))),\n    [rolesExcluded]\n  );\n  const fetchTableData = (groupId, config) => {\n    const { name, count, limit, offset, orderBy } = config;\n    return fetchRoles(groupId, mappedProps({ count, limit, offset, orderBy, filters: { display_name: name } }));\n  };\n  const orderBy = `${sortByState?.direction === 'desc' ? '-' : ''}${columns[sortByState?.index].key}`;\n  const rows = createRows(roles, selectedRoles);\n\n  useEffect(() => {\n    fetchRoles(groupId, { ...pagination, orderBy });\n  }, []);\n\n  return (\n    <TableToolbarView\n      isSelectable\n      isCompact\n      borders={false}\n      columns={columns}\n      rows={rows}\n      sortBy={sortByState}\n      onSort={(e, index, direction, isSelectable) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[isSelectable ? index - 1 : index].key}`;\n        setSortByState({ index, direction });\n        fetchTableData(groupId, {\n          ...pagination,\n          offset: 0,\n          orderBy,\n          ...(filters?.length > 0\n            ? {\n                ...filters.reduce(\n                  (acc, curr) => ({\n                    ...acc,\n                    [curr.key]: curr.value,\n                  }),\n                  {}\n                ),\n              }\n            : { name: filterValue }),\n        });\n      }}\n      data={roles}\n      filterValue={filterValue}\n      filterPlaceholder={intl.formatMessage(messages.roleName).toLowerCase()}\n      fetchData={(config) => fetchRoles(groupId, { ...config, filters: { display_name: config.name } })}\n      setFilterValue={({ name }) => setFilterValue(name)}\n      isLoading={isLoading}\n      ouiaId=\"roles-table\"\n      pagination={pagination}\n      checkedRows={selectedRoles}\n      setCheckedItems={setCheckedItems}\n      titlePlural={intl.formatMessage(messages.roles).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.role)}\n      tableId=\"roles-list\"\n      textFilterRef={textFilterRef}\n    />\n  );\n};\n\nRolesList.propTypes = {\n  canSort: PropTypes.bool,\n  setSelectedRoles: PropTypes.func.isRequired,\n  selectedRoles: PropTypes.array,\n  rolesExcluded: PropTypes.bool.isRequired,\n  groupId: PropTypes.string,\n};\n\nRolesList.defaultProps = {\n  roles: [],\n  pagination: defaultCompactSettings,\n  canSort: true,\n};\n\nexport default RolesList;\n","import React, { Dispatch, Fragment, SetStateAction, useCallback, useEffect } from 'react';\nimport { ServiceAccountsState } from '../../../redux/reducers/service-account-reducer';\nimport { LAST_PAGE, ServiceAccount } from '../../../helpers/service-account/service-account-helper';\nimport { useIntl } from 'react-intl';\nimport { getDateFormat } from '../../../helpers/shared/helpers';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport DateFormat from '@redhat-cloud-services/frontend-components/DateFormat';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport { fetchServiceAccounts } from '../../../redux/actions/service-account-actions';\nimport { PaginationProps } from '../service-account/add-group-service-accounts';\nimport messages from '../../../Messages';\nimport './service-accounts-list.scss';\n\ninterface ServiceAccountsListProps {\n  selected: ServiceAccount[];\n  setSelected: Dispatch<SetStateAction<ServiceAccount[]>>;\n  // optional group ID to check whether SA are assigned to selected group\n  groupId?: string;\n}\n\nconst reducer = ({ serviceAccountReducer }: { serviceAccountReducer: ServiceAccountsState }) => ({\n  serviceAccounts: serviceAccountReducer.serviceAccounts,\n  status: serviceAccountReducer.status,\n  isLoading: serviceAccountReducer.isLoading,\n  limit: serviceAccountReducer.limit,\n  offset: serviceAccountReducer.offset,\n});\n\nconst createRows = (data: ServiceAccount[], checkedRows: ServiceAccount[]) =>\n  data?.reduce(\n    (acc: unknown[], curr: ServiceAccount) => [\n      ...acc,\n      {\n        uuid: curr.uuid,\n        title: curr.name,\n        cells: [\n          curr.name,\n          curr.description,\n          curr.clientId,\n          curr.createdBy,\n          <Fragment key={`${curr.name}-modified`}>\n            <DateFormat date={curr.createdAt} type={getDateFormat(curr.createdAt)} />\n          </Fragment>,\n        ],\n        selected: Boolean(checkedRows && checkedRows.find((row: ServiceAccount) => row.uuid === curr.uuid)) || curr.assignedToSelectedGroup,\n        disableSelection: curr.assignedToSelectedGroup,\n      },\n    ],\n    []\n  );\n\nexport const ServiceAccountsList: React.FunctionComponent<ServiceAccountsListProps> = ({ selected, setSelected, groupId }) => {\n  const { auth, getEnvironmentDetails } = useChrome();\n  const { serviceAccounts, status, limit, offset, isLoading } = useSelector(reducer);\n\n  const dispatch = useDispatch();\n  const intl = useIntl();\n\n  const fetchAccounts = useCallback(\n    async (props?: PaginationProps) => {\n      const env = getEnvironmentDetails();\n      const token = await auth.getToken();\n      dispatch(fetchServiceAccounts({ limit: props?.limit ?? limit, offset: props?.offset ?? offset, token, sso: env?.sso, groupId }));\n    },\n    [limit, offset]\n  );\n\n  useEffect(() => {\n    fetchAccounts({ limit, offset: 0 });\n  }, []);\n\n  const columns = [\n    { title: intl.formatMessage(messages.name), orderBy: 'name' },\n    { title: intl.formatMessage(messages.description), orderBy: 'description' },\n    { title: intl.formatMessage(messages.clientId), orderBy: 'clientId' },\n    { title: intl.formatMessage(messages.owner), orderBy: 'owner' },\n    { title: intl.formatMessage(messages.timeCreated), orderBy: 'timeCreated' },\n  ];\n\n  return (\n    <TableToolbarView\n      className=\"rbac-service-accounts-list\"\n      columns={columns}\n      isSelectable\n      rows={createRows(serviceAccounts, selected)}\n      data={serviceAccounts}\n      fetchData={fetchAccounts}\n      isLoading={isLoading}\n      pagination={{\n        limit,\n        offset,\n        ...(status === LAST_PAGE ? { count: offset + serviceAccounts.length } : {}),\n      }}\n      paginationProps={{\n        toggleTemplate: ({ firstIndex, lastIndex }) => (\n          <>\n            <b>\n              {firstIndex} - {lastIndex}\n            </b>{' '}\n            of <b>{status === LAST_PAGE ? offset + serviceAccounts.length : 'many'}</b>\n          </>\n        ),\n        isCompact: true,\n      }}\n      checkedRows={selected}\n      setCheckedItems={setSelected}\n      titlePlural={intl.formatMessage(messages.serviceAccounts).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.serviceAccount)}\n      emptyProps={{\n        title: intl.formatMessage(messages.noServiceAccountsFound),\n        description: [intl.formatMessage(messages.contactServiceTeamForAccounts), ''],\n      }}\n      tableId=\"group-add-accounts\"\n      ouiaId=\"group-add-accounts\"\n    />\n  );\n};\n\nexport default ServiceAccountsList;\n","import * as ActionTypes from '../action-types';\nimport * as ServiceAccountsHelper from '../../helpers/service-account/service-account-helper';\n\nexport const fetchServiceAccounts = (apiProps: Record<string, unknown>) => ({\n  type: ActionTypes.FETCH_SERVICE_ACCOUNTS,\n  payload: ServiceAccountsHelper.getServiceAccounts(apiProps),\n  meta: apiProps,\n});\n","import React, { useEffect, Fragment, useState, useContext, useRef, useCallback, Suspense } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport truncate from 'lodash/truncate';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate, Outlet } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport AppLink, { mergeToBasename } from '../../../presentational-components/shared/AppLink';\nimport { fetchUsers, updateUsersFilters, updateUsers, updateUserIsOrgAdminStatus } from '../../../redux/actions/user-actions';\nimport { Button, Switch as PF4Switch, Label, Modal, ModalVariant, List, ListItem, Checkbox, Stack, StackItem } from '@patternfly/react-core';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core/deprecated';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { mappedProps, isExternalIdp } from '../../../helpers/shared/helpers';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport messages from '../../../Messages';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { useScreenSize, isSmallScreen } from '@redhat-cloud-services/frontend-components/useScreenSize';\nimport paths from '../../../utilities/pathnames';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst IsAdminCellTextContent = ({ isOrgAdmin }) => {\n  const intl = useIntl();\n\n  return isOrgAdmin ? (\n    <Fragment>\n      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n      <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n    </Fragment>\n  ) : (\n    <Fragment>\n      <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n      <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n    </Fragment>\n  );\n};\n\nIsAdminCellTextContent.propTypes = {\n  isOrgAdmin: PropTypes.bool,\n};\n\nconst IsAdminCellDropdownContent = ({ isOrgAdmin, userId, isDisabled, toggleUserIsOrgAdminStatus }) => {\n  const [isAdminDropdownOpen, setIsAdminDropdownOpen] = useState(false);\n  const intl = useIntl();\n\n  const onIsAdminDropdownToggle = (isOpen) => {\n    setIsAdminDropdownOpen(isOpen);\n  };\n\n  const onIsAdminDropdownSelect = (_event) => {\n    const isAdminStatusMap = { yes: true, no: false };\n\n    toggleUserIsOrgAdminStatus(isAdminStatusMap[_event?.target?.id], null, { userId });\n    setIsAdminDropdownOpen(false);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key={`is-admin-dropdown-item-${userId}`} componentID=\"yes\">\n      {intl.formatMessage(messages.yes)}\n    </DropdownItem>,\n    <DropdownItem key={`is-not-admin-dropdown-item-${userId}`} componentID=\"no\">\n      {intl.formatMessage(messages.no)}\n    </DropdownItem>,\n  ];\n  return (\n    <Dropdown\n      id={`is-admin-dropdown-${userId}`}\n      key={`is-admin-dropdown-${userId}`}\n      onSelect={onIsAdminDropdownSelect}\n      toggle={\n        <DropdownToggle\n          id={`is-admin-dropdown-toggle-${userId}`}\n          key={`is-admin-dropdown-toggle-${userId}`}\n          isDisabled={isDisabled}\n          onToggle={onIsAdminDropdownToggle}\n        >\n          {isOrgAdmin ? intl.formatMessage(messages.yes) : intl.formatMessage(messages.no)}\n        </DropdownToggle>\n      }\n      isOpen={isAdminDropdownOpen}\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nIsAdminCellDropdownContent.propTypes = {\n  isOrgAdmin: PropTypes.bool,\n  userId: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  toggleUserIsOrgAdminStatus: PropTypes.func,\n};\n\nconst UsersListItless = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, displayNarrow, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [isDeactivateConfirmationModalOpen, setIsDeactivateConfirmationModalOpen] = useState(false);\n  const [isDeactivateConfirmationChecked, setIsDeactivateConfirmationChecked] = useState(false);\n  const [isToolbarDropdownOpen, setIsToolbarDropdownOpen] = useState(false);\n  const { orgAdmin } = useContext(PermissionsContext);\n  const screenSize = useScreenSize();\n  // use for text filter to focus\n  const innerRef = useRef(null);\n  const isAdmin = orgAdmin;\n  const chrome = useChrome();\n  const [currentUser, setCurrentUser] = useState({});\n  const [userToken, setUserToken] = useState('');\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.external_source_id })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n\n  const confirmDeactivateUsers = () => {\n    toggleUserActivationStatus(false, null, selectedRows);\n    setIsDeactivateConfirmationModalOpen(false);\n    setIsDeactivateConfirmationChecked(false);\n  };\n\n  const toggleUserIsOrgAdminStatus = (isOrgAdmin, _event, user = {}) => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    const newUserObj = { id: user.userId, is_org_admin: isOrgAdmin };\n    dispatch(updateUserIsOrgAdminStatus(newUserObj))\n      .then(() => {\n        setFilters(newFilters);\n        if (setSelectedUsers) {\n          setSelectedUsers([]);\n        } else {\n          setSelectedRows([]);\n        }\n        fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const toolbarDropdowns = () => {\n    const onToggle = (isOpen) => {\n      setIsToolbarDropdownOpen(isOpen);\n    };\n    const onToolbarDropdownSelect = async (_event) => {\n      const userActivationStatusMap = { activate: true, deactivate: false };\n\n      if (_event?.target?.id === 'deactivate') {\n        setIsDeactivateConfirmationModalOpen(true);\n      } else {\n        toggleUserActivationStatus(userActivationStatusMap[_event?.target?.id], null, selectedRows);\n      }\n      setIsToolbarDropdownOpen(false);\n    };\n    const dropdownItems = [\n      <DropdownItem key=\"activate-users-dropdown-item\" componentID=\"activate\">\n        {intl.formatMessage(messages.activateUsersButton)}\n      </DropdownItem>,\n      <DropdownItem key=\"deactivate-users-dropdown-item\" componentID=\"deactivate\">\n        {intl.formatMessage(messages.deactivateUsersButton)}\n      </DropdownItem>,\n    ];\n    return (\n      <Dropdown\n        onSelect={onToolbarDropdownSelect}\n        toggle={\n          <DropdownToggle id=\"toolbar-dropdown-toggle\" isDisabled={selectedRows.length === 0} onToggle={onToggle}>\n            {intl.formatMessage(messages.activateUsersButton)}\n          </DropdownToggle>\n        }\n        isOpen={isToolbarDropdownOpen}\n        dropdownItems={dropdownItems}\n      />\n    );\n  };\n  const toolbarButtons = () => [\n    <AppLink to={paths['invite-users'].link} key=\"invite-users\" className=\"rbac-m-hide-on-sm\">\n      <Button ouiaId=\"invite-users-button\" variant=\"primary\" aria-label=\"Invite users\">\n        {intl.formatMessage(messages.inviteUsers)}\n      </Button>\n    </AppLink>,\n    ...(isSmallScreen(screenSize)\n      ? [\n          {\n            label: intl.formatMessage(messages.inviteUsers),\n            onClick: () => {\n              navigate(mergeToBasename(paths['invite-users'].link));\n            },\n          },\n        ]\n      : []),\n  ];\n  const toggleUserActivationStatus = (isActivated, _event, users = []) => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    const newUserList = users.map((user) => {\n      return { id: user?.uuid || user?.external_source_id, is_active: isActivated };\n    });\n    dispatch(updateUsers(newUserList))\n      .then(() => {\n        setFilters(newFilters);\n        if (setSelectedUsers) {\n          setSelectedUsers([]);\n        } else {\n          setSelectedRows([]);\n        }\n        fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    chrome.auth.getUser().then((user) => setCurrentUser(user));\n    chrome.auth.getToken().then((token) => setUserToken(token));\n  }, []);\n\n  const isUserSelectable = (external_source_id) => external_source_id != currentUser?.identity?.internal?.account_id;\n\n  const createITLessRows = (userLinks, data, checkedRows = []) => {\n    const maxLength = 25;\n    return data\n      ? data.reduce(\n          (\n            acc,\n            { external_source_id, username, is_active: is_active, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }\n          ) => [\n            ...acc,\n            {\n              uuid: external_source_id,\n              cells: [\n                {\n                  title:\n                    isAdmin && !displayNarrow ? (\n                      <IsAdminCellDropdownContent\n                        isOrgAdmin={isOrgAdmin}\n                        userId={external_source_id}\n                        isDisabled={!isAdmin || currentUser?.identity?.internal?.account_id == external_source_id}\n                        toggleUserIsOrgAdminStatus={toggleUserIsOrgAdminStatus}\n                      />\n                    ) : (\n                      <IsAdminCellTextContent isOrgAdmin={isOrgAdmin} />\n                    ),\n                  props: {\n                    'data-is-active': isOrgAdmin,\n                  },\n                },\n                {\n                  title: userLinks ? (\n                    <AppLink to={paths['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n                  ) : displayNarrow ? (\n                    <span title={username}>{truncate(username, { length: maxLength })}</span>\n                  ) : (\n                    username\n                  ),\n                },\n                {\n                  title: displayNarrow ? <span title={email}>{truncate(email, { length: maxLength })}</span> : email,\n                },\n                firstName,\n                lastName,\n                {\n                  title:\n                    isAdmin && !displayNarrow ? (\n                      <PF4Switch\n                        key=\"status\"\n                        isDisabled={!isAdmin || currentUser?.identity?.internal?.account_id == external_source_id}\n                        label={intl.formatMessage(messages.active)}\n                        labelOff={intl.formatMessage(messages.inactive)}\n                        isChecked={is_active}\n                        onChange={(checked, _event) => {\n                          toggleUserActivationStatus(checked, _event, [\n                            {\n                              external_source_id,\n                              is_active: is_active,\n                            },\n                          ]);\n                        }}\n                      />\n                    ) : (\n                      <Label key=\"status\" color={is_active ? 'green' : 'grey'}>\n                        {intl.formatMessage(is_active ? messages.active : messages.inactive)}\n                      </Label>\n                    ),\n                  props: {\n                    'data-is-active': is_active,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows?.find?.(({ uuid }) => uuid === external_source_id)),\n              disableSelection: displayNarrow ? undefined : !isUserSelectable(external_source_id),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n  const columns = [\n    { title: intl.formatMessage(displayNarrow ? messages.orgAdmin : messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = usesMetaInURL ? syncDefaultPaginationWithUrl(location, navigate, pagination) : pagination;\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    if (setSelectedUsers) {\n      setSelectedUsers((users) => {\n        return newSelection(users)\n          .filter((user) => (displayNarrow ? user : user?.uuid != currentUser?.identity?.internal?.account_id))\n          .map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n      });\n    } else {\n      setSelectedRows((users) => {\n        return newSelection(users)\n          .filter((user) => (displayNarrow ? user : user?.uuid != currentUser?.identity?.internal?.account_id))\n          .map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n      });\n    }\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n  return (\n    <>\n      <Modal\n        title={intl.formatMessage(messages.deactivateUsersConfirmationModalTitle)}\n        titleIconVariant=\"warning\"\n        description={intl.formatMessage(messages.deactivateUsersConfirmationModalDescription)}\n        variant={ModalVariant.medium}\n        isOpen={isDeactivateConfirmationModalOpen}\n        footer={\n          <Stack hasGutter>\n            <StackItem>\n              <Checkbox\n                label={intl.formatMessage(messages.deactivateUsersConfirmationModalCheckboxText)}\n                isChecked={isDeactivateConfirmationChecked}\n                onChange={(checked) => {\n                  setIsDeactivateConfirmationChecked(checked);\n                }}\n                id=\"deactivateUsersConfirmationCheckbox\"\n                name=\"deactivate-users-confirmation-checkbox\"\n              />\n            </StackItem>\n            <StackItem>\n              <Button\n                key=\"confirm-deactivate-users\"\n                ouiaId=\"danger-confirm-deactivate-users-button\"\n                isDisabled={selectedRows.length === 0 || !isDeactivateConfirmationChecked}\n                variant=\"danger\"\n                onClick={() => {\n                  confirmDeactivateUsers();\n                }}\n              >\n                {intl.formatMessage(messages.deactivateUsersConfirmationButton)}\n              </Button>\n              <Button\n                id=\"deactivate-users-confirmation-cancel\"\n                ouiaId=\"secondary-cancel-button\"\n                key=\"cancel\"\n                variant=\"link\"\n                onClick={() => {\n                  setIsDeactivateConfirmationModalOpen(false);\n                }}\n              >\n                {intl.formatMessage(messages.cancel)}\n              </Button>\n            </StackItem>\n          </Stack>\n        }\n        onClose={() => {\n          setIsDeactivateConfirmationModalOpen(false);\n        }}\n      >\n        <List isPlain isBordered>\n          {selectedRows.map((user) => (\n            <ListItem key={user.uuid}>{user.label}</ListItem>\n          ))}\n        </List>\n      </Modal>\n      <TableToolbarView\n        toolbarChildren={isAdmin && !displayNarrow ? toolbarDropdowns : () => null}\n        toolbarButtons={isAdmin && !displayNarrow && !isExternalIdp(userToken) ? toolbarButtons : () => []}\n        isCompact\n        isSelectable\n        borders={false}\n        columns={columns}\n        rows={createITLessRows(userLinks, users, selectedUsers ? selectedUsers : selectedRows)}\n        sortBy={sortByState}\n        onSort={(e, index, direction) => {\n          const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - 1].key}`;\n          setSortByState({ index, direction });\n          fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n        }}\n        data={users}\n        ouiaId=\"users-table\"\n        fetchData={(config) => {\n          const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n          const { username, email, count, limit, offset, orderBy } = config;\n\n          fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n            innerRef?.current?.focus();\n          });\n          usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n        }}\n        emptyFilters={{ username: '', email: '', status: '' }}\n        setFilterValue={({ username, email, status }) => {\n          updateFilters({\n            username: typeof username === 'undefined' ? filters.username : username,\n            email: typeof email === 'undefined' ? filters.email : email,\n            status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n          });\n        }}\n        isLoading={isLoading}\n        pagination={pagination}\n        checkedRows={selectedUsers ? selectedUsers : selectedRows}\n        setCheckedItems={setCheckedItems}\n        rowWrapper={UsersRow}\n        titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n        titleSingular={intl.formatMessage(messages.user)}\n        filters={[\n          {\n            key: 'username',\n            value: filters.username,\n            placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n            innerRef,\n          },\n          {\n            key: 'email',\n            value: filters.email,\n            placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n            innerRef,\n          },\n          {\n            key: 'status',\n            value: filters.status,\n            label: intl.formatMessage(messages.status),\n            type: 'checkbox',\n            items: [\n              { label: intl.formatMessage(messages.active), value: 'Active' },\n              { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n            ],\n          },\n        ]}\n        tableId=\"users-list\"\n        {...props}\n      />\n      <Suspense>\n        <Outlet\n          context={{\n            [paths['invite-users'].path]: {\n              fetchData: () => fetchData({ ...pagination, filters, usesMetaInURL }),\n            },\n          }}\n        />\n      </Suspense>\n    </>\n  );\n};\n\nUsersListItless.propTypes = {\n  displayNarrow: PropTypes.bool,\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersListItless.defaultProps = {\n  displayNarrow: false,\n  users: [],\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersListItless;\n","import React, { useEffect, useState, useContext, useRef, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { useIntl } from 'react-intl';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { mappedProps } from '../../../helpers/shared/helpers';\nimport { fetchUsers, updateUsersFilters } from '../../../redux/actions/user-actions';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport messages from '../../../Messages';\nimport { createRows } from '../../user/user-table-helpers';\n\nconst UsersList = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, displayNarrow, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const { orgAdmin } = useContext(PermissionsContext);\n  // use for text filter to focus\n  const innerRef = useRef(null);\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.username })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n  const columns = [\n    { title: intl.formatMessage(displayNarrow ? messages.orgAdmin : messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    setSelectedUsers((users) => {\n      return newSelection(users).map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n    });\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n  return (\n    <TableToolbarView\n      isCompact\n      isSelectable\n      borders={false}\n      columns={columns}\n      rows={createRows(userLinks, users, intl, selectedUsers, true)}\n      sortBy={sortByState}\n      onSort={(e, index, direction) => {\n        const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - 1].key}`;\n        setSortByState({ index, direction });\n        fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n      }}\n      data={users}\n      ouiaId=\"users-table\"\n      fetchData={(config) => {\n        const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n        const { username, email, count, limit, offset, orderBy } = config;\n\n        fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n          innerRef?.current?.focus();\n        });\n        usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n      }}\n      emptyFilters={{ username: '', email: '', status: '' }}\n      setFilterValue={({ username, email, status }) => {\n        updateFilters({\n          username: typeof username === 'undefined' ? filters.username : username,\n          email: typeof email === 'undefined' ? filters.email : email,\n          status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n        });\n      }}\n      isLoading={isLoading}\n      pagination={pagination}\n      checkedRows={selectedUsers}\n      setCheckedItems={setCheckedItems}\n      rowWrapper={UsersRow}\n      titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n      titleSingular={intl.formatMessage(messages.user)}\n      filters={[\n        {\n          key: 'username',\n          value: filters.username,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'email',\n          value: filters.email,\n          placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n          innerRef,\n        },\n        {\n          key: 'status',\n          value: filters.status,\n          label: intl.formatMessage(messages.status),\n          type: 'checkbox',\n          items: [\n            { label: intl.formatMessage(messages.active), value: 'Active' },\n            { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n          ],\n        },\n      ]}\n      tableId=\"users-list\"\n      {...props}\n    />\n  );\n};\n\nUsersList.propTypes = {\n  displayNarrow: PropTypes.bool,\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func.isRequired,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersList.defaultProps = {\n  displayNarrow: false,\n  users: [],\n  selectedUsers: [],\n  setSelectedUsers: () => undefined,\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersList;\n","import { fetchGroups } from '../../helpers/group/group-helper';\nimport asyncDebounce from '../../utilities/async-debounce';\nimport { locale } from '../../AppEntry';\nimport { createIntl, createIntlCache } from 'react-intl';\nimport messages from '../../Messages';\nimport providerMessages from '../../locales/data.json';\n\nexport const asyncValidator = async (groupName, idKey, id) => {\n  const cache = createIntlCache();\n  const intl = createIntl({ locale, messages: providerMessages }, cache);\n  if (!groupName) {\n    return undefined;\n  }\n\n  if (groupName.length > 150) {\n    throw intl.formatMessage(messages.maxCharactersWarning, { number: 150 });\n  }\n\n  const response = await fetchGroups({ limit: 10, offset: 0, filters: { name: groupName }, nameMatch: 'exact' }).catch((error) => {\n    console.error(error);\n    return undefined;\n  });\n\n  if (id ? response?.data?.some((item) => item[idKey] !== id) : response?.data?.length > 0) {\n    throw intl.formatMessage(messages.nameAlreadyTaken);\n  }\n\n  return undefined;\n};\n\nexport const debouncedAsyncValidator = asyncDebounce((value, idKey, id) => asyncValidator(value, idKey, id));\n","import React, { Fragment } from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { IntlShape } from 'react-intl';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport AppLink from '../../presentational-components/shared/AppLink';\n\ninterface UserProps {\n  email: string;\n  first_name: string;\n  is_active: boolean;\n  is_org_admin: boolean;\n  last_name: string;\n  username: string;\n  uuid: string;\n}\n\nexport type CellObject = { title: string | React.RefAttributes<HTMLAnchorElement>; props?: { 'data-is-active': boolean } };\n\nexport interface RowProps {\n  uuid: string; // username\n  cells: [\n    React.ReactNode, // yes or no for isOrgAdmin\n    CellObject, // link to user or just username\n    string, // email\n    string, // firstName\n    string, // lastName\n    CellObject // status\n  ];\n  selected: boolean;\n}\n\nexport const createRows = (userLinks: boolean, data: UserProps[] = [], intl: IntlShape, checkedRows = [], isSelectable = false): RowProps[] =>\n  data?.reduce<RowProps[]>((acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => {\n    const newEntry: RowProps = {\n      uuid: username,\n      cells: [\n        isOrgAdmin ? (\n          <Fragment>\n            <CheckIcon key=\"yes-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <CloseIcon key=\"no-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n          </Fragment>\n        ),\n        {\n          title: userLinks ? (\n            <AppLink to={pathnames['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n          ) : (\n            username.toString()\n          ),\n        },\n        email,\n        firstName,\n        lastName,\n        {\n          title: (\n            <Label key=\"status\" color={isActive ? 'green' : 'grey'}>\n              {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n            </Label>\n          ),\n          props: {\n            'data-is-active': isActive,\n          },\n        },\n      ],\n      selected: isSelectable ? Boolean(checkedRows?.find?.(({ uuid }) => uuid === username)) : false,\n    };\n\n    return [...acc, newEntry];\n  }, []);\n","import awesomeDebouncePromise from 'awesome-debounce-promise';\n\nexport default (asyncFunction: (...args: any[]) => Promise<any>, debounceTime = 250, options = { onlyResolvesLast: false }) =>\n  awesomeDebouncePromise(asyncFunction, debounceTime, options);\n"],"names":["syncDefaultFiltersWithUrl","location","navigate","keys","defaults","searchParams","URLSearchParams","search","filters","reduce","acc","key","values","getAll","length","Object","forEach","value","Array","isArray","Set","item","includes","append","get","set","pathname","toString","replace","areFiltersPresentInUrl","some","applyFiltersToUrl","newValues","delete","linkBasename","useNavigate","to","options","ActiveUser","linkDescription","linkTitle","intl","chrome","env","getEnvironment","prefix","isProd","orgAdmin","useContext","useFlag","Text","className","component","TextVariants","h7","formatMessage","usersDescription","a","href","target","rel","propTypes","defaultProps","UsersRow","row","props","status","isActive","data","isRequired","ReviewStepButtons","renderNextButton","disableBack","handlePrev","buttonLabels","cancel","back","context","formOptions","success","error","submitting","Fragment","Button","type","variant","isDisabled","onClick","onCancel","handleNext","nextStep","when","stepMapper","submit","next","WizardError","title","text","customFooter","jumpToStep","setWizardError","errorTitle","errorDescription","undefined","ButtonVariant","primary","returnToStepNumber","number","ReviewTemplate","formFields","useAppNavigate","submittingGroup","submittingServiceAccounts","AddGroupWizardContext","getState","useEffect","then","catch","Bullseye","Spinner","size","EmptyState","EmptyStateVariant","lg","EmptyStateHeader","titleText","groupBeingCreated","icon","EmptyStateIcon","headingLevel","Progress","style","textAlign","min","max","label","creatingGroup","associatingServiceAccounts","groupNameTakenTitle","addGroupServiceAccountsErrorTitle","count","groupNameTakenText","addNewGroupServiceAccountsErrorDescription","pathnames","groups","link","close","Title","reviewDetails","SetName","input","name","description","groupName","setGroupName","useState","groupNameError","setGroupNameError","groupDescription","setGroupDescription","processGroupName","trimmedValue","onChange","groupNameValid","groupNameValidated","groupDescriptionValid","groupDescriptionValidated","Stack","hasGutter","StackItem","FormGroup","TextInput","validated","onBlur","_event","FormHelperText","HelperText","HelperTextItem","required","TextArea","change","resizeOrientation","maxCharactersWarning","SetRoles","selectedRoles","setSelectedRoles","TextContent","selectRolesForGroupText","fieldId","rolesExcluded","SetUsers","selectedUsers","setSelectedUsers","isITLess","activeUserProps","toManageUsersText","usersListProps","displayNarrow","Form","SummaryContent","isBeta","useChrome","selectedServiceAccounts","enableServiceAccounts","Grid","GridItem","md","h4","p","roles","map","role","index","members","serviceAccounts","account","onClose","setHideForm","setWizardSuccess","groupCreatedSuccessfully","color","EmptyStateFooter","exit","EmptyStateActions","createAnotherGroup","createContext","newValue","FormTemplate","showFormControls","Description","Content","rest","mapperExtension","selectedAccounts","setSelectedAccounts","addServiceAccountsToGroupDescription","Alert","isInline","isPlain","visitServiceAccountsPage","AppLink","serviceAccountsPage","selected","setSelected","emptyCallback","nonEmptyCallback","setGroupData","formData","AddGroupWizard","postMethod","pagination","orderBy","dispatch","useDispatch","container","useRef","document","createElement","schema","cache","locale","messages","fields","isDynamic","inModal","showTitles","createGroup","nameAndDescription","validate","REQUIRED","TEXTAREA","hideField","MAX_LENGTH","threshold","addRoles","addMembers","addServiceAccounts","buttons","StepTemplate","schemaBuilder","current","groupData","wizardContextValue","setWizardContextValue","hideForm","redirectToGroups","addNotification","addingGroupTitle","dismissDelay","addingGroupCanceledDescription","page","per_page","limit","prev","setWizardCanceled","canceled","offset","Provider","WarningModal","exitItemCreation","group","toLocaleLowerCase","isOpen","hidden","confirmButtonLabel","discard","onConfirm","discardedInputsWarning","Wizard","steps","isFinishedStep","subscription","componentMapper","onSubmit","serviceAccountsAdded","user_list","user","username","roles_list","uuid","initialValues","RolesList","groupId","groupUuid","textFilterRef","isLoading","useSelector","groupReducer","selectedGroup","loaded","roleReducer","meta","shallowEqual","columns","transforms","filterValue","setFilterValue","sortByState","setSortByState","direction","fetchRoles","useCallback","config","rows","checkedRows","display_name","cells","Boolean","find","createRows","isSelectable","isCompact","borders","sortBy","onSort","e","fetchTableData","curr","filterPlaceholder","roleName","toLowerCase","fetchData","ouiaId","setCheckedItems","newSelection","titlePlural","titleSingular","tableId","canSort","reducer","serviceAccountReducer","ServiceAccountsList","auth","getEnvironmentDetails","fetchAccounts","async","token","getToken","apiProps","sso","payload","clientId","owner","timeCreated","createdBy","DateFormat","date","createdAt","assignedToSelectedGroup","disableSelection","paginationProps","toggleTemplate","firstIndex","lastIndex","serviceAccount","emptyProps","noServiceAccountsFound","contactServiceTeamForAccounts","IsAdminCellTextContent","isOrgAdmin","yes","no","IsAdminCellDropdownContent","userId","toggleUserIsOrgAdminStatus","isAdminDropdownOpen","setIsAdminDropdownOpen","dropdownItems","componentID","id","onSelect","toggle","onToggle","UsersListItless","userLinks","usesMetaInURL","useLocation","selectedRows","setSelectedRows","isDeactivateConfirmationModalOpen","setIsDeactivateConfirmationModalOpen","isDeactivateConfirmationChecked","setIsDeactivateConfirmationChecked","isToolbarDropdownOpen","setIsToolbarDropdownOpen","screenSize","innerRef","isAdmin","currentUser","setCurrentUser","userToken","setUserToken","userReducer","users","redirected","stateFilters","isUserDataLoading","external_source_id","newFilters","newUserObj","is_org_admin","setFilters","err","console","toggleUserActivationStatus","isActivated","newUserList","is_active","getUser","isUserSelectable","identity","internal","account_id","updateStateFilters","orgAdministrator","email","firstName","lastName","active","filter","Modal","deactivateUsersConfirmationModalTitle","titleIconVariant","deactivateUsersConfirmationModalDescription","ModalVariant","medium","footer","Checkbox","deactivateUsersConfirmationModalCheckboxText","isChecked","checked","deactivateUsersConfirmationButton","List","isBordered","ListItem","toolbarChildren","activateUsersButton","deactivateUsersButton","activate","deactivate","toolbarButtons","inviteUsers","first_name","last_name","labelOff","inactive","Label","createITLessRows","prototype","hasOwnProperty","call","focus","emptyFilters","rowWrapper","placeholder","filterByKey","items","Suspense","Outlet","path","searchFilter","UsersList","asyncValidator","idKey","response","nameMatch","nameAlreadyTaken","debouncedAsyncValidator","asyncFunction","debounceTime","onlyResolvesLast"],"sourceRoot":""}