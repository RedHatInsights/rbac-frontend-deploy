{"version":3,"file":"js/5899.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/helpers/shared/filters.js","webpack:///./src/presentational-components/shared/ActiveUsers.js","webpack:///./src/presentational-components/shared/UsersRow.js","webpack:///./src/smart-components/group/add-group/users-list-itless.js","webpack:///./src/smart-components/user/user-table-helpers.tsx"],"sourcesContent":["export const syncDefaultFiltersWithUrl = (location, navigate, keys, defaults = {}) => {\n  const searchParams = new URLSearchParams(location.search);\n\n  let filters = keys.reduce((acc, key) => {\n    const values = searchParams.getAll(key);\n    return {\n      ...acc,\n      [key]: values.length > 1 ? values : values[0],\n    };\n  }, {});\n\n  Object.keys(defaults).forEach((key) => {\n    const value = defaults[key];\n    filters = {\n      ...filters,\n      [key]: Array.isArray(filters[key])\n        ? [...new Set([...filters[key], ...(Array.isArray(value) ? value : [value])])]\n        : (value?.length > 0 && value) || filters[key],\n    };\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => searchParams.getAll(key).includes(item) || searchParams.append(key, item));\n    } else {\n      searchParams.get(key) || (value && searchParams.set(key, value));\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n  return filters;\n};\n\nexport const areFiltersPresentInUrl = (location, keys) => {\n  const searchParams = new URLSearchParams(location.search);\n  return keys.some((key) => searchParams.get(key));\n};\n\nexport const applyFiltersToUrl = (location, navigate, newValues) => {\n  const searchParams = new URLSearchParams(location.search);\n  Object.keys(newValues).forEach((key) => searchParams.delete(key));\n\n  Object.keys(newValues).forEach((key) => {\n    const value = newValues[key];\n\n    if (Array.isArray(value)) {\n      value.forEach((item) => item && searchParams.append(key, item));\n    } else {\n      value && searchParams.set(key, value);\n    }\n  });\n\n  navigate(\n    {\n      pathname: location.pathname,\n      search: searchParams.toString(),\n    },\n    {\n      replace: true,\n    }\n  );\n};\n","import React, { useContext } from 'react';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport PermissionsContext from '../../utilities/permissions-context';\nimport messages from '../../Messages';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { useFlag } from '@unleash/proxy-client-react';\n\nconst ActiveUser = ({ linkDescription, linkTitle }) => {\n  const intl = useIntl();\n  const chrome = useChrome();\n  const env = chrome.getEnvironment();\n  const prefix = chrome.isProd() ? '' : `${env}.`;\n  const { orgAdmin } = useContext(PermissionsContext);\n  const isITLess = useFlag('platform.rbac.itless');\n  return !isITLess && orgAdmin ? (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n      {linkDescription}\n      <Text\n        component={TextVariants.a}\n        href={`https://www.${prefix}redhat.com/wapps/ugc/protected/usermgt/userList.html`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {linkTitle}\n        <ExternalLinkAltIcon />\n      </Text>\n      .\n    </Text>\n  ) : (\n    <Text className=\"pf-v5-u-mt-0\" component={TextVariants.h7}>\n      {`${intl.formatMessage(messages.usersDescription)} `}\n    </Text>\n  );\n};\n\nActiveUser.propTypes = {\n  linkDescription: PropTypes.node,\n  linkTitle: PropTypes.node,\n};\n\nActiveUser.defaultProps = {\n  linkDescription: '',\n  linkTitle: ' user management list ',\n};\n\nexport default ActiveUser;\n","import React from 'react';\nimport { RowWrapper } from '@patternfly/react-table';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst UsersRow = ({ row, ...props }) => {\n  const { status } = row;\n  const isActive = status?.props?.['data-is-active'];\n  return <RowWrapper className={classNames('rbac__user-row', { 'ins-m-inactive': !isActive })} row={row} {...props} />;\n};\n\nUsersRow.propTypes = {\n  row: PropTypes.shape({\n    status: PropTypes.shape({\n      props: PropTypes.shape({\n        'data-is-active': PropTypes.bool,\n        data: PropTypes.shape({\n          isActive: PropTypes.bool,\n        }),\n      }),\n    }),\n  }),\n};\n\nexport default UsersRow;\n","import React, { useEffect, Fragment, useState, useContext, useRef, useCallback, Suspense } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport truncate from 'lodash/truncate';\nimport { useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { useLocation, useNavigate, Outlet } from 'react-router-dom';\nimport { TableToolbarView } from '../../../presentational-components/shared/table-toolbar-view';\nimport AppLink, { mergeToBasename } from '../../../presentational-components/shared/AppLink';\nimport { fetchUsers, updateUsersFilters, updateUsers, updateUserIsOrgAdminStatus } from '../../../redux/actions/user-actions';\nimport { Button, Switch as PF4Switch, Label, Modal, ModalVariant, List, ListItem, Checkbox, Stack, StackItem } from '@patternfly/react-core';\nimport { Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core/deprecated';\nimport { sortable, nowrap } from '@patternfly/react-table';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport { mappedProps, isExternalIdp } from '../../../helpers/shared/helpers';\nimport UsersRow from '../../../presentational-components/shared/UsersRow';\nimport {\n  defaultSettings,\n  defaultAdminSettings,\n  syncDefaultPaginationWithUrl,\n  applyPaginationToUrl,\n  isPaginationPresentInUrl,\n} from '../../../helpers/shared/pagination';\nimport { syncDefaultFiltersWithUrl, applyFiltersToUrl, areFiltersPresentInUrl } from '../../../helpers/shared/filters';\nimport messages from '../../../Messages';\nimport PermissionsContext from '../../../utilities/permissions-context';\nimport { useScreenSize, isSmallScreen } from '@redhat-cloud-services/frontend-components/useScreenSize';\nimport paths from '../../../utilities/pathnames';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\nconst IsAdminCellTextContent = ({ isOrgAdmin }) => {\n  const intl = useIntl();\n\n  return isOrgAdmin ? (\n    <Fragment>\n      <CheckIcon key=\"yes-icon\" className=\"pf-u-mr-sm\" />\n      <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n    </Fragment>\n  ) : (\n    <Fragment>\n      <CloseIcon key=\"no-icon\" className=\"pf-u-mr-sm\" />\n      <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n    </Fragment>\n  );\n};\n\nIsAdminCellTextContent.propTypes = {\n  isOrgAdmin: PropTypes.bool,\n};\n\nconst IsAdminCellDropdownContent = ({ isOrgAdmin, userId, isDisabled, toggleUserIsOrgAdminStatus }) => {\n  const [isAdminDropdownOpen, setIsAdminDropdownOpen] = useState(false);\n  const intl = useIntl();\n\n  const onIsAdminDropdownToggle = (isOpen) => {\n    setIsAdminDropdownOpen(isOpen);\n  };\n\n  const onIsAdminDropdownSelect = (_event) => {\n    const isAdminStatusMap = { yes: true, no: false };\n\n    toggleUserIsOrgAdminStatus(isAdminStatusMap[_event?.target?.id], null, { userId });\n    setIsAdminDropdownOpen(false);\n  };\n\n  const dropdownItems = [\n    <DropdownItem key={`is-admin-dropdown-item-${userId}`} componentID=\"yes\">\n      {intl.formatMessage(messages.yes)}\n    </DropdownItem>,\n    <DropdownItem key={`is-not-admin-dropdown-item-${userId}`} componentID=\"no\">\n      {intl.formatMessage(messages.no)}\n    </DropdownItem>,\n  ];\n  return (\n    <Dropdown\n      id={`is-admin-dropdown-${userId}`}\n      key={`is-admin-dropdown-${userId}`}\n      onSelect={onIsAdminDropdownSelect}\n      toggle={\n        <DropdownToggle\n          id={`is-admin-dropdown-toggle-${userId}`}\n          key={`is-admin-dropdown-toggle-${userId}`}\n          isDisabled={isDisabled}\n          onToggle={onIsAdminDropdownToggle}\n        >\n          {isOrgAdmin ? intl.formatMessage(messages.yes) : intl.formatMessage(messages.no)}\n        </DropdownToggle>\n      }\n      isOpen={isAdminDropdownOpen}\n      dropdownItems={dropdownItems}\n    />\n  );\n};\n\nIsAdminCellDropdownContent.propTypes = {\n  isOrgAdmin: PropTypes.bool,\n  userId: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  toggleUserIsOrgAdminStatus: PropTypes.func,\n};\n\nconst UsersListItless = ({ selectedUsers, setSelectedUsers, userLinks, usesMetaInURL, displayNarrow, props }) => {\n  const intl = useIntl();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const [selectedRows, setSelectedRows] = useState([]);\n  const [isDeactivateConfirmationModalOpen, setIsDeactivateConfirmationModalOpen] = useState(false);\n  const [isDeactivateConfirmationChecked, setIsDeactivateConfirmationChecked] = useState(false);\n  const [isToolbarDropdownOpen, setIsToolbarDropdownOpen] = useState(false);\n  const { orgAdmin } = useContext(PermissionsContext);\n  const screenSize = useScreenSize();\n  // use for text filter to focus\n  const innerRef = useRef(null);\n  const isAdmin = orgAdmin;\n  const chrome = useChrome();\n  const [currentUser, setCurrentUser] = useState({});\n  const [userToken, setUserToken] = useState('');\n\n  // for usesMetaInURL (Users page) store pagination settings in Redux, otherwise use results from meta\n  let pagination = useSelector(({ userReducer: { users } }) => ({\n    limit: (usesMetaInURL ? users.pagination.limit : users.meta.limit) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).limit,\n    offset: (usesMetaInURL ? users.pagination.offset : users.meta.offset) ?? (orgAdmin ? defaultAdminSettings : defaultSettings).offset,\n    count: usesMetaInURL ? users.pagination.count : users.meta.count,\n    redirected: usesMetaInURL && users.pagination.redirected,\n  }));\n\n  const { users, isLoading, stateFilters } = useSelector(\n    ({\n      userReducer: {\n        users: { data, filters = {} },\n        isUserDataLoading,\n      },\n    }) => ({\n      users: data?.map?.((data) => ({ ...data, uuid: data.external_source_id })),\n      isLoading: isUserDataLoading,\n      stateFilters: location.search.length > 0 || Object.keys(filters).length > 0 ? filters : { status: ['Active'] },\n    })\n  );\n\n  const fetchData = useCallback((apiProps) => dispatch(fetchUsers(apiProps)), [dispatch]);\n\n  const confirmDeactivateUsers = () => {\n    toggleUserActivationStatus(false, null, selectedRows);\n    setIsDeactivateConfirmationModalOpen(false);\n    setIsDeactivateConfirmationChecked(false);\n  };\n\n  const toggleUserIsOrgAdminStatus = (isOrgAdmin, _event, user = {}) => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    const newUserObj = { id: user.userId, is_org_admin: isOrgAdmin };\n    dispatch(updateUserIsOrgAdminStatus(newUserObj))\n      .then(() => {\n        setFilters(newFilters);\n        if (setSelectedUsers) {\n          setSelectedUsers([]);\n        } else {\n          setSelectedRows([]);\n        }\n        fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const toolbarDropdowns = () => {\n    const onToggle = (isOpen) => {\n      setIsToolbarDropdownOpen(isOpen);\n    };\n    const onToolbarDropdownSelect = async (_event) => {\n      const userActivationStatusMap = { activate: true, deactivate: false };\n\n      if (_event?.target?.id === 'deactivate') {\n        setIsDeactivateConfirmationModalOpen(true);\n      } else {\n        toggleUserActivationStatus(userActivationStatusMap[_event?.target?.id], null, selectedRows);\n      }\n      setIsToolbarDropdownOpen(false);\n    };\n    const dropdownItems = [\n      <DropdownItem key=\"activate-users-dropdown-item\" componentID=\"activate\">\n        {intl.formatMessage(messages.activateUsersButton)}\n      </DropdownItem>,\n      <DropdownItem key=\"deactivate-users-dropdown-item\" componentID=\"deactivate\">\n        {intl.formatMessage(messages.deactivateUsersButton)}\n      </DropdownItem>,\n    ];\n    return (\n      <Dropdown\n        onSelect={onToolbarDropdownSelect}\n        toggle={\n          <DropdownToggle id=\"toolbar-dropdown-toggle\" isDisabled={selectedRows.length === 0} onToggle={onToggle}>\n            {intl.formatMessage(messages.activateUsersButton)}\n          </DropdownToggle>\n        }\n        isOpen={isToolbarDropdownOpen}\n        dropdownItems={dropdownItems}\n      />\n    );\n  };\n  const toolbarButtons = () => [\n    <AppLink to={paths['invite-users'].link} key=\"invite-users\" className=\"rbac-m-hide-on-sm\">\n      <Button ouiaId=\"invite-users-button\" variant=\"primary\" aria-label=\"Invite users\">\n        {intl.formatMessage(messages.inviteUsers)}\n      </Button>\n    </AppLink>,\n    ...(isSmallScreen(screenSize)\n      ? [\n          {\n            label: intl.formatMessage(messages.inviteUsers),\n            onClick: () => {\n              navigate(mergeToBasename(paths['invite-users'].link));\n            },\n          },\n        ]\n      : []),\n  ];\n  const toggleUserActivationStatus = (isActivated, _event, users = []) => {\n    const { limit, offset } = syncDefaultPaginationWithUrl(location, navigate, pagination);\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    const newUserList = users.map((user) => {\n      return { id: user?.uuid || user?.external_source_id, is_active: isActivated };\n    });\n    dispatch(updateUsers(newUserList))\n      .then(() => {\n        setFilters(newFilters);\n        if (setSelectedUsers) {\n          setSelectedUsers([]);\n        } else {\n          setSelectedRows([]);\n        }\n        fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  useEffect(() => {\n    chrome.auth.getUser().then((user) => setCurrentUser(user));\n    chrome.auth.getToken().then((token) => setUserToken(token));\n  }, []);\n\n  const isUserSelectable = (external_source_id) => external_source_id != currentUser?.identity?.internal?.account_id;\n\n  const createITLessRows = (userLinks, data, checkedRows = []) => {\n    const maxLength = 25;\n    return data\n      ? data.reduce(\n          (\n            acc,\n            { external_source_id, username, is_active: is_active, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }\n          ) => [\n            ...acc,\n            {\n              uuid: external_source_id,\n              cells: [\n                {\n                  title:\n                    isAdmin && !displayNarrow ? (\n                      <IsAdminCellDropdownContent\n                        isOrgAdmin={isOrgAdmin}\n                        userId={external_source_id}\n                        isDisabled={!isAdmin || currentUser?.identity?.internal?.account_id == external_source_id}\n                        toggleUserIsOrgAdminStatus={toggleUserIsOrgAdminStatus}\n                      />\n                    ) : (\n                      <IsAdminCellTextContent isOrgAdmin={isOrgAdmin} />\n                    ),\n                  props: {\n                    'data-is-active': isOrgAdmin,\n                  },\n                },\n                {\n                  title: userLinks ? (\n                    <AppLink to={paths['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n                  ) : displayNarrow ? (\n                    <span title={username}>{truncate(username, { length: maxLength })}</span>\n                  ) : (\n                    username\n                  ),\n                },\n                {\n                  title: displayNarrow ? <span title={email}>{truncate(email, { length: maxLength })}</span> : email,\n                },\n                firstName,\n                lastName,\n                {\n                  title:\n                    isAdmin && !displayNarrow ? (\n                      <PF4Switch\n                        key=\"status\"\n                        isDisabled={!isAdmin || currentUser?.identity?.internal?.account_id == external_source_id}\n                        label={intl.formatMessage(messages.active)}\n                        labelOff={intl.formatMessage(messages.inactive)}\n                        isChecked={is_active}\n                        onChange={(checked, _event) => {\n                          toggleUserActivationStatus(checked, _event, [\n                            {\n                              external_source_id,\n                              is_active: is_active,\n                            },\n                          ]);\n                        }}\n                      />\n                    ) : (\n                      <Label key=\"status\" color={is_active ? 'green' : 'grey'}>\n                        {intl.formatMessage(is_active ? messages.active : messages.inactive)}\n                      </Label>\n                    ),\n                  props: {\n                    'data-is-active': is_active,\n                  },\n                },\n              ],\n              selected: Boolean(checkedRows?.find?.(({ uuid }) => uuid === external_source_id)),\n              disableSelection: displayNarrow ? undefined : !isUserSelectable(external_source_id),\n            },\n          ],\n          []\n        )\n      : [];\n  };\n\n  const updateStateFilters = useCallback((filters) => dispatch(updateUsersFilters(filters)), [dispatch]);\n  const columns = [\n    { title: intl.formatMessage(displayNarrow ? messages.orgAdmin : messages.orgAdministrator), key: 'org-admin', transforms: [nowrap] },\n    { title: intl.formatMessage(messages.username), key: 'username', transforms: [sortable] },\n    { title: intl.formatMessage(messages.email) },\n    { title: intl.formatMessage(messages.firstName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.lastName), transforms: [nowrap] },\n    { title: intl.formatMessage(messages.status), transforms: [nowrap] },\n  ];\n  const [sortByState, setSortByState] = useState({ index: 1, direction: 'asc' });\n\n  const [filters, setFilters] = useState(\n    usesMetaInURL\n      ? stateFilters\n      : {\n          username: '',\n          email: '',\n          status: [intl.formatMessage(messages.active)],\n        }\n  );\n\n  useEffect(() => {\n    usesMetaInURL && applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n  }, [pagination.offset, pagination.limit, pagination.count, pagination.redirected]);\n\n  useEffect(() => {\n    const { limit, offset } = usesMetaInURL ? syncDefaultPaginationWithUrl(location, navigate, pagination) : pagination;\n    const newFilters = usesMetaInURL\n      ? syncDefaultFiltersWithUrl(location, navigate, ['username', 'email', 'status'], filters)\n      : { status: filters.status };\n    setFilters(newFilters);\n    fetchData({ ...mappedProps({ limit, offset, filters: newFilters }), usesMetaInURL });\n  }, []);\n\n  useEffect(() => {\n    if (usesMetaInURL) {\n      isPaginationPresentInUrl(location) || applyPaginationToUrl(location, navigate, pagination.limit, pagination.offset);\n      Object.values(filters).some((filter) => filter?.length > 0) &&\n        !areFiltersPresentInUrl(location, Object.keys(filters)) &&\n        syncDefaultFiltersWithUrl(location, navigate, Object.keys(filters), filters);\n    }\n  });\n\n  const setCheckedItems = (newSelection) => {\n    if (setSelectedUsers) {\n      setSelectedUsers((users) => {\n        return newSelection(users)\n          .filter((user) => (displayNarrow ? user : user?.uuid != currentUser?.identity?.internal?.account_id))\n          .map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n      });\n    } else {\n      setSelectedRows((users) => {\n        return newSelection(users)\n          .filter((user) => (displayNarrow ? user : user?.uuid != currentUser?.identity?.internal?.account_id))\n          .map(({ uuid, username }) => ({ uuid, label: username || uuid }));\n      });\n    }\n  };\n\n  const updateFilters = (payload) => {\n    usesMetaInURL && updateStateFilters(payload);\n    setFilters({ username: '', ...payload });\n  };\n  return (\n    <>\n      <Modal\n        title={intl.formatMessage(messages.deactivateUsersConfirmationModalTitle)}\n        titleIconVariant=\"warning\"\n        description={intl.formatMessage(messages.deactivateUsersConfirmationModalDescription)}\n        variant={ModalVariant.medium}\n        isOpen={isDeactivateConfirmationModalOpen}\n        footer={\n          <Stack hasGutter>\n            <StackItem>\n              <Checkbox\n                label={intl.formatMessage(messages.deactivateUsersConfirmationModalCheckboxText)}\n                isChecked={isDeactivateConfirmationChecked}\n                onChange={(checked) => {\n                  setIsDeactivateConfirmationChecked(checked);\n                }}\n                id=\"deactivateUsersConfirmationCheckbox\"\n                name=\"deactivate-users-confirmation-checkbox\"\n              />\n            </StackItem>\n            <StackItem>\n              <Button\n                key=\"confirm-deactivate-users\"\n                ouiaId=\"danger-confirm-deactivate-users-button\"\n                isDisabled={selectedRows.length === 0 || !isDeactivateConfirmationChecked}\n                variant=\"danger\"\n                onClick={() => {\n                  confirmDeactivateUsers();\n                }}\n              >\n                {intl.formatMessage(messages.deactivateUsersConfirmationButton)}\n              </Button>\n              <Button\n                id=\"deactivate-users-confirmation-cancel\"\n                ouiaId=\"secondary-cancel-button\"\n                key=\"cancel\"\n                variant=\"link\"\n                onClick={() => {\n                  setIsDeactivateConfirmationModalOpen(false);\n                }}\n              >\n                {intl.formatMessage(messages.cancel)}\n              </Button>\n            </StackItem>\n          </Stack>\n        }\n        onClose={() => {\n          setIsDeactivateConfirmationModalOpen(false);\n        }}\n      >\n        <List isPlain isBordered>\n          {selectedRows.map((user) => (\n            <ListItem key={user.uuid}>{user.label}</ListItem>\n          ))}\n        </List>\n      </Modal>\n      <TableToolbarView\n        toolbarChildren={isAdmin && !displayNarrow ? toolbarDropdowns : () => null}\n        toolbarButtons={isAdmin && !displayNarrow && !isExternalIdp(userToken) ? toolbarButtons : () => []}\n        isCompact\n        isSelectable\n        borders={false}\n        columns={columns}\n        rows={createITLessRows(userLinks, users, selectedUsers ? selectedUsers : selectedRows)}\n        sortBy={sortByState}\n        onSort={(e, index, direction) => {\n          const orderBy = `${direction === 'desc' ? '-' : ''}${columns[index - 1].key}`;\n          setSortByState({ index, direction });\n          fetchData({ ...pagination, filters, usesMetaInURL, orderBy });\n        }}\n        data={users}\n        ouiaId=\"users-table\"\n        fetchData={(config) => {\n          const status = Object.prototype.hasOwnProperty.call(config, 'status') ? config.status : filters.status;\n          const { username, email, count, limit, offset, orderBy } = config;\n\n          fetchData({ ...mappedProps({ count, limit, offset, orderBy, filters: { username, email, status } }), usesMetaInURL }).then(() => {\n            innerRef?.current?.focus();\n          });\n          usesMetaInURL && applyFiltersToUrl(location, navigate, { username, email, status });\n        }}\n        emptyFilters={{ username: '', email: '', status: '' }}\n        setFilterValue={({ username, email, status }) => {\n          updateFilters({\n            username: typeof username === 'undefined' ? filters.username : username,\n            email: typeof email === 'undefined' ? filters.email : email,\n            status: typeof status === 'undefined' || status === filters.status ? filters.status : status,\n          });\n        }}\n        isLoading={isLoading}\n        pagination={pagination}\n        checkedRows={selectedUsers ? selectedUsers : selectedRows}\n        setCheckedItems={setCheckedItems}\n        rowWrapper={UsersRow}\n        titlePlural={intl.formatMessage(messages.users).toLowerCase()}\n        titleSingular={intl.formatMessage(messages.user)}\n        filters={[\n          {\n            key: 'username',\n            value: filters.username,\n            placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.username).toLowerCase() }),\n            innerRef,\n          },\n          {\n            key: 'email',\n            value: filters.email,\n            placeholder: intl.formatMessage(messages.filterByKey, { key: intl.formatMessage(messages.email).toLowerCase() }),\n            innerRef,\n          },\n          {\n            key: 'status',\n            value: filters.status,\n            label: intl.formatMessage(messages.status),\n            type: 'checkbox',\n            items: [\n              { label: intl.formatMessage(messages.active), value: 'Active' },\n              { label: intl.formatMessage(messages.inactive), value: 'Inactive' },\n            ],\n          },\n        ]}\n        tableId=\"users-list\"\n        {...props}\n      />\n      <Suspense>\n        <Outlet\n          context={{\n            [paths['invite-users'].path]: {\n              fetchData: () => fetchData({ ...pagination, filters, usesMetaInURL }),\n            },\n          }}\n        />\n      </Suspense>\n    </>\n  );\n};\n\nUsersListItless.propTypes = {\n  displayNarrow: PropTypes.bool,\n  users: PropTypes.array,\n  searchFilter: PropTypes.string,\n  setSelectedUsers: PropTypes.func,\n  selectedUsers: PropTypes.array,\n  userLinks: PropTypes.bool,\n  props: PropTypes.object,\n  usesMetaInURL: PropTypes.bool,\n};\n\nUsersListItless.defaultProps = {\n  displayNarrow: false,\n  users: [],\n  userLinks: false,\n  usesMetaInURL: false,\n};\n\nexport default UsersListItless;\n","import React, { Fragment } from 'react';\nimport { Label } from '@patternfly/react-core';\nimport { IntlShape } from 'react-intl';\nimport { CheckIcon, CloseIcon } from '@patternfly/react-icons';\nimport messages from '../../Messages';\nimport pathnames from '../../utilities/pathnames';\nimport AppLink from '../../presentational-components/shared/AppLink';\n\ninterface UserProps {\n  email: string;\n  first_name: string;\n  is_active: boolean;\n  is_org_admin: boolean;\n  last_name: string;\n  username: string;\n  uuid: string;\n}\n\nexport type CellObject = { title: string | React.RefAttributes<HTMLAnchorElement>; props?: { 'data-is-active': boolean } };\n\nexport interface RowProps {\n  uuid: string; // username\n  cells: [\n    React.ReactNode, // yes or no for isOrgAdmin\n    CellObject, // link to user or just username\n    string, // email\n    string, // firstName\n    string, // lastName\n    CellObject // status\n  ];\n  selected: boolean;\n}\n\nexport const createRows = (userLinks: boolean, data: UserProps[] = [], intl: IntlShape, checkedRows = [], isSelectable = false): RowProps[] =>\n  data?.reduce<RowProps[]>((acc, { username, is_active: isActive, email, first_name: firstName, last_name: lastName, is_org_admin: isOrgAdmin }) => {\n    const newEntry: RowProps = {\n      uuid: username,\n      cells: [\n        isOrgAdmin ? (\n          <Fragment>\n            <CheckIcon key=\"yes-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"yes\">{intl.formatMessage(messages.yes)}</span>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <CloseIcon key=\"no-icon\" className=\"pf-v5-u-mr-sm\" />\n            <span key=\"no\">{intl.formatMessage(messages.no)}</span>\n          </Fragment>\n        ),\n        {\n          title: userLinks ? (\n            <AppLink to={pathnames['user-detail'].link.replace(':username', username)}>{username.toString()}</AppLink>\n          ) : (\n            username.toString()\n          ),\n        },\n        email,\n        firstName,\n        lastName,\n        {\n          title: (\n            <Label key=\"status\" color={isActive ? 'green' : 'grey'}>\n              {intl.formatMessage(isActive ? messages.active : messages.inactive)}\n            </Label>\n          ),\n          props: {\n            'data-is-active': isActive,\n          },\n        },\n      ],\n      selected: isSelectable ? Boolean(checkedRows?.find?.(({ uuid }) => uuid === username)) : false,\n    };\n\n    return [...acc, newEntry];\n  }, []);\n"],"names":["syncDefaultFiltersWithUrl","location","navigate","keys","defaults","searchParams","URLSearchParams","search","filters","reduce","acc","key","values","getAll","length","Object","forEach","value","Array","isArray","Set","item","includes","append","get","set","pathname","toString","replace","areFiltersPresentInUrl","some","applyFiltersToUrl","newValues","delete","ActiveUser","linkDescription","linkTitle","intl","chrome","env","getEnvironment","prefix","isProd","orgAdmin","useContext","useFlag","className","component","h7","formatMessage","usersDescription","a","href","target","rel","propTypes","defaultProps","UsersRow","row","props","status","isActive","data","IsAdminCellTextContent","isOrgAdmin","Fragment","CheckIcon","yes","CloseIcon","no","IsAdminCellDropdownContent","userId","isDisabled","toggleUserIsOrgAdminStatus","isAdminDropdownOpen","setIsAdminDropdownOpen","useState","dropdownItems","componentID","id","onSelect","_event","toggle","onToggle","isOpen","UsersListItless","selectedUsers","setSelectedUsers","userLinks","usesMetaInURL","displayNarrow","useNavigate","useLocation","dispatch","useDispatch","selectedRows","setSelectedRows","isDeactivateConfirmationModalOpen","setIsDeactivateConfirmationModalOpen","isDeactivateConfirmationChecked","setIsDeactivateConfirmationChecked","isToolbarDropdownOpen","setIsToolbarDropdownOpen","screenSize","innerRef","useRef","isAdmin","currentUser","setCurrentUser","userToken","setUserToken","pagination","useSelector","userReducer","users","limit","meta","offset","count","redirected","isLoading","stateFilters","isUserDataLoading","map","uuid","external_source_id","fetchData","useCallback","apiProps","user","newFilters","newUserObj","is_org_admin","then","setFilters","catch","err","console","error","toggleUserActivationStatus","isActivated","newUserList","is_active","useEffect","auth","getUser","getToken","token","isUserSelectable","identity","internal","account_id","updateStateFilters","columns","title","orgAdministrator","transforms","username","email","firstName","lastName","sortByState","setSortByState","index","direction","active","filter","deactivateUsersConfirmationModalTitle","titleIconVariant","description","deactivateUsersConfirmationModalDescription","variant","medium","footer","hasGutter","label","deactivateUsersConfirmationModalCheckboxText","isChecked","onChange","checked","name","ouiaId","onClick","deactivateUsersConfirmationButton","cancel","onClose","isPlain","isBordered","toolbarChildren","activateUsersButton","deactivateUsersButton","async","activate","deactivate","toolbarButtons","to","link","inviteUsers","isCompact","isSelectable","borders","rows","checkedRows","first_name","last_name","cells","labelOff","inactive","color","selected","Boolean","find","disableSelection","undefined","createITLessRows","sortBy","onSort","e","orderBy","config","prototype","hasOwnProperty","call","current","focus","emptyFilters","setFilterValue","payload","setCheckedItems","newSelection","rowWrapper","titlePlural","toLowerCase","titleSingular","placeholder","filterByKey","type","items","tableId","Suspense","Outlet","context","path","searchFilter","createRows"],"sourceRoot":""}