{"version":3,"sources":["webpack://insights-rbac-frontend/./src/smart-components/myUserAccess/bundles/cost_management.js"],"names":["CostManagementBundle","apps","isOrgAdmin","useContext","OrgAdminContext","useState","name","setName","application","setApplication","handleSetFilters","filters","key","value","placeholder","type","items","map","app","label","createFilter","setFilters","showResourceDefinitions","hasActiveFilters","length","propTypes","PropTypes","isRequired"],"mappings":"kRA0BMA,EAAuB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACxBC,GAAaC,gBAAWC,KADW,GAEjBC,cAAS,IAFQ,WAElCC,EAFkC,KAE5BC,EAF4B,QAGHF,cAAS,IAHN,WAGlCG,EAHkC,KAGrBC,EAHqB,KAInCC,EAAmB,SAAC,GAA0B,IAAxBJ,EAAwB,EAAxBA,KAAME,EAAkB,EAAlBA,YACZ,iBAATF,GACTC,EAAQD,GAGNE,GACFC,EAAsC,iBAAhBD,EAA2B,GAAKA,IAIpDG,EAlCa,SAAC,GAAD,IAAST,EAAT,EAASA,WAAT,IAAqBI,YAArB,MAA4B,GAA5B,MAAgCE,YAAhC,OACnB,CACEI,IAAK,cACLC,WAHiB,MAA8C,GAA9C,EAIjBC,YAAa,wBACbC,KAAM,WACNC,MANiB,EAAGf,KAMRgB,KAAI,SAACC,GAAD,MAAU,CAAEC,MAAOD,EAAKL,MAAOK,QAN9B,WAQfhB,EACA,CACE,CACEU,IAAK,OACLO,MAAO,YACPJ,KAAM,OACNF,MAAOP,IAGX,KAiBYc,CAAa,CAAEnB,OAAMC,aAAYI,OAAME,gBACvD,OAAON,EACL,kBAAC,IAAD,CAAemB,WAAYX,EAAkBC,QAASA,EAASV,KAAMA,EAAMqB,yBAAuB,IAElG,kBAAC,IAAD,CACED,WAAYX,EACZC,QAASA,EACTV,KAAMA,EACNsB,iBAAkBjB,EAAKkB,OAAS,GAAKhB,EAAYgB,OAAS,EAC1DF,yBAAuB,KAK7BtB,EAAqByB,UAAY,CAC/BxB,KAAMyB,YAAkBA,YAAkBC,YAG5C","file":"js/4401.30ce322326ed30a375dd.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OrgAdminContext from '../../../utilities/org-admin-context';\nimport MUAAccessTable from '../MUAAccessTable';\nimport MUARolesTable from '../MUARolesTable';\n\nconst createFilter = ({ apps, isOrgAdmin, name = '', application = [] }) => [\n  {\n    key: 'application',\n    value: application,\n    placeholder: 'Filter by application',\n    type: 'checkbox',\n    items: apps.map((app) => ({ label: app, value: app })),\n  },\n  ...(isOrgAdmin\n    ? [\n        {\n          key: 'name',\n          label: 'Role name',\n          type: 'text',\n          value: name,\n        },\n      ]\n    : []),\n];\n\nconst CostManagementBundle = ({ apps }) => {\n  const isOrgAdmin = useContext(OrgAdminContext);\n  const [name, setName] = useState('');\n  const [application, setApplication] = useState([]);\n  const handleSetFilters = ({ name, application }) => {\n    if (typeof name === 'string') {\n      setName(name);\n    }\n\n    if (application) {\n      setApplication(typeof application === 'string' ? [] : application);\n    }\n  };\n\n  const filters = createFilter({ apps, isOrgAdmin, name, application });\n  return isOrgAdmin ? (\n    <MUARolesTable setFilters={handleSetFilters} filters={filters} apps={apps} showResourceDefinitions />\n  ) : (\n    <MUAAccessTable\n      setFilters={handleSetFilters}\n      filters={filters}\n      apps={apps}\n      hasActiveFilters={name.length > 0 || application.length > 0}\n      showResourceDefinitions\n    />\n  );\n};\n\nCostManagementBundle.propTypes = {\n  apps: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default CostManagementBundle;\n"],"sourceRoot":""}