{"version":3,"sources":["webpack://insights-rbac-frontend/./src/smart-components/myUserAccess/CommonBundleView.js","webpack://insights-rbac-frontend/./src/smart-components/myUserAccess/bundles/insights.js"],"names":["CommonBundleView","apps","isOrgAdmin","useContext","OrgAdminContext","useState","name","setName","permission","setPermission","application","setApplication","handleSetFilters","filters","key","value","placeholder","type","items","map","app","label","createFilter","MUARolesTable","setFilters","MUAAccessTable","hasActiveFilters","length","propTypes","PropTypes","isRequired","InsightsBundle"],"mappings":"iRAmCMA,EAAmB,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACpBC,GAAaC,gBAAWC,KADO,GAEbC,cAAS,IAFI,WAE9BC,EAF8B,KAExBC,EAFwB,QAGDF,cAAS,IAHR,WAG9BG,EAH8B,KAGlBC,EAHkB,QAICJ,cAAS,IAJV,WAI9BK,EAJ8B,KAIjBC,EAJiB,KAK/BC,EAAmB,SAAC,GAAsC,IAApCN,EAAoC,EAApCA,KAAMI,EAA8B,EAA9BA,YAAaF,EAAiB,EAAjBA,WACzB,iBAATF,GACTC,EAAQD,GAGgB,iBAAfE,GACTC,EAAcD,GAGZE,GACFC,EAAsC,iBAAhBD,EAA2B,GAAKA,IAIpDG,EA9CoB,SAAC,GAAD,IAASX,EAAT,EAASA,WAAT,IAAqBI,YAArB,MAA4B,GAA5B,MAAgCI,YAAhC,OAC1B,CACEI,IAAK,cACLC,WAHwB,MAA8C,GAA9C,EAIxBC,YAAa,wBACbC,KAAM,WACNC,MANwB,EAAGjB,KAMfkB,KAAI,SAACC,GAAD,MAAU,CAAEC,MAAOD,EAAKL,MAAOK,QANvB,WAQtBlB,EACA,CACE,CACEY,IAAK,OACLG,KAAM,OACNF,MAAOT,EACPe,MAAO,YACPL,YAAa,wBASjB,KAsBYM,CAAa,CAAErB,OAAMC,aAAYI,OAAMI,cAAaF,eACpE,OAAON,EACL,kBAACqB,EAAA,EAAD,CAAeC,WAAYZ,EAAkBC,QAASA,EAASZ,KAAMA,IAErE,kBAACwB,EAAA,EAAD,CAAgBD,WAAYZ,EAAkBC,QAASA,EAASZ,KAAMA,EAAMyB,iBAAkBpB,EAAKqB,OAAS,GAAKjB,EAAYiB,OAAS,KAI1I3B,EAAiB4B,UAAY,CAC3B3B,KAAM4B,YAAkBA,YAAkBC,YAG5C,UC9DA,IAAMC,EAAiB,SAAC,GAAD,IAAG9B,EAAH,EAAGA,KAAH,OAAc,kBAAC,EAAD,CAAkBA,KAAMA,KAE7D8B,EAAeH,UAAY,CACzB3B,KAAM4B,YAAkBA,YAAkBC,YAG5C","file":"js/154.32ca9c953ab70b0b637f.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport OrgAdminContext from '../../utilities/org-admin-context';\nimport MUAAccessTable from './MUAAccessTable';\nimport MUARolesTable from './MUARolesTable';\n\n// TODO: Add permissions back when we support partial matching\n\nexport const createFilter = ({ apps, isOrgAdmin, name = '', application = [] /* permission = '' */ }) => [\n  {\n    key: 'application',\n    value: application,\n    placeholder: 'Filter by application',\n    type: 'checkbox',\n    items: apps.map((app) => ({ label: app, value: app })),\n  },\n  ...(isOrgAdmin\n    ? [\n        {\n          key: 'name',\n          type: 'text',\n          value: name,\n          label: 'Role name',\n          placeholder: 'Filter by role name',\n        },\n        // {\n        //   key: 'permission',\n        //   value: permission,\n        //   placeholder: 'Filter by permission',\n        //   type: 'text',\n        // },\n      ]\n    : []),\n];\n\nconst CommonBundleView = ({ apps }) => {\n  const isOrgAdmin = useContext(OrgAdminContext);\n  const [name, setName] = useState('');\n  const [permission, setPermission] = useState('');\n  const [application, setApplication] = useState([]);\n  const handleSetFilters = ({ name, application, permission }) => {\n    if (typeof name === 'string') {\n      setName(name);\n    }\n\n    if (typeof permission === 'string') {\n      setPermission(permission);\n    }\n\n    if (application) {\n      setApplication(typeof application === 'string' ? [] : application);\n    }\n  };\n\n  const filters = createFilter({ apps, isOrgAdmin, name, application, permission });\n  return isOrgAdmin ? (\n    <MUARolesTable setFilters={handleSetFilters} filters={filters} apps={apps} />\n  ) : (\n    <MUAAccessTable setFilters={handleSetFilters} filters={filters} apps={apps} hasActiveFilters={name.length > 0 || application.length > 0} />\n  );\n};\n\nCommonBundleView.propTypes = {\n  apps: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default CommonBundleView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CommonBundleView from '../CommonBundleView';\n\nconst InsightsBundle = ({ apps }) => <CommonBundleView apps={apps} />;\n\nInsightsBundle.propTypes = {\n  apps: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default InsightsBundle;\n"],"sourceRoot":""}